// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
var ENVIRONMENT_IS_BROWSIX = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_BROWSIX = ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_WORKER = false;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER | ENVIRONMENT_IS_BROWSIX) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      if (ENVIRONMENT_IS_BROWSIX)
        debugger;
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OnceEmitter = (function () {
    function OnceEmitter() {
        this.listeners = {};
    }
    OnceEmitter.prototype.once = function (event, cb) {
        var cbs = this.listeners[event];
        if (!cbs)
            cbs = [cb];
        else
            cbs.push(cb);
        this.listeners[event] = cbs;
    };
    OnceEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var cbs = this.listeners[event];
        this.listeners[event] = [];
        if (!cbs)
            return;
        for (var i = 0; i < cbs.length; i++) {
            cbs[i].apply(null, args);
        }
    };
    return OnceEmitter;
})();
var Process = (function (_super) {
    __extends(Process, _super);
    function Process(argv, environ) {
        _super.call(this);
        this.argv = argv;
        this.env = environ;
        this.syscall = null;
    }
    Process.prototype.exit = function (code) {
        //Module['noExitRuntime'] = false;
        if (code === void 0) { code = 0; }
        SYSCALLS.browsix.syscall.exit(code);
    };
    return Process;
})(OnceEmitter);

if (ENVIRONMENT_IS_BROWSIX) {
  Runtime['process'] = Runtime.process = new Process(null, null);
  if (typeof Atomics !== 'undefined' && !Atomics.wait && Atomics.futexWait)
    Atomics.wait = Atomics.futexWait;
  if (typeof Atomics !== 'undefined' && !Atomics.wake && Atomics.futexWake)
    Atomics.wake = Atomics.futexWake;
}



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  // needed when run under emterpreter.
  if (typeof asm !== 'undefined' && asm.update_heap) {
    asm.update_heap();
  } else {
    HEAP8 = Module['HEAP8'];
    HEAP16 = Module['HEAP16'];
    HEAP32 = Module['HEAP32'];
    HEAPU8 = Module['HEAPU8'];
    HEAPU16 = Module['HEAPU16'];
    HEAPU32 = Module['HEAPU32'];
    HEAPF32 = Module['HEAPF32'];
    HEAPF64 = Module['HEAPF64'];
  }
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 536870912;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

var REAL_TOTAL_MEMORY = TOTAL_MEMORY;
TOTAL_MEMORY = 16*1024*1024;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22512;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,0,0,0,224,21,0,0,102,8,0,0,107,8,0,0,116,8,0,0,125,8,0,0,131,8,0,0,137,8,0,0,142,8,0,0,146,8,0,0,20,11,0,0,83,115,73,73,115,115,115,0,4,8,12,16,20,24,7,28,32,11,0,0,83,115,73,109,0,0,0,0,4,8,12,0,0,0,4,16,1,0,0,0,1,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,48,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,166,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,174,24,0,0,156,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,2,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,82,56,0,0,156,31,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,116,97,114,0,0,104,49,49,65,89,38,83,89,216,53,87,210,0,0,46,223,128,64,48,64,231,128,16,47,37,149,74,63,239,223,224,48,0,230,152,52,213,61,79,68,163,201,181,53,63,81,54,147,202,123,82,48,158,166,48,160,104,38,164,245,30,33,30,161,161,136,0,0,3,68,65,48,2,96,4,97,54,145,166,2,75,94,29,181,181,215,221,211,46,148,141,10,1,237,66,112,46,25,159,11,105,120,191,204,97,10,199,84,17,230,241,118,112,186,198,158,27,193,15,124,237,174,46,160,151,76,37,47,121,51,29,152,164,143,17,26,6,241,202,162,62,42,8,81,3,19,4,134,210,6,68,50,10,32,146,189,164,168,26,206,52,16,16,130,7,112,196,221,53,171,47,203,6,28,45,12,28,105,119,84,189,55,106,7,160,240,48,35,237,116,165,78,74,147,168,203,81,155,60,52,54,161,237,106,164,76,90,161,220,254,242,67,53,143,216,163,234,108,71,174,136,54,190,14,204,10,213,220,83,249,247,176,99,80,140,114,32,181,229,119,35,112,201,65,232,159,218,227,190,72,30,86,18,11,4,33,249,137,164,24,41,206,253,121,211,202,41,179,132,131,198,237,42,24,131,56,177,129,17,12,9,64,88,150,46,1,48,255,23,114,69,56,80,144,216,53,87,210,78,111,32,104,101,108,112,32,97,118,97,105,108,97,98,108,101,46,10,10,0,85,115,97,103,101,58,32,116,97,114,32,0,10,10,0,45,45,104,101,108,112,0,98,117,115,121,98,111,120,0,119,97,105,116,112,105,100,0,99,97,110,39,116,32,111,112,101,110,32,39,37,115,39,0,99,97,110,39,116,32,99,114,101,97,116,101,32,112,105,112,101,0,99,97,110,39,116,32,100,117,112,108,105,99,97,116,101,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,115,104,111,114,116,32,119,114,105,116,101,0,99,97,110,39,116,32,99,104,97,110,103,101,32,100,105,114,101,99,116,111,114,121,32,116,111,32,39,37,115,39,0,118,102,111,114,107,0,114,101,97,100,32,101,114,114,111,114,0,119,114,105,116,101,32,101,114,114,111,114,0,1,111,117,116,32,111,102,32,109,101,109,111,114,121,0,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,45,47,98,105,110,47,115,104,0,37,115,0,45,0,45,45,58,116,116,58,118,118,58,255,58,58,99,58,116,58,120,58,99,45,45,116,120,58,116,45,45,99,120,58,120,45,45,99,116,58,249,43,0,108,105,115,116,0,0,116,101,120,116,114,97,99,116,0,0,120,100,105,114,101,99,116,111,114,121,0,1,67,102,105,108,101,0,1,102,116,111,45,115,116,100,111,117,116,0,0,79,110,111,45,115,97,109,101,45,111,119,110,101,114,0,0,111,115,97,109,101,45,112,101,114,109,105,115,115,105,111,110,115,0,0,112,118,101,114,98,111,115,101,0,0,118,107,101,101,112,45,111,108,100,0,0,107,99,114,101,97,116,101,0,0,99,100,101,114,101,102,101,114,101,110,99,101,0,0,104,102,105,108,101,115,45,102,114,111,109,0,1,84,101,120,99,108,117,100,101,45,102,114,111,109,0,1,88,116,111,117,99,104,0,0,109,115,116,114,105,112,45,99,111,109,112,111,110,101,110,116,115,0,1,249,110,111,45,114,101,99,117,114,115,105,111,110,0,0,250,116,111,45,99,111,109,109,97,110,100,0,1,251,110,117,109,101,114,105,99,45,111,119,110,101,114,0,0,252,110,111,45,115,97,109,101,45,112,101,114,109,105,115,115,105,111,110,115,0,0,253,111,118,101,114,119,114,105,116,101,0,0,254,101,120,99,108,117,100,101,0,1,255,0,45,45,118,101,114,115,105,111,110,0,116,97,114,32,40,98,117,115,121,98,111,120,41,32,49,46,50,54,46,50,0,116,120,67,58,102,58,79,111,112,118,107,99,104,84,58,42,88,58,42,109,249,58,0,84,65,82,95,70,73,76,69,84,89,80,69,61,102,0,101,109,112,116,121,32,97,114,99,104,105,118,101,0,99,97,110,39,116,32,115,116,97,116,32,116,97,114,32,102,105,108,101,0,37,115,58,32,115,111,99,107,101,116,32,105,103,110,111,114,101,100,0,37,115,58,32,102,105,108,101,32,105,115,32,116,104,101,32,97,114,99,104,105,118,101,59,32,115,107,105,112,112,105,110,103,0,37,48,42,108,111,0,46,47,46,47,64,76,111,110,103,76,105,110,107,0,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,0,37,115,58,32,117,110,107,110,111,119,110,32,102,105,108,101,32,116,121,112,101,0,37,115,37,115,10,0,101,114,114,111,114,32,101,120,105,116,32,100,101,108,97,121,101,100,32,102,114,111,109,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,115,0,37,115,58,32,110,111,116,32,102,111,117,110,100,32,105,110,32,97,114,99,104,105,118,101,0,99,97,110,39,116,32,114,101,109,111,118,101,32,111,108,100,32,102,105,108,101,32,37,115,0,99,97,110,39,116,32,115,116,97,116,32,111,108,100,32,102,105,108,101,0,37,115,32,110,111,116,32,99,114,101,97,116,101,100,58,32,110,101,119,101,114,32,111,114,32,115,97,109,101,32,97,103,101,32,102,105,108,101,32,101,120,105,115,116,115,0,99,97,110,39,116,32,99,114,101,97,116,101,32,37,115,108,105,110,107,32,102,114,111,109,32,37,115,32,116,111,32,37,115,0,104,97,114,100,0,99,97,110,39,116,32,109,97,107,101,32,100,105,114,32,37,115,0,115,121,109,0,99,97,110,39,116,32,99,114,101,97,116,101,32,110,111,100,101,32,37,115,0,117,110,114,101,99,111,103,110,105,122,101,100,32,102,105,108,101,32,116,121,112,101,0,84,65,82,95,37,115,61,37,108,111,0,77,79,68,69,0,70,73,76,69,78,65,77,69,0,82,69,65,76,78,65,77,69,0,85,78,65,77,69,0,71,78,65,77,69,0,83,73,90,69,0,85,73,68,0,71,73,68,0,84,65,82,95,37,115,61,37,115,0,84,65,82,95,37,115,61,37,108,108,117,0,45,99,0,99,97,110,39,116,32,101,120,101,99,117,116,101,32,39,37,115,39,0,39,37,115,39,32,114,101,116,117,114,110,101,100,32,115,116,97,116,117,115,32,37,100,0,39,37,115,39,32,116,101,114,109,105,110,97,116,101,100,32,98,121,32,115,105,103,110,97,108,32,37,100,0,117,115,116,97,114,0,105,110,118,97,108,105,100,32,116,97,114,32,109,97,103,105,99,0,105,110,118,97,108,105,100,32,116,97,114,32,104,101,97,100,101,114,32,99,104,101,99,107,115,117,109,0,99,111,114,114,117,112,116,101,100,32,111,99,116,97,108,32,118,97,108,117,101,32,105,110,32,116,97,114,32,104,101,97,100,101,114,0,109,97,108,102,111,114,109,101,100,32,101,120,116,101,110,100,101,100,32,104,101,97,100,101,114,44,32,115,107,105,112,112,101,100,0,112,97,116,104,61,0,108,105,110,107,112,97,116,104,61,0,119,97,114,110,105,110,103,58,32,115,107,105,112,112,105,110,103,32,104,101,97,100,101,114,32,39,37,99,39,0,117,110,107,110,111,119,110,32,116,121,112,101,102,108,97,103,58,32,48,120,37,120,0,37,117,0,37,115,32,37,115,47,37,115,32,37,57,108,117,32,37,52,117,45,37,48,50,117,45,37,48,50,117,32,37,48,50,117,58,37,48,50,117,58,37,48,50,117,32,37,115,0,32,45,62,32,37,115,0,115,101,101,107,32,102,97,105,108,117,114,101,0,47,46,46,47,0,114,101,109,111,118,105,110,103,32,108,101,97,100,105,110,103,32,39,37,46,42,115,39,32,102,114,111,109,32,109,101,109,98,101,114,32,110,97,109,101,115,0,47,0,37,115,37,115,37,115,0,83,72,69,76,76,0,78,79,32,79,80,84,32,37,99,33,0,99,114,101,97,116,101,100,32,100,105,114,101,99,116,111,114,121,58,32,39,37,115,39,10,0,115,101,116,32,112,101,114,109,105,115,115,105,111,110,115,32,111,102,0,99,114,101,97,116,101,0,99,97,110,39,116,32,37,115,32,100,105,114,101,99,116,111,114,121,32,39,37,115,39,0,63,112,99,63,100,63,98,63,45,63,108,63,115,63,63,63,114,119,120,83,84,115,116,115,104,111,114,116,32,114,101,97,100,0,110,117,109,98,101,114,32,37,115,32,105,115,32,110,111,116,32,105,110,32,37,108,108,117,46,46,37,108,108,117,32,114,97,110,103,101,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,39,37,115,39,0,110,111,116,32,97,32,115,121,109,108,105,110,107,0,37,115,58,32,99,97,110,110,111,116,32,114,101,97,100,32,108,105,110,107,58,32,37,115,0,114,0,47,101,116,99,47,112,97,115,115,119,100,0,47,101,116,99,47,103,114,111,117,112,0,37,115,58,32,98,97,100,32,114,101,99,111,114,100,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,10,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        if (ENVIRONMENT_IS_BROWSIX) {
          Module["noFSInit"] = true;
          return;
        }
  
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        // ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        // ENV['PATH'] = '/';
        // ENV['PWD'] = '/';
        // ENV['HOME'] = '/home/web_user';
        // ENV['LANG'] = 'C';
        // ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_NORMAL);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_NORMAL);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      },browsix:{async:true,waitOff:-1,syncMsg:{trap:0,args:[0,0,0,0,0,0]},SyscallResponseFrom:function (ev) {
          var requiredOnData = ['id', 'name', 'args'];
          if (!ev.data)
            return;
          for (var i = 0; i < requiredOnData.length; i++) {
            if (!ev.data.hasOwnProperty(requiredOnData[i]))
              return;
          }
          var args = ev.data.args; //.map(convertApiErrors);
          return {id: ev.data.id, name: ev.data.name, args: args};
        },syscall:{msgIdSeq:1,outstanding:{},signalHandlers:{init:[function init1(data) {
          // 0: args
          // 1: environ
          // 2: debug flag
          // 3: pid (if fork)
          // 4: heap (if fork)
          // 5: fork args (if fork)
  
          var args = data.args[0];
          var environ = data.args[1];
          // args[4] is a copy of the heap - replace anything we just
          // alloc'd with it.
          if (data.args[4]) {
            var pid = data.args[3];
            var heap = data.args[4];
            var forkArgs = data.args[5];
  
            Runtime.process.parentBuffer = heap;
            Runtime.process.pid = pid;
            Runtime.process.forkArgs = forkArgs;
  
            updateGlobalBuffer(Runtime.process.parentBuffer);
            updateGlobalBufferViews();
  
            assert(HEAP32.buffer === Runtime.process.parentBuffer);
  
            asm.stackRestore(forkArgs.stackSave);
            asm.emtStackRestore(forkArgs.emtStackTop);
          }
  
          args = [args[0]].concat(args);
  
          Runtime.process.argv = args;
          Runtime.process.env = environ;
  
          if (typeof SharedArrayBuffer !== 'function') {
            var done = function() {
              SYSCALLS.browsix.syscall.exit(-1);
            };
            var msg = 'ERROR: requires SharedArrayBuffer support, exiting\n';
            var buf = new Uint8Array(msg.length);
            for (var i = 0; i < msg.length; i++)
              buf[i] = msg.charCodeAt(i);
  
            SYSCALLS.browsix.syscall.syscallAsync(done, 'pwrite', [2, buf, -1]);
            console.log('Embrowsix: shared array buffers required');
            return;
          }
  
          if (typeof gc === 'function') gc();
  
          init2();
          function init2(attempt) {
            if (!attempt)
              attempt = 0;
  
            if (typeof gc === 'function') gc();
  
            var oldHEAP8 = HEAP8;
            var b = null;
            try {
              b = new SharedArrayBuffer(REAL_TOTAL_MEMORY);
            } catch (e) {
              if (attempt >= 16)
                throw e;
  
              console.log('couldnt allocate SharedArrayBuffer(' + REAL_TOTAL_MEMORY + '), retrying');
  
              var delay = 200*attempt;
              if (delay > 2000)
                delay = 2000;
  
              if (typeof gc === 'function') gc();
              setTimeout(init2, delay, attempt+1);
              if (typeof gc === 'function') gc();
  
              return;
            }
            TOTAL_MEMORY = REAL_TOTAL_MEMORY;
            REAL_TOTAL_MEMORY = undefined;
  
            // copy whatever was in the old guy to here
            new Int8Array(b).set(oldHEAP8);
            updateGlobalBuffer(b);
            updateGlobalBufferViews();
            asm = asmModule(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
            initReceiving();
            initRuntimeFuncs();
  
            var PER_BLOCKING = 0x80;
            // it seems malloc overflows into our static allocation, so
            // just reserve that, throw it away, and never use it.  The
            // first number is in bytes, no matter what the 'i*' specifier
            // is :\
            getMemory(1024);
            var waitOff = getMemory(1024) + 512;
            getMemory(1024);
            SYSCALLS.browsix.waitOff = waitOff;
  
            // the original spec called for buffer to be in the transfer
            // list, but the current spec (and dev versions of Chrome)
            // don't support that.  Try it the old way, and if it
            // doesn't work try it the new way.
            try {
              SYSCALLS.browsix.syscall.syscallAsync(personalityChanged, 'personality',
                                                    [PER_BLOCKING, buffer, waitOff], [buffer]);
            } catch (e) {
              SYSCALLS.browsix.syscall.syscallAsync(personalityChanged, 'personality',
                                                    [PER_BLOCKING, buffer, waitOff], []);
            }
            function personalityChanged(err) {
              if (err) {
                console.log('personality: ' + err);
                return;
              }
              SYSCALLS.browsix.async = false;
              Runtime.process.emit('ready');
            }
          }
        }]},syscallAsync:function (cb, name, args, transferrables) {
            var msgId = this.nextMsgId();
            this.outstanding[msgId] = cb;
            self.postMessage({
              id: msgId,
              name: name,
              args: args,
            }, transferrables);
          },sync:function (trap, a1, a2, a3, a4, a5, a6) {
            var waitOff = SYSCALLS.browsix.waitOff;
            var syncMsg = SYSCALLS.browsix.syncMsg;
            syncMsg.trap = trap|0;
            syncMsg.args[0] = a1|0;
            syncMsg.args[1] = a2|0;
            syncMsg.args[2] = a3|0;
            syncMsg.args[3] = a4|0;
            syncMsg.args[4] = a5|0;
            syncMsg.args[5] = a6|0;
  
            Atomics.store(HEAP32, waitOff >> 2, 0);
            self.postMessage(syncMsg);
            var paranoid = Atomics.load(HEAP32, waitOff >> 2)|0;
            if (paranoid !== 1 && paranoid !== 0) {
              Module.printErr('WARN: someone wrote over our futex alloc(' + waitOff + '): ' + paranoid);
              debugger;
            }
            Atomics.wait(HEAP32, waitOff >> 2, 0);
            Atomics.store(HEAP32, waitOff >> 2, 0);
            return Atomics.load(HEAP32, (waitOff >> 2) + 1);
          },exit:function (code) {
            // FIXME: this will only work in sync mode.
            Module['_fflush'](0);
            if (SYSCALLS.browsix.async) {
              this.syscallAsync(null, 'exit', [code]);
            } else {
              this.sync(252 /* SYS_exit_group */, code);
            }
            close();
          },addEventListener:function (type, handler) {
            if (!handler)
              return;
            if (this.signalHandlers[type])
              this.signalHandlers[type].push(handler);
            else
              this.signalHandlers[type] = [handler];
          },resultHandler:function (ev) {
            var response = SYSCALLS.browsix.SyscallResponseFrom(ev);
            if (!response) {
              console.log('bad usyscall message, dropping');
              console.log(ev);
              return;
            }
            if (response.name) {
              var handlers = this.signalHandlers[response.name];
              if (handlers) {
                for (var i = 0; i < handlers.length; i++)
                  handlers[i](response);
              }
              else {
                console.log('unhandled signal ' + response.name);
              }
              return;
            }
            this.complete(response.id, response.args);
          },complete:function (id, args) {
            var cb = this.outstanding[id];
            delete this.outstanding[id];
            if (cb) {
              cb.apply(undefined, args);
            }
            else {
              console.log('unknown callback for msg ' + id + ' - ' + args);
            }
          },nextMsgId:function () {
            return ++this.msgIdSeq;
          }}}};function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_DUP3 = 330;
        var fd1 = SYSCALLS.get(), fd2 = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_DUP3, fd1, fd2, 0);
      }
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_GETPID = 20;
        return SYSCALLS.browsix.syscall.sync(SYS_GETPID);
      }
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_MKDIR = 39;
        var path = SYSCALLS.get(), mode = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_MKDIR, path, mode);
      }
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_READ = 3;
        var fd = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          if (len === 0)
            continue;
          var read = SYSCALLS.browsix.syscall.sync(SYS_READ, fd, ptr, len);
          if (read < 0)
            return ret === 0 ? read : ret;
          ret += read;
        }
        return ret;
      }
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_STAT = 195;
        var path = SYSCALLS.get(), buf = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_STAT, path, buf);
      }
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_FSTAT64 = 197;
        var fd = SYSCALLS.get(), buf = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_FSTAT64, fd, buf);
      }
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_LSTAT = 196;
        var path = SYSCALLS.get(), buf = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_LSTAT, path, buf);
      }
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall199() {
  return ___syscall202.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___lock() {}

  function ___unlock() {}

  function ___syscall2(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fork
      if (ENVIRONMENT_IS_BROWSIX) {
        abort('fork not supported in sync Browsix');
      }
      abort('fork not supported without Browsix');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  function ___syscall114(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // wait4
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_WAIT4 = 114;
        var pid = SYSCALLS.get(), wstatus = SYSCALLS.get(), options = SYSCALLS.get(), rusage = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_WAIT4, pid, wstatus, options, rusage);
      }
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_WRITE = 4;
        var fd = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          if (len === 0)
            continue;
          var written = SYSCALLS.browsix.syscall.sync(SYS_WRITE, fd, ptr, len);
          if (written < 0)
            return ret === 0 ? written : ret;
          ret += written;
        }
        return ret;
      }
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall212(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall175(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rt_sigprocmask
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_SIGPROCMASK = 174;
        var how = SYSCALLS.get(), set = SYSCALLS.get(), oldset = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_SIGPROCMASK, how, set, oldset);
      }
      //console.log('TODO: sigprocmask');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall174(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rt_sigaction
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_SIGACTION = 174;
        var signum = SYSCALLS.get(), act = SYSCALLS.get(), oldact = SYSCALLS.get();
  
        // if act->sa_handler == SIG_DFL or SIG_IGN, pass along to
        // kernel.  otherwise, register the pointer here somewhere.  and
        // figure out how to invoke it?
  
        return SYSCALLS.browsix.syscall.sync(SYS_SIGACTION, signum, act, oldact);
      }
      //console.log('TODO: sigaction');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_IOCTL = 54;
        var fd = SYSCALLS.get(), op = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_IOCTL, fd, op);
      }
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      if (ENVIRONMENT_IS_BROWSIX) {
        console.log('TODO: chmod');
        return 0;
      }
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall14(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknod
      if (ENVIRONMENT_IS_BROWSIX) {
        console.log('TODO: mknod');
        abort('unsupported syscall mknod');
      }
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall11(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // execve
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_EXECVE = 11;
        var filename = SYSCALLS.get(), argv = SYSCALLS.get(), envp = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_EXECVE, filename, argv, envp);
      }
      abort('execve not supported without Browsix');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_UNLINK = 10;
        var path = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_UNLINK, path);
      }
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function ___syscall9(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // link
      var oldpath = SYSCALLS.get(), newpath = SYSCALLS.get();
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_READ = 3;
        var fd = SYSCALLS.get(), buf = SYSCALLS.get(), count = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_READ, fd, buf, count);
      }
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_CHDIR = 12;
        var pathname = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_CHDIR, pathname);
      }
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_OPEN = 5;
        var path = SYSCALLS.get(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_OPEN, path, flags, mode);
      }
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_WRITE = 4;
        var fd = SYSCALLS.get(), buf = SYSCALLS.get(), count = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_WRITE, fd, buf, count);
      }
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_CLOSE = 6;
        var fd = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_CLOSE, fd);
      }
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___syscall83(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlink
      if (ENVIRONMENT_IS_BROWSIX) {
        console.log('TODO: symlink');
        abort('unsupported syscall symlink');
        return 0;
      }
      var target = SYSCALLS.getStr(), linkpath = SYSCALLS.getStr();
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___uremdi3"] = ___uremdi3;

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      if (ENVIRONMENT_IS_BROWSIX) {
        console.log('TODO: readlink');
        abort('unsupported syscall readlink');
        return 0;
      }
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _fnmatch() {
  Module['printErr']('missing function: fnmatch'); abort(-1);
  }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_LLSEEK = 140;
        var fd = SYSCALLS.get(), offhi = SYSCALLS.get(), offlo = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_LLSEEK, fd, offhi, offlo, result, whence);
      }
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _utimes(path, times) {
      var time;
      if (times) {
        var offset = 8 + 0;
        time = HEAP32[(((times)+(offset))>>2)] * 1000;
        offset = 8 + 4;
        time += HEAP32[(((times)+(offset))>>2)] / 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___syscall42(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_PIPE2 = 41;
        var pipefd = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_PIPE2, pipefd, 0);
      }
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_FCNTL64 = 221;
        var fd = SYSCALLS.get(), cmd = SYSCALLS.get();
        var arg = 0;
  
        // only some of the commands have multiple arguments.
        switch (cmd) {
        case 0:
        case 4:
        case 12:
        case 12:
          arg = SYSCALLS.get();
        }
  
        return SYSCALLS.browsix.syscall.sync(SYS_FCNTL64, fd, cmd, arg);
      }
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      if (ENVIRONMENT_IS_BROWSIX) {
        var SYS_GETDENTS64 = 220;
        var fd = SYSCALLS.get(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
        return SYSCALLS.browsix.syscall.sync(SYS_GETDENTS64, fd, dirp, count);
      }
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _bb_common_bufsiz1() {
  Module['printErr']('missing function: bb_common_bufsiz1'); abort(-1);
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (!ENVIRONMENT_IS_BROWSIX) ___buildEnvironment(ENV);;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall85": ___syscall85, "_putenv": _putenv, "_utimes": _utimes, "___syscall83": ___syscall83, "___syscall63": ___syscall63, "___syscall60": ___syscall60, "_abort": _abort, "___syscall42": ___syscall42, "___syscall202": ___syscall202, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall20": ___syscall20, "___syscall174": ___syscall174, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_localtime_r": _localtime_r, "_tzset": _tzset, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "___syscall197": ___syscall197, "___syscall196": ___syscall196, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall199": ___syscall199, "__exit": __exit, "___syscall175": ___syscall175, "___syscall195": ___syscall195, "___syscall221": ___syscall221, "___syscall212": ___syscall212, "___syscall9": ___syscall9, "___syscall114": ___syscall114, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall15": ___syscall15, "___syscall14": ___syscall14, "___syscall39": ___syscall39, "___syscall12": ___syscall12, "___syscall11": ___syscall11, "___syscall10": ___syscall10, "_fnmatch": _fnmatch, "___syscall220": ___syscall220, "___syscall3": ___syscall3, "___syscall2": ___syscall2, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall4": ___syscall4, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___environ": ___environ, "_bb_common_bufsiz1": _bb_common_bufsiz1 };
// EMSCRIPTEN_START_ASM
var asm = undefined;
var asmModule = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___environ=env.___environ|0;
  var _bb_common_bufsiz1=env._bb_common_bufsiz1|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall85=env.___syscall85;
  var _putenv=env._putenv;
  var _utimes=env._utimes;
  var ___syscall83=env.___syscall83;
  var ___syscall63=env.___syscall63;
  var ___syscall60=env.___syscall60;
  var _abort=env._abort;
  var ___syscall42=env.___syscall42;
  var ___syscall202=env.___syscall202;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall20=env.___syscall20;
  var ___syscall174=env.___syscall174;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var ___syscall197=env.___syscall197;
  var ___syscall196=env.___syscall196;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall199=env.___syscall199;
  var __exit=env.__exit;
  var ___syscall175=env.___syscall175;
  var ___syscall195=env.___syscall195;
  var ___syscall221=env.___syscall221;
  var ___syscall212=env.___syscall212;
  var ___syscall9=env.___syscall9;
  var ___syscall114=env.___syscall114;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall15=env.___syscall15;
  var ___syscall14=env.___syscall14;
  var ___syscall39=env.___syscall39;
  var ___syscall12=env.___syscall12;
  var ___syscall11=env.___syscall11;
  var ___syscall10=env.___syscall10;
  var _fnmatch=env._fnmatch;
  var ___syscall220=env.___syscall220;
  var ___syscall3=env.___syscall3;
  var ___syscall2=env.___syscall2;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall4=env.___syscall4;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$phi190$iZ2D = 0, $$pre171 = 0, $$pre188$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $169 = 0, $176 = 0, $177 = 0, $188 = 0, $2 = 0, $200 = 0, $207 = 0, $209 = 0, $212 = 0, $213 = 0, $218 = 0, $22 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $24 = 0, $244 = 0, $246 = 0, $249 = 0, $25 = 0, $254 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $267 = 0, $270 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $287 = 0, $288 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $306 = 0, $318 = 0, $321 = 0, $322 = 0, $334 = 0, $336 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $35 = 0, $358 = 0.0, $365 = 0, $369 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $385 = 0, $391 = 0.0, $392 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $405 = 0, $406 = 0.0, $41 = 0, $416 = 0, $419 = 0, $422 = 0, $431 = 0, $433 = 0, $434 = 0, $440 = 0, $443 = 0.0, $45 = 0, $452 = 0, $457 = 0, $462 = 0, $466 = 0, $47 = 0, $476 = 0, $477 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $484 = 0.0, $487 = 0, $489 = 0, $492 = 0, $494 = 0, $495 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $504 = 0, $508 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $52 = 0, $524 = 0, $525 = 0, $526 = 0, $530 = 0, $531 = 0, $538 = 0, $546 = 0, $552 = 0, $553 = 0, $555 = 0, $556 = 0, $561 = 0, $562 = 0, $564 = 0, $57 = 0, $572 = 0, $575 = 0, $578 = 0, $579 = 0, $580 = 0, $583 = 0, $587 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $604 = 0, $609 = 0, $61 = 0, $610 = 0, $612 = 0, $613 = 0, $615 = 0, $617 = 0, $619 = 0, $62 = 0, $63 = 0, $630 = 0, $633 = 0, $637 = 0, $638 = 0, $647 = 0, $648 = 0, $652 = 0, $655 = 0, $657 = 0, $659 = 0, $66 = 0, $663 = 0, $666 = 0, $670 = 0, $68 = 0, $680 = 0, $685 = 0, $692 = 0, $697 = 0, $7 = 0, $705 = 0, $715 = 0, $719 = 0, $726 = 0, $727 = 0, $734 = 0, $736 = 0, $740 = 0, $742 = 0, $751 = 0, $757 = 0, $758 = 0, $772 = 0, $774 = 0, $787 = 0, $791 = 0, $793 = 0, $798 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0, $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0, $i$3101$i = 0, $i$389 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0, $s$7 = 0, $s$7$lcssa298 = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != 0;
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $buf$i;
 $6 = 0 - $5 | 0;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $5 | 0;
 $11 = -2 - $5 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 $s$0 = $fmt;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$s$0 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;
   $s$1 = $s$0;
  }
  L9 : while (1) {
   switch ($24 << 24 >> 24) {
   case 37:
    {
     $s$292 = $s$1;
     $z$093 = $s$1;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $s$2$lcssa = $s$1;
     $z$0$lcssa = $s$1;
     break L9;
     break;
    }
   default:
    {}
   }
   $25 = $s$1 + 1 | 0;
   $24 = HEAP8[$25 >> 0] | 0;
   $s$1 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$s$292 + 1 >> 0] | 0) != 37) {
    $s$2$lcssa = $s$292;
    $z$0$lcssa = $z$093;
    break L12;
   }
   $29 = $z$093 + 1 | 0;
   $30 = $s$292 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 37) {
    $s$292 = $30;
    $z$093 = $29;
    label = 9;
   } else {
    $s$2$lcssa = $30;
    $z$0$lcssa = $29;
    break;
   }
  } while (0);
  $35 = $z$0$lcssa - $s$0 | 0;
  if ($0) if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s$0, $35, $f) | 0;
  if (($z$0$lcssa | 0) != ($s$0 | 0)) {
   $cnt$0 = $cnt$1;
   $l$0 = $35;
   $s$0 = $s$2$lcssa;
   continue;
  }
  $40 = $s$2$lcssa + 1 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  $isdigittmp = ($41 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $45 = (HEAP8[$s$2$lcssa + 2 >> 0] | 0) == 36;
   $$43 = $45 ? $s$2$lcssa + 3 | 0 : $40;
   $48 = HEAP8[$$43 >> 0] | 0;
   $argpos$0 = $45 ? $isdigittmp : -1;
   $l10n$1 = $45 ? 1 : $l10n$0;
   $storemerge = $$43;
  } else {
   $48 = $41;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  L25 : do if (($47 & -32 | 0) == 32) {
   $52 = $47;
   $57 = $48;
   $fl$0100 = 0;
   $storemerge899 = $storemerge;
   while (1) {
    if (!(1 << $52 + -32 & 75913)) {
     $66 = $57;
     $fl$053 = $fl$0100;
     $storemerge851 = $storemerge899;
     break L25;
    }
    $60 = 1 << ($57 << 24 >> 24) + -32 | $fl$0100;
    $61 = $storemerge899 + 1 | 0;
    $62 = HEAP8[$61 >> 0] | 0;
    $63 = $62 << 24 >> 24;
    if (($63 & -32 | 0) == 32) {
     $52 = $63;
     $57 = $62;
     $fl$0100 = $60;
     $storemerge899 = $61;
    } else {
     $66 = $62;
     $fl$053 = $60;
     $storemerge851 = $61;
     break;
    }
   }
  } else {
   $66 = $48;
   $fl$053 = 0;
   $storemerge851 = $storemerge;
  } while (0);
  do if ($66 << 24 >> 24 == 42) {
   $68 = $storemerge851 + 1 | 0;
   $isdigittmp11 = (HEAP8[$68 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge851 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge851 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 24; else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    if ($l10n$1 | 0) {
     $$0 = -1;
     break L1;
    }
    if (!$0) {
     $fl$1 = $fl$053;
     $l10n$3 = 0;
     $s$4 = $68;
     $w$1 = 0;
     break;
    }
    $92 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $93 = HEAP32[$92 >> 2] | 0;
    HEAP32[$ap >> 2] = $92 + 4;
    $l10n$2 = 0;
    $storemerge13 = $68;
    $w$0 = $93;
   }
   if (($w$0 | 0) < 0) {
    $fl$1 = $fl$053 | 8192;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($66 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $101 = $storemerge851;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $99 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $100 = $101 + 1 | 0;
     $isdigittmp$i = (HEAP8[$100 >> 0] | 0) + -48 | 0;
     if ($isdigittmp$i >>> 0 < 10) {
      $101 = $100;
      $i$03$i = $99;
      $isdigittmp4$i = $isdigittmp$i;
     } else {
      $$lcssa = $99;
      $$lcssa295 = $100;
      break;
     }
    }
    if (($$lcssa | 0) < 0) {
     $$0 = -1;
     break L1;
    } else {
     $fl$1 = $fl$053;
     $l10n$3 = $l10n$1;
     $s$4 = $$lcssa295;
     $w$1 = $$lcssa;
    }
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$1;
    $s$4 = $storemerge851;
    $w$1 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[$s$4 >> 0] | 0) == 46) {
   $107 = $s$4 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i22 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i22 >>> 0 < 10) {
     $140 = $107;
     $i$03$i25 = 0;
     $isdigittmp4$i24 = $isdigittmp1$i22;
    } else {
     $p$0 = 0;
     $s$6 = $107;
     break;
    }
    while (1) {
     $138 = ($i$03$i25 * 10 | 0) + $isdigittmp4$i24 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp$i26 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp$i26 >>> 0 < 10) {
      $140 = $139;
      $i$03$i25 = $138;
      $isdigittmp4$i24 = $isdigittmp$i26;
     } else {
      $p$0 = $138;
      $s$6 = $139;
      break L46;
     }
    }
   }
   $110 = $s$4 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$s$4 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $s$6 = $s$4 + 4 | 0;
    break;
   }
   if ($l10n$3 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($0) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $p$0 = $135;
    $s$6 = $110;
   } else {
    $p$0 = 0;
    $s$6 = $110;
   }
  } else {
   $p$0 = -1;
   $s$6 = $s$4;
  } while (0);
  $s$7 = $s$6;
  $st$0 = 0;
  while (1) {
   $145 = (HEAP8[$s$7 >> 0] | 0) + -65 | 0;
   if ($145 >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $147 = $s$7 + 1 | 0;
   $149 = HEAP8[5047 + ($st$0 * 58 | 0) + $145 >> 0] | 0;
   $150 = $149 & 255;
   if (($150 + -1 | 0) >>> 0 < 8) {
    $s$7 = $147;
    $st$0 = $150;
   } else {
    $$lcssa300 = $147;
    $$lcssa301 = $149;
    $$lcssa302 = $150;
    $s$7$lcssa298 = $s$7;
    $st$0$lcssa299 = $st$0;
    break;
   }
  }
  if (!($$lcssa301 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $155 = ($argpos$0 | 0) > -1;
  do if ($$lcssa301 << 24 >> 24 == 19) if ($155) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($155) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa302;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $163 = HEAP32[$158 + 4 >> 2] | 0;
    $164 = $arg;
    HEAP32[$164 >> 2] = HEAP32[$158 >> 2];
    HEAP32[$164 + 4 >> 2] = $163;
    label = 52;
    break;
   }
   if (!$0) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($arg, $$lcssa302, $ap);
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $l$0 = $35;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue;
   }
  }
  $169 = HEAP8[$s$7$lcssa298 >> 0] | 0;
  $t$0 = ($st$0$lcssa299 | 0) != 0 & ($169 & 15 | 0) == 3 ? $169 & -33 : $169;
  $176 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $176;
  L75 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa299 | 0) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 2:
     {
      $188 = HEAP32[$arg >> 2] | 0;
      HEAP32[$188 >> 2] = $cnt$1;
      HEAP32[$188 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 7:
     {
      $200 = HEAP32[$arg >> 2] | 0;
      HEAP32[$200 >> 2] = $cnt$1;
      HEAP32[$200 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    default:
     {
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 64;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 64;
    break;
   }
  case 111:
   {
    $244 = $arg;
    $246 = HEAP32[$244 >> 2] | 0;
    $249 = HEAP32[$244 + 4 >> 2] | 0;
    if (($246 | 0) == 0 & ($249 | 0) == 0) $$0$lcssa$i = $1; else {
     $$03$i33 = $1;
     $254 = $246;
     $258 = $249;
     while (1) {
      $257 = $$03$i33 + -1 | 0;
      HEAP8[$257 >> 0] = $254 & 7 | 48;
      $259 = _bitshift64Lshr($254 | 0, $258 | 0, 3) | 0;
      $260 = tempRet0;
      if (($259 | 0) == 0 & ($260 | 0) == 0) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;
       $254 = $259;
       $258 = $260;
      }
     }
    }
    if (!($fl$1$ & 8)) {
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = 0;
     $prefix$1 = 5511;
     label = 77;
    } else {
     $267 = $2 - $$0$lcssa$i | 0;
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = ($p$0 | 0) > ($267 | 0) ? $p$0 : $267 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 5511;
     label = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    $270 = $arg;
    $272 = HEAP32[$270 >> 2] | 0;
    $275 = HEAP32[$270 + 4 >> 2] | 0;
    if (($275 | 0) < 0) {
     $277 = _i64Subtract(0, 0, $272 | 0, $275 | 0) | 0;
     $278 = tempRet0;
     $279 = $arg;
     HEAP32[$279 >> 2] = $277;
     HEAP32[$279 + 4 >> 2] = $278;
     $287 = $277;
     $288 = $278;
     $pl$0 = 1;
     $prefix$0 = 5511;
     label = 76;
     break L75;
    }
    if (!($fl$1$ & 2048)) {
     $285 = $fl$1$ & 1;
     $287 = $272;
     $288 = $275;
     $pl$0 = $285;
     $prefix$0 = ($285 | 0) == 0 ? 5511 : 5513;
     label = 76;
    } else {
     $287 = $272;
     $288 = $275;
     $pl$0 = 1;
     $prefix$0 = 5512;
     label = 76;
    }
    break;
   }
  case 117:
   {
    $177 = $arg;
    $287 = HEAP32[$177 >> 2] | 0;
    $288 = HEAP32[$177 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = 5511;
    label = 76;
    break;
   }
  case 99:
   {
    HEAP8[$3 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $3;
    $fl$6 = $176;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 5511;
    $z$2 = $1;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 82;
    break;
   }
  case 115:
   {
    $318 = HEAP32[$arg >> 2] | 0;
    $a$1 = $318 | 0 ? $318 : 5537;
    label = 82;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$4 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $798 = $wc;
    $p$4176 = -1;
    label = 86;
    break;
   }
  case 83:
   {
    $$pre171 = HEAP32[$arg >> 2] | 0;
    if (!$p$0) {
     _pad($f, 32, $w$1, 0, $fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;
     $p$4176 = $p$0;
     label = 86;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $358 = +HEAPF64[$arg >> 3];
    HEAP32[$e2$i >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $358;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
     $$07$i = -$358;
     $pl$0$i = 1;
     $prefix$0$i = 5544;
    } else if (!($fl$1$ & 2048)) {
     $365 = $fl$1$ & 1;
     $$07$i = $358;
     $pl$0$i = $365;
     $prefix$0$i = ($365 | 0) == 0 ? 5545 : 5550;
    } else {
     $$07$i = $358;
     $pl$0$i = 1;
     $prefix$0$i = 5547;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $369 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($369 >>> 0 < 2146435072 | ($369 | 0) == 2146435072 & 0 < 0) {
     $391 = +_frexpl($$07$i, $e2$i) * 2.0;
     $392 = $391 != 0.0;
     if ($392) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $395 = $t$0 | 32;
     if (($395 | 0) == 97) {
      $397 = $t$0 & 32;
      $prefix$0$$i = ($397 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $400 = $pl$0$i | 2;
      $402 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($402 | 0) == 0) $$1$i = $391; else {
       $re$171$i = $402;
       $round$070$i = 8.0;
       while (1) {
        $405 = $re$171$i + -1 | 0;
        $406 = $round$070$i * 16.0;
        if (!$405) {
         $$lcssa319 = $406;
         break;
        } else {
         $re$171$i = $405;
         $round$070$i = $406;
        }
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa319 + (-$391 - $$lcssa319));
        break;
       } else {
        $$1$i = $391 + $$lcssa319 - $$lcssa319;
        break;
       }
      } while (0);
      $416 = HEAP32[$e2$i >> 2] | 0;
      $419 = ($416 | 0) < 0 ? 0 - $416 | 0 : $416;
      $422 = _fmt_u($419, (($419 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($422 | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $422;
      HEAP8[$estr$0$i + -1 >> 0] = ($416 >> 31 & 2) + 43;
      $431 = $estr$0$i + -2 | 0;
      HEAP8[$431 >> 0] = $t$0 + 15;
      $notrhs$i = ($p$0 | 0) < 1;
      $433 = ($fl$1$ & 8 | 0) == 0;
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $434 = ~~$$2$i;
       $440 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[5521 + $434 >> 0] | $397;
       $443 = ($$2$i - +($434 | 0)) * 16.0;
       do if (($440 - $5 | 0) == 1) {
        if ($433 & ($notrhs$i & $443 == 0.0)) {
         $s$1$i = $440;
         break;
        }
        HEAP8[$440 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $440; while (0);
       if ($443 != 0.0) {
        $$2$i = $443;
        $s$0$i = $s$1$i;
       } else {
        $s$1$i$lcssa = $s$1$i;
        break;
       }
      }
      $$pre188$i = $s$1$i$lcssa;
      $452 = $431;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre188$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $452 | 0 : $10 - $452 + $$pre188$i | 0;
      $457 = $l$0$i + $400 | 0;
      _pad($f, 32, $w$1, $457, $fl$1$);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$$i, $400, $f) | 0;
      _pad($f, 48, $w$1, $457, $fl$1$ ^ 65536);
      $462 = $$pre188$i - $5 | 0;
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($buf$i, $462, $f) | 0;
      $466 = $9 - $452 | 0;
      _pad($f, 48, $l$0$i - ($462 + $466) | 0, 0, 0);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($431, $466, $f) | 0;
      _pad($f, 32, $w$1, $457, $fl$1$ ^ 8192);
      $$0$i = ($457 | 0) < ($w$1 | 0) ? $w$1 : $457;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($392) {
      $476 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $476;
      $$3$i = $391 * 268435456.0;
      $477 = $476;
     } else {
      $$3$i = $391;
      $477 = HEAP32[$e2$i >> 2] | 0;
     }
     $$33$i = ($477 | 0) < 0 ? $big$i : $13;
     $479 = $$33$i;
     $$4$i = $$3$i;
     $z$0$i = $$33$i;
     while (1) {
      $480 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $480;
      $481 = $z$0$i + 4 | 0;
      $484 = ($$4$i - +($480 >>> 0)) * 1.0e9;
      if ($484 != 0.0) {
       $$4$i = $484;
       $z$0$i = $481;
      } else {
       $$lcssa303 = $481;
       break;
      }
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $487 = $$pr$i;
      $a$1149$i = $$33$i;
      $z$1148$i = $$lcssa303;
      while (1) {
       $489 = ($487 | 0) > 29 ? 29 : $487;
       $d$0141$i = $z$1148$i + -4 | 0;
       do if ($d$0141$i >>> 0 < $a$1149$i >>> 0) $a$2$ph$i = $a$1149$i; else {
        $carry$0142$i = 0;
        $d$0143$i = $d$0141$i;
        while (1) {
         $492 = _bitshift64Shl(HEAP32[$d$0143$i >> 2] | 0, 0, $489 | 0) | 0;
         $494 = _i64Add($492 | 0, tempRet0 | 0, $carry$0142$i | 0, 0) | 0;
         $495 = tempRet0;
         $496 = ___uremdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         HEAP32[$d$0143$i >> 2] = $496;
         $498 = ___udivdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         $d$0$i = $d$0143$i + -4 | 0;
         if ($d$0$i >>> 0 < $a$1149$i >>> 0) {
          $$lcssa304 = $498;
          break;
         } else {
          $carry$0142$i = $498;
          $d$0143$i = $d$0$i;
         }
        }
        if (!$$lcssa304) {
         $a$2$ph$i = $a$1149$i;
         break;
        }
        $502 = $a$1149$i + -4 | 0;
        HEAP32[$502 >> 2] = $$lcssa304;
        $a$2$ph$i = $502;
       } while (0);
       $z$2$i = $z$1148$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $504 = $z$2$i + -4 | 0;
        if (!(HEAP32[$504 >> 2] | 0)) $z$2$i = $504; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $508 = (HEAP32[$e2$i >> 2] | 0) - $489 | 0;
       HEAP32[$e2$i >> 2] = $508;
       if (($508 | 0) > 0) {
        $487 = $508;
        $a$1149$i = $a$2$ph$i;
        $z$1148$i = $z$2$i$lcssa;
       } else {
        $$pr50$i = $508;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr50$i = $$pr$i;
      $a$1$lcssa$i = $$33$i;
      $z$1$lcssa$i = $$lcssa303;
     }
     if (($$pr50$i | 0) < 0) {
      $513 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      $514 = ($395 | 0) == 102;
      $516 = $$pr50$i;
      $a$3136$i = $a$1$lcssa$i;
      $z$3135$i = $z$1$lcssa$i;
      while (1) {
       $515 = 0 - $516 | 0;
       $518 = ($515 | 0) > 9 ? 9 : $515;
       do if ($a$3136$i >>> 0 < $z$3135$i >>> 0) {
        $524 = (1 << $518) + -1 | 0;
        $525 = 1e9 >>> $518;
        $carry3$0130$i = 0;
        $d$1129$i = $a$3136$i;
        while (1) {
         $526 = HEAP32[$d$1129$i >> 2] | 0;
         HEAP32[$d$1129$i >> 2] = ($526 >>> $518) + $carry3$0130$i;
         $530 = Math_imul($526 & $524, $525) | 0;
         $531 = $d$1129$i + 4 | 0;
         if ($531 >>> 0 < $z$3135$i >>> 0) {
          $carry3$0130$i = $530;
          $d$1129$i = $531;
         } else {
          $$lcssa306 = $530;
          break;
         }
        }
        $$a$3$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        if (!$$lcssa306) {
         $$a$3192$i = $$a$3$i;
         $z$4$i = $z$3135$i;
         break;
        }
        HEAP32[$z$3135$i >> 2] = $$lcssa306;
        $$a$3192$i = $$a$3$i;
        $z$4$i = $z$3135$i + 4 | 0;
       } else {
        $$a$3192$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        $z$4$i = $z$3135$i;
       } while (0);
       $538 = $514 ? $$33$i : $$a$3192$i;
       $$z$4$i = ($z$4$i - $538 >> 2 | 0) > ($513 | 0) ? $538 + ($513 << 2) | 0 : $z$4$i;
       $546 = (HEAP32[$e2$i >> 2] | 0) + $518 | 0;
       HEAP32[$e2$i >> 2] = $546;
       if (($546 | 0) < 0) {
        $516 = $546;
        $a$3136$i = $$a$3192$i;
        $z$3135$i = $$z$4$i;
       } else {
        $a$3$lcssa$i = $$a$3192$i;
        $z$3$lcssa$i = $$z$4$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     }
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $552 = ($479 - $a$3$lcssa$i >> 2) * 9 | 0;
      $553 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($553 >>> 0 < 10) {
       $e$1$i = $552;
       break;
      } else {
       $e$0125$i = $552;
       $i$0124$i = 10;
      }
      while (1) {
       $555 = $i$0124$i * 10 | 0;
       $556 = $e$0125$i + 1 | 0;
       if ($553 >>> 0 < $555 >>> 0) {
        $e$1$i = $556;
        break;
       } else {
        $e$0125$i = $556;
        $i$0124$i = $555;
       }
      }
     } else $e$1$i = 0; while (0);
     $561 = ($395 | 0) == 103;
     $562 = ($$p$i | 0) != 0;
     $564 = $$p$i - (($395 | 0) != 102 ? $e$1$i : 0) + (($562 & $561) << 31 >> 31) | 0;
     if (($564 | 0) < ((($z$3$lcssa$i - $479 >> 2) * 9 | 0) + -9 | 0)) {
      $572 = $564 + 9216 | 0;
      $575 = $$33$i + 4 + ((($572 | 0) / 9 | 0) + -1024 << 2) | 0;
      $j$0117$i = (($572 | 0) % 9 | 0) + 1 | 0;
      if (($j$0117$i | 0) < 9) {
       $i$1118$i = 10;
       $j$0119$i = $j$0117$i;
       while (1) {
        $578 = $i$1118$i * 10 | 0;
        $j$0$i = $j$0119$i + 1 | 0;
        if (($j$0$i | 0) == 9) {
         $i$1$lcssa$i = $578;
         break;
        } else {
         $i$1118$i = $578;
         $j$0119$i = $j$0$i;
        }
       }
      } else $i$1$lcssa$i = 10;
      $579 = HEAP32[$575 >> 2] | 0;
      $580 = ($579 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      $583 = ($575 + 4 | 0) == ($z$3$lcssa$i | 0);
      do if ($583 & ($580 | 0) == 0) {
       $a$8$i = $a$3$lcssa$i;
       $d$4$i = $575;
       $e$4$i = $e$1$i;
      } else {
       $$20$i = ((($579 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $587 = ($i$1$lcssa$i | 0) / 2 | 0;
       if ($580 >>> 0 < $587 >>> 0) $small$0$i = .5; else $small$0$i = $583 & ($580 | 0) == ($587 | 0) ? 1.0 : 1.5;
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $595 = $579 - $580 | 0;
       HEAP32[$575 >> 2] = $595;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$8$i = $a$3$lcssa$i;
        $d$4$i = $575;
        $e$4$i = $e$1$i;
        break;
       }
       $598 = $595 + $i$1$lcssa$i | 0;
       HEAP32[$575 >> 2] = $598;
       if ($598 >>> 0 > 999999999) {
        $a$5111$i = $a$3$lcssa$i;
        $d$2110$i = $575;
        while (1) {
         $600 = $d$2110$i + -4 | 0;
         HEAP32[$d$2110$i >> 2] = 0;
         if ($600 >>> 0 < $a$5111$i >>> 0) {
          $602 = $a$5111$i + -4 | 0;
          HEAP32[$602 >> 2] = 0;
          $a$6$i = $602;
         } else $a$6$i = $a$5111$i;
         $604 = (HEAP32[$600 >> 2] | 0) + 1 | 0;
         HEAP32[$600 >> 2] = $604;
         if ($604 >>> 0 > 999999999) {
          $a$5111$i = $a$6$i;
          $d$2110$i = $600;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $600;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $575;
       }
       $609 = ($479 - $a$5$lcssa$i >> 2) * 9 | 0;
       $610 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($610 >>> 0 < 10) {
        $a$8$i = $a$5$lcssa$i;
        $d$4$i = $d$2$lcssa$i;
        $e$4$i = $609;
        break;
       } else {
        $e$2106$i = $609;
        $i$2105$i = 10;
       }
       while (1) {
        $612 = $i$2105$i * 10 | 0;
        $613 = $e$2106$i + 1 | 0;
        if ($610 >>> 0 < $612 >>> 0) {
         $a$8$i = $a$5$lcssa$i;
         $d$4$i = $d$2$lcssa$i;
         $e$4$i = $613;
         break;
        } else {
         $e$2106$i = $613;
         $i$2105$i = $612;
        }
       }
      } while (0);
      $615 = $d$4$i + 4 | 0;
      $a$9$ph$i = $a$8$i;
      $e$5$ph$i = $e$4$i;
      $z$7$ph$i = $z$3$lcssa$i >>> 0 > $615 >>> 0 ? $615 : $z$3$lcssa$i;
     } else {
      $a$9$ph$i = $a$3$lcssa$i;
      $e$5$ph$i = $e$1$i;
      $z$7$ph$i = $z$3$lcssa$i;
     }
     $617 = 0 - $e$5$ph$i | 0;
     $z$7$i = $z$7$ph$i;
     while (1) {
      if ($z$7$i >>> 0 <= $a$9$ph$i >>> 0) {
       $$lcssa162$i = 0;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
      $619 = $z$7$i + -4 | 0;
      if (!(HEAP32[$619 >> 2] | 0)) $z$7$i = $619; else {
       $$lcssa162$i = 1;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
     }
     do if ($561) {
      $$p$$i = ($562 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$5$ph$i | 0) & ($e$5$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$5$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $630 = $fl$1$ & 8;
      if ($630 | 0) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi190$iZ2D = $630;
       break;
      }
      do if ($$lcssa162$i) {
       $633 = HEAP32[$z$7$i$lcssa + -4 >> 2] | 0;
       if (!$633) {
        $j$2$i = 9;
        break;
       }
       if (!(($633 >>> 0) % 10 | 0)) {
        $i$3101$i = 10;
        $j$1102$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $637 = $i$3101$i * 10 | 0;
        $638 = $j$1102$i + 1 | 0;
        if (!(($633 >>> 0) % ($637 >>> 0) | 0)) {
         $i$3101$i = $637;
         $j$1102$i = $638;
        } else {
         $j$2$i = $638;
         break;
        }
       }
      } else $j$2$i = 9; while (0);
      $647 = (($z$7$i$lcssa - $479 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $648 = $647 - $j$2$i | 0;
       $$23$i = ($648 | 0) < 0 ? 0 : $648;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi190$iZ2D = 0;
       break;
      } else {
       $652 = $647 + $e$5$ph$i - $j$2$i | 0;
       $$25$i = ($652 | 0) < 0 ? 0 : $652;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
       $$pre$phi190$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi190$iZ2D = $fl$1$ & 8;
     } while (0);
     $655 = $$311$i | $$pre$phi190$iZ2D;
     $657 = ($655 | 0) != 0 & 1;
     $659 = ($$114$i | 32 | 0) == 102;
     if ($659) {
      $$pn$i = ($e$5$ph$i | 0) > 0 ? $e$5$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $663 = ($e$5$ph$i | 0) < 0 ? $617 : $e$5$ph$i;
      $666 = _fmt_u($663, (($663 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($9 - $666 | 0) < 2) {
       $estr$195$i = $666;
       while (1) {
        $670 = $estr$195$i + -1 | 0;
        HEAP8[$670 >> 0] = 48;
        if (($9 - $670 | 0) < 2) $estr$195$i = $670; else {
         $estr$1$lcssa$i = $670;
         break;
        }
       }
      } else $estr$1$lcssa$i = $666;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$5$ph$i >> 31 & 2) + 43;
      $680 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$680 >> 0] = $$114$i;
      $$pn$i = $9 - $680 | 0;
      $estr$2$i = $680;
     }
     $685 = $pl$0$i + 1 + $$311$i + $657 + $$pn$i | 0;
     _pad($f, 32, $w$1, $685, $fl$1$);
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     _pad($f, 48, $w$1, $685, $fl$1$ ^ 65536);
     do if ($659) {
      $r$0$a$9$i = $a$9$ph$i >>> 0 > $$33$i >>> 0 ? $$33$i : $a$9$ph$i;
      $d$584$i = $r$0$a$9$i;
      while (1) {
       $692 = _fmt_u(HEAP32[$d$584$i >> 2] | 0, 0, $14) | 0;
       do if (($d$584$i | 0) == ($r$0$a$9$i | 0)) {
        if (($692 | 0) != ($14 | 0)) {
         $s7$1$i = $692;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($692 >>> 0 <= $buf$i >>> 0) {
         $s7$1$i = $692;
         break;
        }
        _memset($buf$i | 0, 48, $692 - $5 | 0) | 0;
        $s7$081$i = $692;
        while (1) {
         $697 = $s7$081$i + -1 | 0;
         if ($697 >>> 0 > $buf$i >>> 0) $s7$081$i = $697; else {
          $s7$1$i = $697;
          break;
         }
        }
       } while (0);
       if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $705 = $d$584$i + 4 | 0;
       if ($705 >>> 0 > $$33$i >>> 0) {
        $$lcssa316 = $705;
        break;
       } else $d$584$i = $705;
      }
      do if ($655 | 0) {
       if (HEAP32[$f >> 2] & 32 | 0) break;
       ___fwritex(5579, 1, $f) | 0;
      } while (0);
      if (($$311$i | 0) > 0 & $$lcssa316 >>> 0 < $z$7$i$lcssa >>> 0) {
       $$41278$i = $$311$i;
       $d$677$i = $$lcssa316;
       while (1) {
        $715 = _fmt_u(HEAP32[$d$677$i >> 2] | 0, 0, $14) | 0;
        if ($715 >>> 0 > $buf$i >>> 0) {
         _memset($buf$i | 0, 48, $715 - $5 | 0) | 0;
         $s8$072$i = $715;
         while (1) {
          $719 = $s8$072$i + -1 | 0;
          if ($719 >>> 0 > $buf$i >>> 0) $s8$072$i = $719; else {
           $s8$0$lcssa$i = $719;
           break;
          }
         }
        } else $s8$0$lcssa$i = $715;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s8$0$lcssa$i, ($$41278$i | 0) > 9 ? 9 : $$41278$i, $f) | 0;
        $726 = $d$677$i + 4 | 0;
        $727 = $$41278$i + -9 | 0;
        if (($$41278$i | 0) > 9 & $726 >>> 0 < $z$7$i$lcssa >>> 0) {
         $$41278$i = $727;
         $d$677$i = $726;
        } else {
         $$412$lcssa$i = $727;
         break;
        }
       }
      } else $$412$lcssa$i = $$311$i;
      _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0);
     } else {
      $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $a$9$ph$i + 4 | 0;
      if (($$311$i | 0) > -1) {
       $734 = ($$pre$phi190$iZ2D | 0) == 0;
       $$589$i = $$311$i;
       $d$788$i = $a$9$ph$i;
       while (1) {
        $736 = _fmt_u(HEAP32[$d$788$i >> 2] | 0, 0, $14) | 0;
        if (($736 | 0) == ($14 | 0)) {
         HEAP8[$16 >> 0] = 48;
         $s9$0$i = $16;
        } else $s9$0$i = $736;
        do if (($d$788$i | 0) == ($a$9$ph$i | 0)) {
         $742 = $s9$0$i + 1 | 0;
         if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$0$i, 1, $f) | 0;
         if ($734 & ($$589$i | 0) < 1) {
          $s9$2$i = $742;
          break;
         }
         if (HEAP32[$f >> 2] & 32 | 0) {
          $s9$2$i = $742;
          break;
         }
         ___fwritex(5579, 1, $f) | 0;
         $s9$2$i = $742;
        } else {
         if ($s9$0$i >>> 0 <= $buf$i >>> 0) {
          $s9$2$i = $s9$0$i;
          break;
         }
         _memset($buf$i | 0, 48, $s9$0$i + $6 | 0) | 0;
         $s9$185$i = $s9$0$i;
         while (1) {
          $740 = $s9$185$i + -1 | 0;
          if ($740 >>> 0 > $buf$i >>> 0) $s9$185$i = $740; else {
           $s9$2$i = $740;
           break;
          }
         }
        } while (0);
        $751 = $15 - $s9$2$i | 0;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$2$i, ($$589$i | 0) > ($751 | 0) ? $751 : $$589$i, $f) | 0;
        $757 = $$589$i - $751 | 0;
        $758 = $d$788$i + 4 | 0;
        if ($758 >>> 0 < $z$7$$i >>> 0 & ($757 | 0) > -1) {
         $$589$i = $757;
         $d$788$i = $758;
        } else {
         $$5$lcssa$i = $757;
         break;
        }
       }
      } else $$5$lcssa$i = $$311$i;
      _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0);
      if (HEAP32[$f >> 2] & 32 | 0) break;
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     } while (0);
     _pad($f, 32, $w$1, $685, $fl$1$ ^ 8192);
     $$0$i = ($685 | 0) < ($w$1 | 0) ? $w$1 : $685;
    } else {
     $376 = ($t$0 & 32 | 0) != 0;
     $378 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $378 ? 0 : $pl$0$i;
     $380 = $pl$1$i + 3 | 0;
     _pad($f, 32, $w$1, $380, $176);
     $381 = HEAP32[$f >> 2] | 0;
     if (!($381 & 32)) {
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      $385 = HEAP32[$f >> 2] | 0;
     } else $385 = $381;
     if (!($385 & 32)) ___fwritex($378 ? ($376 ? 5571 : 5575) : $376 ? 5563 : 5567, 3, $f) | 0;
     _pad($f, 32, $w$1, $380, $fl$1$ ^ 8192);
     $$0$i = ($380 | 0) < ($w$1 | 0) ? $w$1 : $380;
    } while (0);
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $s$0;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 5511;
    $z$2 = $1;
   }
  } while (0);
  L311 : do if ((label | 0) == 64) {
   label = 0;
   $207 = $arg;
   $209 = HEAP32[$207 >> 2] | 0;
   $212 = HEAP32[$207 + 4 >> 2] | 0;
   $213 = $t$1 & 32;
   if (($209 | 0) == 0 & ($212 | 0) == 0) {
    $a$0 = $1;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 5511;
    label = 77;
   } else {
    $$012$i = $1;
    $218 = $209;
    $225 = $212;
    while (1) {
     $224 = $$012$i + -1 | 0;
     HEAP8[$224 >> 0] = HEAPU8[5521 + ($218 & 15) >> 0] | $213;
     $226 = _bitshift64Lshr($218 | 0, $225 | 0, 4) | 0;
     $227 = tempRet0;
     if (($226 | 0) == 0 & ($227 | 0) == 0) {
      $$lcssa321 = $224;
      break;
     } else {
      $$012$i = $224;
      $218 = $226;
      $225 = $227;
     }
    }
    $231 = $arg;
    if (($fl$3 & 8 | 0) == 0 | (HEAP32[$231 >> 2] | 0) == 0 & (HEAP32[$231 + 4 >> 2] | 0) == 0) {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 5511;
     label = 77;
    } else {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 5511 + ($t$1 >> 4) | 0;
     label = 77;
    }
   }
  } else if ((label | 0) == 76) {
   label = 0;
   $a$0 = _fmt_u($287, $288, $1) | 0;
   $fl$4 = $fl$1$;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 77;
  } else if ((label | 0) == 82) {
   label = 0;
   $321 = _memchr($a$1, 0, $p$0) | 0;
   $322 = ($321 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $176;
   $p$5 = $322 ? $p$0 : $321 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 5511;
   $z$2 = $322 ? $a$1 + $p$0 | 0 : $321;
  } else if ((label | 0) == 86) {
   label = 0;
   $i$0105 = 0;
   $l$1104 = 0;
   $ws$0106 = $798;
   while (1) {
    $334 = HEAP32[$ws$0106 >> 2] | 0;
    if (!$334) {
     $i$0$lcssa = $i$0105;
     $l$2 = $l$1104;
     break;
    }
    $336 = _wctomb($mb, $334) | 0;
    if (($336 | 0) < 0 | $336 >>> 0 > ($p$4176 - $i$0105 | 0) >>> 0) {
     $i$0$lcssa = $i$0105;
     $l$2 = $336;
     break;
    }
    $341 = $336 + $i$0105 | 0;
    if ($p$4176 >>> 0 > $341 >>> 0) {
     $i$0105 = $341;
     $l$1104 = $336;
     $ws$0106 = $ws$0106 + 4 | 0;
    } else {
     $i$0$lcssa = $341;
     $l$2 = $336;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
   if (!$i$0$lcssa) {
    $i$0$lcssa178 = 0;
    label = 97;
   } else {
    $i$1116 = 0;
    $ws$1117 = $798;
    while (1) {
     $345 = HEAP32[$ws$1117 >> 2] | 0;
     if (!$345) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     $348 = _wctomb($mb, $345) | 0;
     $349 = $348 + $i$1116 | 0;
     if (($349 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($mb, $348, $f) | 0;
     if ($349 >>> 0 < $i$0$lcssa >>> 0) {
      $i$1116 = $349;
      $ws$1117 = $ws$1117 + 4 | 0;
     } else {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break;
     }
    }
   }
  } while (0);
  if ((label | 0) == 97) {
   label = 0;
   _pad($f, 32, $w$1, $i$0$lcssa178, $fl$1$ ^ 8192);
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa178 | 0) ? $w$1 : $i$0$lcssa178;
   $l10n$0 = $l10n$3;
   $s$0 = $$lcssa300;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $292 = $arg;
   $300 = (HEAP32[$292 >> 2] | 0) != 0 | (HEAP32[$292 + 4 >> 2] | 0) != 0;
   if (($p$2 | 0) != 0 | $300) {
    $306 = ($300 & 1 ^ 1) + ($2 - $a$0) | 0;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($306 | 0) ? $p$2 : $306;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $772 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($772 | 0) ? $772 : $p$5;
  $774 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($774 | 0) ? $774 : $w$1;
  _pad($f, 32, $w$2, $774, $fl$6);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$2, $pl$2, $f) | 0;
  _pad($f, 48, $w$2, $774, $fl$6 ^ 65536);
  _pad($f, 48, $$p$5, $772, 0);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($a$2, $772, $f) | 0;
  _pad($f, 32, $w$2, $774, $fl$6 ^ 8192);
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
  $s$0 = $$lcssa300;
 }
 L345 : do if ((label | 0) == 244) if (!$f) if (!$l10n$0$lcssa) $$0 = 0; else {
  $i$291 = 1;
  while (1) {
   $787 = HEAP32[$nl_type + ($i$291 << 2) >> 2] | 0;
   if (!$787) {
    $i$291$lcssa = $i$291;
    break;
   }
   _pop_arg($nl_arg + ($i$291 << 3) | 0, $787, $ap);
   $791 = $i$291 + 1 | 0;
   if (($791 | 0) < 10) $i$291 = $791; else {
    $$0 = 1;
    break L345;
   }
  }
  if (($i$291$lcssa | 0) < 10) {
   $i$389 = $i$291$lcssa;
   while (1) {
    $793 = $i$389 + 1 | 0;
    if (HEAP32[$nl_type + ($i$389 << 2) >> 2] | 0) {
     $$0 = -1;
     break L345;
    }
    if (($793 | 0) < 10) $i$389 = $793; else {
     $$0 = 1;
     break;
    }
   }
  } else $$0 = 1;
 } else $$0 = $cnt$1$lcssa; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$4$i = 0, $100 = 0, $1002 = 0, $1008 = 0, $101 = 0, $1011 = 0, $1012 = 0, $1030 = 0, $1032 = 0, $1039 = 0, $1040 = 0, $1041 = 0, $1049 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $133 = 0, $139 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $266 = 0, $271 = 0, $278 = 0, $28 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $298 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $340 = 0, $343 = 0, $349 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $359 = 0, $361 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $382 = 0, $383 = 0, $39 = 0, $392 = 0, $397 = 0, $4 = 0, $401 = 0, $407 = 0, $414 = 0, $418 = 0, $42 = 0, $426 = 0, $429 = 0, $430 = 0, $431 = 0, $435 = 0, $436 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $461 = 0, $467 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $48 = 0, $490 = 0, $492 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $509 = 0, $511 = 0, $512 = 0, $514 = 0, $52 = 0, $523 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0, $54 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $549 = 0, $551 = 0, $552 = 0, $558 = 0, $56 = 0, $560 = 0, $562 = 0, $567 = 0, $569 = 0, $571 = 0, $572 = 0, $573 = 0, $58 = 0, $581 = 0, $582 = 0, $585 = 0, $589 = 0, $593 = 0, $595 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $609 = 0, $618 = 0, $619 = 0, $62 = 0, $625 = 0, $628 = 0, $631 = 0, $633 = 0, $638 = 0, $641 = 0, $644 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $674 = 0, $679 = 0, $68 = 0, $680 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $722 = 0, $723 = 0, $728 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $78 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $82 = 0, $822 = 0, $830 = 0, $836 = 0, $839 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $85 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $89 = 0, $900 = 0, $902 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $918 = 0, $92 = 0, $922 = 0, $926 = 0, $928 = 0, $934 = 0, $935 = 0, $937 = 0, $938 = 0, $94 = 0, $942 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $955 = 0, $956 = 0, $96 = 0, $962 = 0, $967 = 0, $970 = 0, $971 = 0, $972 = 0, $976 = 0, $977 = 0, $983 = 0, $988 = 0, $989 = 0, $992 = 0, $994 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[1444] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3 | 0) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $14 = 5816 + ($12 << 1 << 2) | 0;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[1444] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $32 = $16 + $28 + 4 | 0;
   HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 1;
   $$0 = $17;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $35 = HEAP32[1446] | 0;
  if ($4 >>> 0 > $35 >>> 0) {
   if ($7 | 0) {
    $39 = 2 << $5;
    $42 = $7 << $5 & ($39 | 0 - $39);
    $45 = ($42 & 0 - $42) + -1 | 0;
    $47 = $45 >>> 12 & 16;
    $48 = $45 >>> $47;
    $50 = $48 >>> 5 & 8;
    $52 = $48 >>> $50;
    $54 = $52 >>> 2 & 4;
    $56 = $52 >>> $54;
    $58 = $56 >>> 1 & 2;
    $60 = $56 >>> $58;
    $62 = $60 >>> 1 & 1;
    $65 = ($50 | $47 | $54 | $58 | $62) + ($60 >>> $62) | 0;
    $67 = 5816 + ($65 << 1 << 2) | 0;
    $68 = $67 + 8 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    do if (($67 | 0) == ($71 | 0)) {
     HEAP32[1444] = $6 & ~(1 << $65);
     $89 = $35;
    } else {
     if ($71 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
     $78 = $71 + 12 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$78 >> 2] = $67;
      HEAP32[$68 >> 2] = $71;
      $89 = HEAP32[1446] | 0;
      break;
     } else _abort();
    } while (0);
    $82 = ($65 << 3) - $4 | 0;
    HEAP32[$69 + 4 >> 2] = $4 | 3;
    $85 = $69 + $4 | 0;
    HEAP32[$85 + 4 >> 2] = $82 | 1;
    HEAP32[$85 + $82 >> 2] = $82;
    if ($89 | 0) {
     $91 = HEAP32[1449] | 0;
     $92 = $89 >>> 3;
     $94 = 5816 + ($92 << 1 << 2) | 0;
     $95 = HEAP32[1444] | 0;
     $96 = 1 << $92;
     if (!($95 & $96)) {
      HEAP32[1444] = $95 | $96;
      $$pre$phiZ2D = $94 + 8 | 0;
      $F4$0 = $94;
     } else {
      $100 = $94 + 8 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      if ($101 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $100;
       $F4$0 = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $91;
     HEAP32[$F4$0 + 12 >> 2] = $91;
     HEAP32[$91 + 8 >> 2] = $F4$0;
     HEAP32[$91 + 12 >> 2] = $94;
    }
    HEAP32[1446] = $82;
    HEAP32[1449] = $85;
    $$0 = $70;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $107 = HEAP32[1445] | 0;
   if (!$107) $nb$0 = $4; else {
    $111 = ($107 & 0 - $107) + -1 | 0;
    $113 = $111 >>> 12 & 16;
    $114 = $111 >>> $113;
    $116 = $114 >>> 5 & 8;
    $118 = $114 >>> $116;
    $120 = $118 >>> 2 & 4;
    $122 = $118 >>> $120;
    $124 = $122 >>> 1 & 2;
    $126 = $122 >>> $124;
    $128 = $126 >>> 1 & 1;
    $133 = HEAP32[6080 + (($116 | $113 | $120 | $124 | $128) + ($126 >>> $128) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$133 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $133;
    $v$0$i = $133;
    while (1) {
     $139 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$139) {
      $142 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$142) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $145 = $142;
     } else $145 = $139;
     $148 = (HEAP32[$145 + 4 >> 2] & -8) - $4 | 0;
     $149 = $148 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $149 ? $148 : $rsize$0$i;
     $t$0$i = $145;
     $v$0$i = $149 ? $145 : $v$0$i;
    }
    $150 = HEAP32[1448] | 0;
    if ($v$0$i$lcssa >>> 0 < $150 >>> 0) _abort();
    $152 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $152 >>> 0) _abort();
    $155 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $157 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($157 | 0) == ($v$0$i$lcssa | 0)) {
     $168 = $v$0$i$lcssa + 20 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     if (!$169) {
      $171 = $v$0$i$lcssa + 16 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (!$172) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $172;
       $RP$1$i = $171;
      }
     } else {
      $R$1$i = $169;
      $RP$1$i = $168;
     }
     while (1) {
      $174 = $R$1$i + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if ($175 | 0) {
       $R$1$i = $175;
       $RP$1$i = $174;
       continue;
      }
      $177 = $R$1$i + 16 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (!$178) {
       $R$1$i$lcssa = $R$1$i;
       $RP$1$i$lcssa = $RP$1$i;
       break;
      } else {
       $R$1$i = $178;
       $RP$1$i = $177;
      }
     }
     if ($RP$1$i$lcssa >>> 0 < $150 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$lcssa >> 2] = 0;
      $R$3$i = $R$1$i$lcssa;
      break;
     }
    } else {
     $160 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($160 >>> 0 < $150 >>> 0) _abort();
     $162 = $160 + 12 | 0;
     if ((HEAP32[$162 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $165 = $157 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$162 >> 2] = $157;
      HEAP32[$165 >> 2] = $160;
      $R$3$i = $157;
      break;
     } else _abort();
    } while (0);
    do if ($155 | 0) {
     $183 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $184 = 6080 + ($183 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$184 >> 2] | 0)) {
      HEAP32[$184 >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[1445] = HEAP32[1445] & ~(1 << $183);
       break;
      }
     } else {
      if ($155 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
      $193 = $155 + 16 | 0;
      if ((HEAP32[$193 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$193 >> 2] = $R$3$i; else HEAP32[$155 + 20 >> 2] = $R$3$i;
      if (!$R$3$i) break;
     }
     $198 = HEAP32[1448] | 0;
     if ($R$3$i >>> 0 < $198 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $155;
     $202 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($208 | 0) if ($208 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $215 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $215 | 3;
     $219 = $v$0$i$lcssa + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$152 + 4 >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$152 + $rsize$0$i$lcssa >> 2] = $rsize$0$i$lcssa;
     $227 = HEAP32[1446] | 0;
     if ($227 | 0) {
      $229 = HEAP32[1449] | 0;
      $230 = $227 >>> 3;
      $232 = 5816 + ($230 << 1 << 2) | 0;
      $233 = HEAP32[1444] | 0;
      $234 = 1 << $230;
      if (!($233 & $234)) {
       HEAP32[1444] = $233 | $234;
       $$pre$phi$iZ2D = $232 + 8 | 0;
       $F1$0$i = $232;
      } else {
       $238 = $232 + 8 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if ($239 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $238;
        $F1$0$i = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $229;
      HEAP32[$F1$0$i + 12 >> 2] = $229;
      HEAP32[$229 + 8 >> 2] = $F1$0$i;
      HEAP32[$229 + 12 >> 2] = $232;
     }
     HEAP32[1446] = $rsize$0$i$lcssa;
     HEAP32[1449] = $152;
    }
    $$0 = $v$0$i$lcssa + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $247 = $bytes + 11 | 0;
  $248 = $247 & -8;
  $249 = HEAP32[1445] | 0;
  if (!$249) $nb$0 = $248; else {
   $251 = 0 - $248 | 0;
   $252 = $247 >>> 8;
   if (!$252) $idx$0$i = 0; else if ($248 >>> 0 > 16777215) $idx$0$i = 31; else {
    $257 = ($252 + 1048320 | 0) >>> 16 & 8;
    $258 = $252 << $257;
    $261 = ($258 + 520192 | 0) >>> 16 & 4;
    $263 = $258 << $261;
    $266 = ($263 + 245760 | 0) >>> 16 & 2;
    $271 = 14 - ($261 | $257 | $266) + ($263 << $266 >>> 15) | 0;
    $idx$0$i = $248 >>> ($271 + 7 | 0) & 1 | $271 << 1;
   }
   $278 = HEAP32[6080 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$278) {
    $rsize$3$i = $251;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 86;
   } else {
    $rsize$0$i5 = $251;
    $rst$0$i = 0;
    $sizebits$0$i = $248 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i4 = $278;
    $v$0$i6 = 0;
    while (1) {
     $287 = HEAP32[$t$0$i4 + 4 >> 2] & -8;
     $288 = $287 - $248 | 0;
     if ($288 >>> 0 < $rsize$0$i5 >>> 0) if (($287 | 0) == ($248 | 0)) {
      $rsize$412$i = $288;
      $t$411$i = $t$0$i4;
      $v$413$i = $t$0$i4;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $288;
      $v$1$i = $t$0$i4;
     } else {
      $rsize$1$i = $rsize$0$i5;
      $v$1$i = $v$0$i6;
     }
     $292 = HEAP32[$t$0$i4 + 20 >> 2] | 0;
     $295 = HEAP32[$t$0$i4 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($292 | 0) == 0 | ($292 | 0) == ($295 | 0) ? $rst$0$i : $292;
     $298 = ($295 | 0) == 0;
     if ($298) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i5 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << ($298 & 1 ^ 1);
      $t$0$i4 = $295;
      $v$0$i6 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $303 = 2 << $idx$0$i;
     $306 = $249 & ($303 | 0 - $303);
     if (!$306) {
      $nb$0 = $248;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $t$4$ph$i = HEAP32[6080 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else $t$4$ph$i = $t$2$i;
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i;
    } else {
     $rsize$412$i = $rsize$3$i;
     $t$411$i = $t$4$ph$i;
     $v$413$i = $v$3$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $337 = (HEAP32[$t$411$i + 4 >> 2] & -8) - $248 | 0;
    $338 = $337 >>> 0 < $rsize$412$i >>> 0;
    $$rsize$4$i = $338 ? $337 : $rsize$412$i;
    $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
    $340 = HEAP32[$t$411$i + 16 >> 2] | 0;
    if ($340 | 0) {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $340;
     $v$413$i = $t$4$v$4$i;
     label = 90;
     continue;
    }
    $343 = HEAP32[$t$411$i + 20 >> 2] | 0;
    if (!$343) {
     $rsize$4$lcssa$i = $$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $343;
     $v$413$i = $t$4$v$4$i;
     label = 90;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $248; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[1446] | 0) - $248 | 0) >>> 0) {
    $349 = HEAP32[1448] | 0;
    if ($v$4$lcssa$i >>> 0 < $349 >>> 0) _abort();
    $351 = $v$4$lcssa$i + $248 | 0;
    if ($v$4$lcssa$i >>> 0 >= $351 >>> 0) _abort();
    $354 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $356 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($356 | 0) == ($v$4$lcssa$i | 0)) {
     $367 = $v$4$lcssa$i + 20 | 0;
     $368 = HEAP32[$367 >> 2] | 0;
     if (!$368) {
      $370 = $v$4$lcssa$i + 16 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $R$3$i11 = 0;
       break;
      } else {
       $R$1$i9 = $371;
       $RP$1$i8 = $370;
      }
     } else {
      $R$1$i9 = $368;
      $RP$1$i8 = $367;
     }
     while (1) {
      $373 = $R$1$i9 + 20 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if ($374 | 0) {
       $R$1$i9 = $374;
       $RP$1$i8 = $373;
       continue;
      }
      $376 = $R$1$i9 + 16 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (!$377) {
       $R$1$i9$lcssa = $R$1$i9;
       $RP$1$i8$lcssa = $RP$1$i8;
       break;
      } else {
       $R$1$i9 = $377;
       $RP$1$i8 = $376;
      }
     }
     if ($RP$1$i8$lcssa >>> 0 < $349 >>> 0) _abort(); else {
      HEAP32[$RP$1$i8$lcssa >> 2] = 0;
      $R$3$i11 = $R$1$i9$lcssa;
      break;
     }
    } else {
     $359 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($359 >>> 0 < $349 >>> 0) _abort();
     $361 = $359 + 12 | 0;
     if ((HEAP32[$361 >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $364 = $356 + 8 | 0;
     if ((HEAP32[$364 >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$361 >> 2] = $356;
      HEAP32[$364 >> 2] = $359;
      $R$3$i11 = $356;
      break;
     } else _abort();
    } while (0);
    do if ($354 | 0) {
     $382 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $383 = 6080 + ($382 << 2) | 0;
     if (($v$4$lcssa$i | 0) == (HEAP32[$383 >> 2] | 0)) {
      HEAP32[$383 >> 2] = $R$3$i11;
      if (!$R$3$i11) {
       HEAP32[1445] = HEAP32[1445] & ~(1 << $382);
       break;
      }
     } else {
      if ($354 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
      $392 = $354 + 16 | 0;
      if ((HEAP32[$392 >> 2] | 0) == ($v$4$lcssa$i | 0)) HEAP32[$392 >> 2] = $R$3$i11; else HEAP32[$354 + 20 >> 2] = $R$3$i11;
      if (!$R$3$i11) break;
     }
     $397 = HEAP32[1448] | 0;
     if ($R$3$i11 >>> 0 < $397 >>> 0) _abort();
     HEAP32[$R$3$i11 + 24 >> 2] = $354;
     $401 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($401 | 0) if ($401 >>> 0 < $397 >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 16 >> 2] = $401;
      HEAP32[$401 + 24 >> 2] = $R$3$i11;
      break;
     } while (0);
     $407 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($407 | 0) if ($407 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 20 >> 2] = $407;
      HEAP32[$407 + 24 >> 2] = $R$3$i11;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $414 = $rsize$4$lcssa$i + $248 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $414 | 3;
     $418 = $v$4$lcssa$i + $414 + 4 | 0;
     HEAP32[$418 >> 2] = HEAP32[$418 >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $248 | 3;
     HEAP32[$351 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$351 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $426 = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $429 = 5816 + ($426 << 1 << 2) | 0;
      $430 = HEAP32[1444] | 0;
      $431 = 1 << $426;
      if (!($430 & $431)) {
       HEAP32[1444] = $430 | $431;
       $$pre$phi$i14Z2D = $429 + 8 | 0;
       $F5$0$i = $429;
      } else {
       $435 = $429 + 8 | 0;
       $436 = HEAP32[$435 >> 2] | 0;
       if ($436 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
        $$pre$phi$i14Z2D = $435;
        $F5$0$i = $436;
       }
      }
      HEAP32[$$pre$phi$i14Z2D >> 2] = $351;
      HEAP32[$F5$0$i + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $F5$0$i;
      HEAP32[$351 + 12 >> 2] = $429;
      break;
     }
     $442 = $rsize$4$lcssa$i >>> 8;
     if (!$442) $I7$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $447 = ($442 + 1048320 | 0) >>> 16 & 8;
      $448 = $442 << $447;
      $451 = ($448 + 520192 | 0) >>> 16 & 4;
      $453 = $448 << $451;
      $456 = ($453 + 245760 | 0) >>> 16 & 2;
      $461 = 14 - ($451 | $447 | $456) + ($453 << $456 >>> 15) | 0;
      $I7$0$i = $rsize$4$lcssa$i >>> ($461 + 7 | 0) & 1 | $461 << 1;
     }
     $467 = 6080 + ($I7$0$i << 2) | 0;
     HEAP32[$351 + 28 >> 2] = $I7$0$i;
     $469 = $351 + 16 | 0;
     HEAP32[$469 + 4 >> 2] = 0;
     HEAP32[$469 >> 2] = 0;
     $471 = HEAP32[1445] | 0;
     $472 = 1 << $I7$0$i;
     if (!($471 & $472)) {
      HEAP32[1445] = $471 | $472;
      HEAP32[$467 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $467;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     }
     $K12$0$i = $rsize$4$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$467 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       $T$0$i$lcssa = $T$0$i;
       label = 148;
       break;
      }
      $490 = $T$0$i + 16 + ($K12$0$i >>> 31 << 2) | 0;
      $492 = HEAP32[$490 >> 2] | 0;
      if (!$492) {
       $$lcssa157 = $490;
       $T$0$i$lcssa156 = $T$0$i;
       label = 145;
       break;
      } else {
       $K12$0$i = $K12$0$i << 1;
       $T$0$i = $492;
      }
     }
     if ((label | 0) == 145) if ($$lcssa157 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa157 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $T$0$i$lcssa156;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     } else if ((label | 0) == 148) {
      $499 = $T$0$i$lcssa + 8 | 0;
      $500 = HEAP32[$499 >> 2] | 0;
      $501 = HEAP32[1448] | 0;
      if ($500 >>> 0 >= $501 >>> 0 & $T$0$i$lcssa >>> 0 >= $501 >>> 0) {
       HEAP32[$500 + 12 >> 2] = $351;
       HEAP32[$499 >> 2] = $351;
       HEAP32[$351 + 8 >> 2] = $500;
       HEAP32[$351 + 12 >> 2] = $T$0$i$lcssa;
       HEAP32[$351 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $nb$0 = $248;
  }
 } while (0);
 $509 = HEAP32[1446] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[1449] | 0;
  if ($511 >>> 0 > 15) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[1449] = $514;
   HEAP32[1446] = $511;
   HEAP32[$514 + 4 >> 2] = $511 | 1;
   HEAP32[$514 + $511 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[1446] = 0;
   HEAP32[1449] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $523 = $512 + $509 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$523 >> 2] | 1;
  }
  $$0 = $512 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $527 = HEAP32[1447] | 0;
 if ($527 >>> 0 > $nb$0 >>> 0) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[1447] = $529;
  $530 = HEAP32[1450] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[1450] = $531;
  HEAP32[$531 + 4 >> 2] = $529 | 1;
  HEAP32[$530 + 4 >> 2] = $nb$0 | 3;
  $$0 = $530 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[1562] | 0)) {
  HEAP32[1564] = 4096;
  HEAP32[1563] = 4096;
  HEAP32[1565] = -1;
  HEAP32[1566] = -1;
  HEAP32[1567] = 0;
  HEAP32[1555] = 0;
  $541 = $magic$i$i & -16 ^ 1431655768;
  HEAP32[$magic$i$i >> 2] = $541;
  HEAP32[1562] = $541;
 }
 $542 = $nb$0 + 48 | 0;
 $543 = HEAP32[1564] | 0;
 $544 = $nb$0 + 47 | 0;
 $545 = $543 + $544 | 0;
 $546 = 0 - $543 | 0;
 $547 = $545 & $546;
 if ($547 >>> 0 <= $nb$0 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $549 = HEAP32[1554] | 0;
 if ($549 | 0) {
  $551 = HEAP32[1552] | 0;
  $552 = $551 + $547 | 0;
  if ($552 >>> 0 <= $551 >>> 0 | $552 >>> 0 > $549 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L254 : do if (!(HEAP32[1555] & 4)) {
  $558 = HEAP32[1450] | 0;
  L256 : do if (!$558) label = 171; else {
   $sp$0$i$i = 6224;
   while (1) {
    $560 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($560 >>> 0 <= $558 >>> 0) {
     $562 = $sp$0$i$i + 4 | 0;
     if (($560 + (HEAP32[$562 >> 2] | 0) | 0) >>> 0 > $558 >>> 0) {
      $$lcssa153 = $sp$0$i$i;
      $$lcssa155 = $562;
      break;
     }
    }
    $567 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$567) {
     label = 171;
     break L256;
    } else $sp$0$i$i = $567;
   }
   $593 = $545 - (HEAP32[1447] | 0) & $546;
   if ($593 >>> 0 < 2147483647) {
    $595 = _sbrk($593 | 0) | 0;
    if (($595 | 0) == ((HEAP32[$$lcssa153 >> 2] | 0) + (HEAP32[$$lcssa155 >> 2] | 0) | 0)) {
     if (($595 | 0) != (-1 | 0)) {
      $tbase$746$i = $595;
      $tsize$745$i = $593;
      label = 191;
      break L254;
     }
    } else {
     $br$2$ph$i = $595;
     $ssize$2$ph$i = $593;
     label = 181;
    }
   }
  } while (0);
  do if ((label | 0) == 171) {
   $569 = _sbrk(0) | 0;
   if (($569 | 0) != (-1 | 0)) {
    $571 = $569;
    $572 = HEAP32[1563] | 0;
    $573 = $572 + -1 | 0;
    if (!($573 & $571)) $ssize$0$i = $547; else $ssize$0$i = $547 - $571 + ($573 + $571 & 0 - $572) | 0;
    $581 = HEAP32[1552] | 0;
    $582 = $581 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $585 = HEAP32[1554] | 0;
     if ($585 | 0) if ($582 >>> 0 <= $581 >>> 0 | $582 >>> 0 > $585 >>> 0) break;
     $589 = _sbrk($ssize$0$i | 0) | 0;
     if (($589 | 0) == ($569 | 0)) {
      $tbase$746$i = $569;
      $tsize$745$i = $ssize$0$i;
      label = 191;
      break L254;
     } else {
      $br$2$ph$i = $589;
      $ssize$2$ph$i = $ssize$0$i;
      label = 181;
     }
    }
   }
  } while (0);
  L276 : do if ((label | 0) == 181) {
   $601 = 0 - $ssize$2$ph$i | 0;
   do if ($542 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0))) {
    $605 = HEAP32[1564] | 0;
    $609 = $544 - $ssize$2$ph$i + $605 & 0 - $605;
    if ($609 >>> 0 < 2147483647) if ((_sbrk($609 | 0) | 0) == (-1 | 0)) {
     _sbrk($601 | 0) | 0;
     break L276;
    } else {
     $ssize$5$i = $609 + $ssize$2$ph$i | 0;
     break;
    } else $ssize$5$i = $ssize$2$ph$i;
   } else $ssize$5$i = $ssize$2$ph$i; while (0);
   if (($br$2$ph$i | 0) != (-1 | 0)) {
    $tbase$746$i = $br$2$ph$i;
    $tsize$745$i = $ssize$5$i;
    label = 191;
    break L254;
   }
  } while (0);
  HEAP32[1555] = HEAP32[1555] | 4;
  label = 188;
 } else label = 188; while (0);
 if ((label | 0) == 188) if ($547 >>> 0 < 2147483647) {
  $618 = _sbrk($547 | 0) | 0;
  $619 = _sbrk(0) | 0;
  if ($618 >>> 0 < $619 >>> 0 & (($618 | 0) != (-1 | 0) & ($619 | 0) != (-1 | 0))) {
   $625 = $619 - $618 | 0;
   if ($625 >>> 0 > ($nb$0 + 40 | 0) >>> 0) {
    $tbase$746$i = $618;
    $tsize$745$i = $625;
    label = 191;
   }
  }
 }
 if ((label | 0) == 191) {
  $628 = (HEAP32[1552] | 0) + $tsize$745$i | 0;
  HEAP32[1552] = $628;
  if ($628 >>> 0 > (HEAP32[1553] | 0) >>> 0) HEAP32[1553] = $628;
  $631 = HEAP32[1450] | 0;
  do if (!$631) {
   $633 = HEAP32[1448] | 0;
   if (($633 | 0) == 0 | $tbase$746$i >>> 0 < $633 >>> 0) HEAP32[1448] = $tbase$746$i;
   HEAP32[1556] = $tbase$746$i;
   HEAP32[1557] = $tsize$745$i;
   HEAP32[1559] = 0;
   HEAP32[1453] = HEAP32[1562];
   HEAP32[1452] = -1;
   $i$01$i$i = 0;
   while (1) {
    $638 = 5816 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$638 + 12 >> 2] = $638;
    HEAP32[$638 + 8 >> 2] = $638;
    $641 = $i$01$i$i + 1 | 0;
    if (($641 | 0) == 32) break; else $i$01$i$i = $641;
   }
   $644 = $tbase$746$i + 8 | 0;
   $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7;
   $650 = $tbase$746$i + $649 | 0;
   $651 = $tsize$745$i + -40 - $649 | 0;
   HEAP32[1450] = $650;
   HEAP32[1447] = $651;
   HEAP32[$650 + 4 >> 2] = $651 | 1;
   HEAP32[$650 + $651 + 4 >> 2] = 40;
   HEAP32[1451] = HEAP32[1566];
  } else {
   $sp$068$i = 6224;
   while (1) {
    $657 = HEAP32[$sp$068$i >> 2] | 0;
    $658 = $sp$068$i + 4 | 0;
    $659 = HEAP32[$658 >> 2] | 0;
    if (($tbase$746$i | 0) == ($657 + $659 | 0)) {
     $$lcssa147 = $657;
     $$lcssa149 = $658;
     $$lcssa151 = $659;
     $sp$068$i$lcssa = $sp$068$i;
     label = 201;
     break;
    }
    $663 = HEAP32[$sp$068$i + 8 >> 2] | 0;
    if (!$663) break; else $sp$068$i = $663;
   }
   if ((label | 0) == 201) if (!(HEAP32[$sp$068$i$lcssa + 12 >> 2] & 8)) if ($631 >>> 0 < $tbase$746$i >>> 0 & $631 >>> 0 >= $$lcssa147 >>> 0) {
    HEAP32[$$lcssa149 >> 2] = $$lcssa151 + $tsize$745$i;
    $674 = $631 + 8 | 0;
    $679 = ($674 & 7 | 0) == 0 ? 0 : 0 - $674 & 7;
    $680 = $631 + $679 | 0;
    $682 = $tsize$745$i - $679 + (HEAP32[1447] | 0) | 0;
    HEAP32[1450] = $680;
    HEAP32[1447] = $682;
    HEAP32[$680 + 4 >> 2] = $682 | 1;
    HEAP32[$680 + $682 + 4 >> 2] = 40;
    HEAP32[1451] = HEAP32[1566];
    break;
   }
   $688 = HEAP32[1448] | 0;
   if ($tbase$746$i >>> 0 < $688 >>> 0) {
    HEAP32[1448] = $tbase$746$i;
    $753 = $tbase$746$i;
   } else $753 = $688;
   $690 = $tbase$746$i + $tsize$745$i | 0;
   $sp$167$i = 6224;
   while (1) {
    if ((HEAP32[$sp$167$i >> 2] | 0) == ($690 | 0)) {
     $$lcssa144 = $sp$167$i;
     $sp$167$i$lcssa = $sp$167$i;
     label = 209;
     break;
    }
    $694 = HEAP32[$sp$167$i + 8 >> 2] | 0;
    if (!$694) {
     $sp$0$i$i$i = 6224;
     break;
    } else $sp$167$i = $694;
   }
   if ((label | 0) == 209) if (!(HEAP32[$sp$167$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa144 >> 2] = $tbase$746$i;
    $700 = $sp$167$i$lcssa + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $tsize$745$i;
    $704 = $tbase$746$i + 8 | 0;
    $710 = $tbase$746$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $nb$0 | 0;
    $723 = $718 - $710 - $nb$0 | 0;
    HEAP32[$710 + 4 >> 2] = $nb$0 | 3;
    do if (($718 | 0) == ($631 | 0)) {
     $728 = (HEAP32[1447] | 0) + $723 | 0;
     HEAP32[1447] = $728;
     HEAP32[1450] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if (($718 | 0) == (HEAP32[1449] | 0)) {
      $734 = (HEAP32[1446] | 0) + $723 | 0;
      HEAP32[1446] = $734;
      HEAP32[1449] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L328 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 5816 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($746 >>> 0 < $753 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[1444] = HEAP32[1444] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi10$i$iZ2D = $748 + 8 | 0; else {
        if ($748 >>> 0 < $753 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi10$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi10$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $786;
          $RP$1$i$i = $782;
         }
        } else {
         $R$1$i$i = $784;
         $RP$1$i$i = $783;
        }
        while (1) {
         $788 = $R$1$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if ($789 | 0) {
          $R$1$i$i = $789;
          $RP$1$i$i = $788;
          continue;
         }
         $791 = $R$1$i$i + 16 | 0;
         $792 = HEAP32[$791 >> 2] | 0;
         if (!$792) {
          $R$1$i$i$lcssa = $R$1$i$i;
          $RP$1$i$i$lcssa = $RP$1$i$i;
          break;
         } else {
          $R$1$i$i = $792;
          $RP$1$i$i = $791;
         }
        }
        if ($RP$1$i$i$lcssa >>> 0 < $753 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
         $R$3$i$i = $R$1$i$i$lcssa;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($774 >>> 0 < $753 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $R$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 6080 + ($797 << 2) | 0;
       do if (($718 | 0) == (HEAP32[$798 >> 2] | 0)) {
        HEAP32[$798 >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[1445] = HEAP32[1445] & ~(1 << $797);
        break L328;
       } else {
        if ($769 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
        $807 = $769 + 16 | 0;
        if ((HEAP32[$807 >> 2] | 0) == ($718 | 0)) HEAP32[$807 >> 2] = $R$3$i$i; else HEAP32[$769 + 20 >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L328;
       } while (0);
       $812 = HEAP32[1448] | 0;
       if ($R$3$i$i >>> 0 < $812 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($816 >>> 0 < $812 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ($822 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $718 + $742 | 0;
      $qsize$0$i$i = $742 + $723 | 0;
     } else {
      $oldfirst$0$i$i = $718;
      $qsize$0$i$i = $723;
     }
     $830 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$722 + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $836 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $839 = 5816 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[1444] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[1444] = $840 | $841;
       $$pre$phi$i17$iZ2D = $839 + 8 | 0;
       $F4$0$i$i = $839;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ($846 >>> 0 >= (HEAP32[1448] | 0) >>> 0) {
        $$pre$phi$i17$iZ2D = $845;
        $F4$0$i$i = $846;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i17$iZ2D >> 2] = $722;
      HEAP32[$F4$0$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $F4$0$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $qsize$0$i$i >>> 8;
     do if (!$852) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 6080 + ($I7$0$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $I7$0$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[1445] | 0;
     $882 = 1 << $I7$0$i$i;
     if (!($881 & $882)) {
      HEAP32[1445] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $K8$0$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
     $T$0$i18$i = HEAP32[$877 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i18$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       $T$0$i18$i$lcssa = $T$0$i18$i;
       label = 279;
       break;
      }
      $900 = $T$0$i18$i + 16 + ($K8$0$i$i >>> 31 << 2) | 0;
      $902 = HEAP32[$900 >> 2] | 0;
      if (!$902) {
       $$lcssa = $900;
       $T$0$i18$i$lcssa139 = $T$0$i18$i;
       label = 276;
       break;
      } else {
       $K8$0$i$i = $K8$0$i$i << 1;
       $T$0$i18$i = $902;
      }
     }
     if ((label | 0) == 276) if ($$lcssa >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $T$0$i18$i$lcssa139;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     } else if ((label | 0) == 279) {
      $909 = $T$0$i18$i$lcssa + 8 | 0;
      $910 = HEAP32[$909 >> 2] | 0;
      $911 = HEAP32[1448] | 0;
      if ($910 >>> 0 >= $911 >>> 0 & $T$0$i18$i$lcssa >>> 0 >= $911 >>> 0) {
       HEAP32[$910 + 12 >> 2] = $722;
       HEAP32[$909 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $910;
       HEAP32[$722 + 12 >> 2] = $T$0$i18$i$lcssa;
       HEAP32[$722 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $sp$0$i$i$i = 6224;
   while (1) {
    $918 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($918 >>> 0 <= $631 >>> 0) {
     $922 = $918 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($922 >>> 0 > $631 >>> 0) {
      $$lcssa142 = $922;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $926 = $$lcssa142 + -47 | 0;
   $928 = $926 + 8 | 0;
   $934 = $926 + (($928 & 7 | 0) == 0 ? 0 : 0 - $928 & 7) | 0;
   $935 = $631 + 16 | 0;
   $937 = $934 >>> 0 < $935 >>> 0 ? $631 : $934;
   $938 = $937 + 8 | 0;
   $942 = $tbase$746$i + 8 | 0;
   $947 = ($942 & 7 | 0) == 0 ? 0 : 0 - $942 & 7;
   $948 = $tbase$746$i + $947 | 0;
   $949 = $tsize$745$i + -40 - $947 | 0;
   HEAP32[1450] = $948;
   HEAP32[1447] = $949;
   HEAP32[$948 + 4 >> 2] = $949 | 1;
   HEAP32[$948 + $949 + 4 >> 2] = 40;
   HEAP32[1451] = HEAP32[1566];
   $955 = $937 + 4 | 0;
   HEAP32[$955 >> 2] = 27;
   HEAP32[$938 >> 2] = HEAP32[1556];
   HEAP32[$938 + 4 >> 2] = HEAP32[1557];
   HEAP32[$938 + 8 >> 2] = HEAP32[1558];
   HEAP32[$938 + 12 >> 2] = HEAP32[1559];
   HEAP32[1556] = $tbase$746$i;
   HEAP32[1557] = $tsize$745$i;
   HEAP32[1559] = 0;
   HEAP32[1558] = $938;
   $p$0$i$i = $937 + 24 | 0;
   while (1) {
    $956 = $p$0$i$i + 4 | 0;
    HEAP32[$956 >> 2] = 7;
    if (($956 + 4 | 0) >>> 0 < $$lcssa142 >>> 0) $p$0$i$i = $956; else break;
   }
   if (($937 | 0) != ($631 | 0)) {
    $962 = $937 - $631 | 0;
    HEAP32[$955 >> 2] = HEAP32[$955 >> 2] & -2;
    HEAP32[$631 + 4 >> 2] = $962 | 1;
    HEAP32[$937 >> 2] = $962;
    $967 = $962 >>> 3;
    if ($962 >>> 0 < 256) {
     $970 = 5816 + ($967 << 1 << 2) | 0;
     $971 = HEAP32[1444] | 0;
     $972 = 1 << $967;
     if (!($971 & $972)) {
      HEAP32[1444] = $971 | $972;
      $$pre$phi$i$iZ2D = $970 + 8 | 0;
      $F$0$i$i = $970;
     } else {
      $976 = $970 + 8 | 0;
      $977 = HEAP32[$976 >> 2] | 0;
      if ($977 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $976;
       $F$0$i$i = $977;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $631;
     HEAP32[$F$0$i$i + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $F$0$i$i;
     HEAP32[$631 + 12 >> 2] = $970;
     break;
    }
    $983 = $962 >>> 8;
    if (!$983) $I1$0$i$i = 0; else if ($962 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $988 = ($983 + 1048320 | 0) >>> 16 & 8;
     $989 = $983 << $988;
     $992 = ($989 + 520192 | 0) >>> 16 & 4;
     $994 = $989 << $992;
     $997 = ($994 + 245760 | 0) >>> 16 & 2;
     $1002 = 14 - ($992 | $988 | $997) + ($994 << $997 >>> 15) | 0;
     $I1$0$i$i = $962 >>> ($1002 + 7 | 0) & 1 | $1002 << 1;
    }
    $1008 = 6080 + ($I1$0$i$i << 2) | 0;
    HEAP32[$631 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$631 + 20 >> 2] = 0;
    HEAP32[$935 >> 2] = 0;
    $1011 = HEAP32[1445] | 0;
    $1012 = 1 << $I1$0$i$i;
    if (!($1011 & $1012)) {
     HEAP32[1445] = $1011 | $1012;
     HEAP32[$1008 >> 2] = $631;
     HEAP32[$631 + 24 >> 2] = $1008;
     HEAP32[$631 + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $631;
     break;
    }
    $K2$0$i$i = $962 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$1008 >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($962 | 0)) {
      $T$0$i$i$lcssa = $T$0$i$i;
      label = 305;
      break;
     }
     $1030 = $T$0$i$i + 16 + ($K2$0$i$i >>> 31 << 2) | 0;
     $1032 = HEAP32[$1030 >> 2] | 0;
     if (!$1032) {
      $$lcssa141 = $1030;
      $T$0$i$i$lcssa140 = $T$0$i$i;
      label = 302;
      break;
     } else {
      $K2$0$i$i = $K2$0$i$i << 1;
      $T$0$i$i = $1032;
     }
    }
    if ((label | 0) == 302) if ($$lcssa141 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
     HEAP32[$$lcssa141 >> 2] = $631;
     HEAP32[$631 + 24 >> 2] = $T$0$i$i$lcssa140;
     HEAP32[$631 + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $631;
     break;
    } else if ((label | 0) == 305) {
     $1039 = $T$0$i$i$lcssa + 8 | 0;
     $1040 = HEAP32[$1039 >> 2] | 0;
     $1041 = HEAP32[1448] | 0;
     if ($1040 >>> 0 >= $1041 >>> 0 & $T$0$i$i$lcssa >>> 0 >= $1041 >>> 0) {
      HEAP32[$1040 + 12 >> 2] = $631;
      HEAP32[$1039 >> 2] = $631;
      HEAP32[$631 + 8 >> 2] = $1040;
      HEAP32[$631 + 12 >> 2] = $T$0$i$i$lcssa;
      HEAP32[$631 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1049 = HEAP32[1447] | 0;
  if ($1049 >>> 0 > $nb$0 >>> 0) {
   $1051 = $1049 - $nb$0 | 0;
   HEAP32[1447] = $1051;
   $1052 = HEAP32[1450] | 0;
   $1053 = $1052 + $nb$0 | 0;
   HEAP32[1450] = $1053;
   HEAP32[$1053 + 4 >> 2] = $1051 | 1;
   HEAP32[$1052 + 4 >> 2] = $nb$0 | 3;
   $$0 = $1052 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _read_bunzip($bd, $outbuf, $len) {
 $bd = $bd | 0;
 $outbuf = $outbuf | 0;
 $len = $len | 0;
 var $$02 = 0, $$06 = 0, $$13 = 0, $$14$i = 0, $$17 = 0, $$24$ph = 0, $$28$ph = 0, $$35 = 0, $$39 = 0, $$5 = 0, $$in$i = 0, $$lcssa = 0, $$lcssa106 = 0, $$lcssa37$i = 0, $$lcssa95 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$pre$phiZ2D = 0, $$pre46 = 0, $$runPos$1$i = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $122 = 0, $129 = 0, $131 = 0, $132 = 0, $135 = 0, $136 = 0, $138 = 0, $141 = 0, $142 = 0, $15 = 0, $154 = 0, $16 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $174 = 0, $175 = 0, $177 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $195 = 0, $196 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $226 = 0, $228 = 0, $237 = 0, $244 = 0, $247 = 0, $249 = 0, $25 = 0, $254 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $268 = 0, $270 = 0, $274 = 0, $276 = 0, $277 = 0, $28 = 0, $285 = 0, $286 = 0, $29 = 0, $294 = 0, $296 = 0, $297 = 0, $3 = 0, $30 = 0, $301 = 0, $302 = 0, $304 = 0, $308 = 0, $312 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $64 = 0, $7 = 0, $76 = 0, $81 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $96 = 0, $CRC$0 = 0, $CRC$1 = 0, $CRC$2$ph = 0, $byteCount$i = 0, $current$0 = 0, $current$1 = 0, $current$2$ph = 0, $dbufCount$060$i = 0, $dbufCount$1$i = 0, $dbufCount$252$i = 0, $dbufCount$4$i = 0, $dbufCount$4$i$lcssa = 0, $dbufCount$5$i = 0, $dbufCount$5$i$lcssa = 0, $i$0$i = 0, $i$1$i = 0, $i$1$i$lcssa = 0, $i$1062$i = 0, $i$11$i = 0, $i$11$i$lcssa = 0, $i$12$i = 0, $i$1346$i = 0, $i$1444$i = 0, $i$2$i = 0, $i$3112$i = 0, $i$4110$i = 0, $i$571$i = 0, $i$675$i = 0, $i$788$i = 0, $i$891$i = 0, $i$995$i = 0, $inner_map$0$i = 0, $j$099$i = 0, $j$145$i = 0, $k$082$i = 0, $len_m1$070$i = 0, $len_m1$163$i = 0, $len_m1$163$i$lcssa = 0, $length$i = 0, $maxLen$0$lcssa$i = 0, $maxLen$074$i = 0, $maxLen$1$i = 0, $minLen$0$lcssa$i = 0, $minLen$073$i = 0, $minLen$1$i = 0, $mtfSymbol$i = 0, $n$0103$i = 0, $n$0103$i$lcssa105 = 0, $nextSym$0$i = 0, $pos$0 = 0, $pos$1 = 0, $pos$2 = 0, $pos$2$ph = 0, $pp$087$i = 0, $pp$1$lcssa$i = 0, $pp$181$i = 0, $pp$2$i = 0, $pp$3$lcssa$i = 0, $pp$394$i = 0, $runCnt$057$i = 0, $runCnt$1$i = 0, $runCnt$5$i = 0, $runCnt$6$i = 0, $runCnt$6$i$lcssa = 0, $runPos$058$i = 0, $runPos$1$i = 0, $runPos$5$i = 0, $runPos$5$i$lcssa = 0, $selector$059$i = 0, $symCount$0$i = 0, $symToByte$i = 0, $symTotal$0$i = 0, $symTotal$1$i = 0, $symTotal$2$i = 0, $symTotal$2$i$lcssa = 0, $symTotal$3$i = 0, $symTotal$3$i$lcssa = 0, $t$0$i = 0, $t$193$i = 0, $temp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $byteCount$i = sp + 88 | 0;
 $symToByte$i = sp + 1632 | 0;
 $mtfSymbol$i = sp + 1376 | 0;
 $length$i = sp + 1112 | 0;
 $temp$i = sp;
 $0 = $bd + 40 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) < 0) $$5 = $1; else {
  $3 = $bd + 60 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = $bd + 32 | 0;
  $7 = $bd + 44 | 0;
  $9 = $bd + 56 | 0;
  $11 = $bd + 28 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if (!$12) {
   $$35 = $outbuf;
   $$39 = $len;
   $$pre$phiZ2D = $bd + 48 | 0;
   $268 = $4;
   label = 17;
  } else {
   $$02 = $outbuf;
   $$06 = $len;
   $15 = $12;
   $CRC$0 = HEAP32[$9 >> 2] | 0;
   $current$0 = HEAP32[$7 >> 2] | 0;
   $pos$0 = HEAP32[$5 >> 2] | 0;
   label = 4;
  }
  L5 : while (1) {
   if ((label | 0) == 4) {
    label = 0;
    HEAP32[$11 >> 2] = $15 + -1;
    $$13 = $$02;
    $$17 = $$06;
    $CRC$1 = $CRC$0;
    $current$1 = $current$0;
    $pos$1 = $pos$0;
    label = 5;
   } else if ((label | 0) == 17) {
    label = 0;
    $54 = HEAP32[$bd + 64 >> 2] | 0;
    $55 = _get_bits($bd, 24) | 0;
    $56 = _get_bits($bd, 24) | 0;
    HEAP32[$$pre$phiZ2D >> 2] = _get_bits($bd, 32) | 0;
    L8 : do if (($55 | 0) == 1536581 & ($56 | 0) == 3690640) $$14$i = -1; else if (($55 | 0) != 3227993 | ($56 | 0) != 2511705) $$14$i = -2; else if (!(_get_bits($bd, 1) | 0)) {
     $64 = _get_bits($bd, 24) | 0;
     if (($64 | 0) > ($54 | 0)) $$14$i = -5; else {
      $i$0$i = 0;
      $symTotal$0$i = 0;
      $t$0$i = _get_bits($bd, 16) | 0;
      while (1) {
       if (!($t$0$i & 32768)) {
        $i$2$i = $i$0$i;
        $symTotal$3$i = $symTotal$0$i;
       } else {
        $i$1$i = $i$0$i;
        $inner_map$0$i = _get_bits($bd, 16) | 0;
        $symTotal$1$i = $symTotal$0$i;
        while (1) {
         if (!($inner_map$0$i & 32768)) $symTotal$2$i = $symTotal$1$i; else {
          HEAP8[$symToByte$i + $symTotal$1$i >> 0] = $i$1$i;
          $symTotal$2$i = $symTotal$1$i + 1 | 0;
         }
         $76 = $i$1$i + 1 | 0;
         if (!($76 & 15)) {
          $i$1$i$lcssa = $i$1$i;
          $symTotal$2$i$lcssa = $symTotal$2$i;
          break;
         } else {
          $i$1$i = $76;
          $inner_map$0$i = $inner_map$0$i << 1;
          $symTotal$1$i = $symTotal$2$i;
         }
        }
        $i$2$i = $i$1$i$lcssa + -15 | 0;
        $symTotal$3$i = $symTotal$2$i$lcssa;
       }
       $81 = $i$2$i + 16 | 0;
       if (($81 | 0) < 256) {
        $i$0$i = $81;
        $symTotal$0$i = $symTotal$3$i;
        $t$0$i = $t$0$i << 1;
       } else {
        $symTotal$3$i$lcssa = $symTotal$3$i;
        break;
       }
      }
      $83 = _get_bits($bd, 3) | 0;
      if (($83 + -2 | 0) >>> 0 > 4) $$14$i = -5; else {
       $85 = ($83 | 0) > 0;
       if ($85) {
        $i$3112$i = 0;
        while (1) {
         HEAP8[$mtfSymbol$i + $i$3112$i >> 0] = $i$3112$i;
         $88 = $i$3112$i + 1 | 0;
         if (($88 | 0) == ($83 | 0)) break; else $i$3112$i = $88;
        }
       }
       $89 = _get_bits($bd, 15) | 0;
       if (!$89) $$14$i = -5; else {
        $91 = ($89 | 0) > 0;
        if ($91) {
         $i$4110$i = 0;
         while (1) {
          if (!(_get_bits($bd, 1) | 0)) $108 = HEAP8[$mtfSymbol$i >> 0] | 0; else {
           $n$0103$i = 0;
           while (1) {
            if (($n$0103$i | 0) >= ($83 | 0)) {
             $$14$i = -5;
             break L8;
            }
            $96 = $n$0103$i + 1 | 0;
            if (!(_get_bits($bd, 1) | 0)) {
             $$lcssa106 = $96;
             $n$0103$i$lcssa105 = $n$0103$i;
             break;
            } else $n$0103$i = $96;
           }
           $100 = HEAP8[$mtfSymbol$i + $$lcssa106 >> 0] | 0;
           if (($n$0103$i$lcssa105 | 0) > -1) {
            $$in$i = $$lcssa106;
            while (1) {
             $102 = $$in$i + -1 | 0;
             HEAP8[$mtfSymbol$i + $$in$i >> 0] = HEAP8[$mtfSymbol$i + $102 >> 0] | 0;
             if (($$in$i | 0) > 1) $$in$i = $102; else {
              $108 = $100;
              break;
             }
            }
           } else $108 = $100;
          }
          HEAP8[$bd + 1248 + $i$4110$i >> 0] = $108;
          HEAP8[$mtfSymbol$i >> 0] = $108;
          $109 = $i$4110$i + 1 | 0;
          if (($109 | 0) < ($89 | 0)) $i$4110$i = $109; else break;
         }
        }
        $111 = $symTotal$3$i$lcssa + 2 | 0;
        L44 : do if ($85) {
         $112 = ($symTotal$3$i$lcssa | 0) > -2;
         $113 = ($111 | 0) > 1;
         $j$099$i = 0;
         L46 : while (1) {
          $114 = _get_bits($bd, 5) | 0;
          if ($112) {
           $i$571$i = 0;
           $len_m1$070$i = $114 + -1 | 0;
           while (1) {
            if ($len_m1$070$i >>> 0 > 19) break L46; else $len_m1$163$i = $len_m1$070$i;
            while (1) {
             $117 = _get_bits($bd, 2) | 0;
             if (($117 | 0) < 2) {
              $len_m1$163$i$lcssa = $len_m1$163$i;
              break;
             }
             $122 = $len_m1$163$i + -1 + ($117 + 1 & 2) | 0;
             if ($122 >>> 0 > 19) break L46; else $len_m1$163$i = $122;
            }
            HEAP32[$bd >> 2] = (HEAP32[$bd >> 2] | 0) + 1;
            HEAP8[$length$i + $i$571$i >> 0] = $len_m1$163$i$lcssa + 1;
            $129 = $i$571$i + 1 | 0;
            if (($129 | 0) < ($111 | 0)) {
             $i$571$i = $129;
             $len_m1$070$i = $len_m1$163$i$lcssa;
            } else break;
           }
           $132 = HEAP8[$length$i >> 0] | 0;
          } else $132 = 0;
          $131 = $132 & 255;
          if ($113) {
           $i$675$i = 1;
           $maxLen$074$i = $131;
           $minLen$073$i = $131;
           while (1) {
            $135 = HEAPU8[$length$i + $i$675$i >> 0] | 0;
            $136 = ($135 | 0) > ($maxLen$074$i | 0);
            $minLen$1$i = $136 ? $minLen$073$i : ($135 | 0) < ($minLen$073$i | 0) ? $135 : $minLen$073$i;
            $maxLen$1$i = $136 ? $135 : $maxLen$074$i;
            $138 = $i$675$i + 1 | 0;
            if (($138 | 0) == ($111 | 0)) {
             $maxLen$0$lcssa$i = $maxLen$1$i;
             $minLen$0$lcssa$i = $minLen$1$i;
             break;
            } else {
             $i$675$i = $138;
             $maxLen$074$i = $maxLen$1$i;
             $minLen$073$i = $minLen$1$i;
            }
           }
          } else {
           $maxLen$0$lcssa$i = $131;
           $minLen$0$lcssa$i = $131;
          }
          HEAP32[$bd + 34016 + ($j$099$i * 1204 | 0) + 1196 >> 2] = $minLen$0$lcssa$i;
          HEAP32[$bd + 34016 + ($j$099$i * 1204 | 0) + 1200 >> 2] = $maxLen$0$lcssa$i;
          $141 = $bd + 34016 + ($j$099$i * 1204 | 0) + 80 | 0;
          $142 = $bd + 34016 + ($j$099$i * 1204 | 0) + -4 | 0;
          if (($minLen$0$lcssa$i | 0) <= ($maxLen$0$lcssa$i | 0)) {
           _memset($temp$i + ($minLen$0$lcssa$i << 2) | 0, 0, $maxLen$0$lcssa$i + 1 - $minLen$0$lcssa$i << 2 | 0) | 0;
           $i$788$i = $minLen$0$lcssa$i;
           $pp$087$i = 0;
           while (1) {
            HEAP32[$142 + ($i$788$i << 2) >> 2] = 0;
            if ($112) {
             $k$082$i = 0;
             $pp$181$i = $pp$087$i;
             while (1) {
              if ((HEAPU8[$length$i + $k$082$i >> 0] | 0 | 0) == ($i$788$i | 0)) {
               HEAP32[$bd + 34016 + ($j$099$i * 1204 | 0) + 164 + ($pp$181$i << 2) >> 2] = $k$082$i;
               $pp$2$i = $pp$181$i + 1 | 0;
              } else $pp$2$i = $pp$181$i;
              $154 = $k$082$i + 1 | 0;
              if (($154 | 0) < ($111 | 0)) {
               $k$082$i = $154;
               $pp$181$i = $pp$2$i;
              } else {
               $pp$1$lcssa$i = $pp$2$i;
               break;
              }
             }
            } else $pp$1$lcssa$i = $pp$087$i;
            if (($i$788$i | 0) < ($maxLen$0$lcssa$i | 0)) {
             $i$788$i = $i$788$i + 1 | 0;
             $pp$087$i = $pp$1$lcssa$i;
            } else break;
           }
          }
          if ($112) {
           $i$891$i = 0;
           while (1) {
            $162 = $temp$i + ((HEAPU8[$length$i + $i$891$i >> 0] | 0) << 2) | 0;
            HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
            $165 = $i$891$i + 1 | 0;
            if (($165 | 0) < ($111 | 0)) $i$891$i = $165; else break;
           }
          }
          if (($maxLen$0$lcssa$i | 0) > ($minLen$0$lcssa$i | 0)) {
           $i$995$i = $minLen$0$lcssa$i;
           $pp$394$i = 0;
           $t$193$i = 0;
           while (1) {
            $168 = HEAP32[$temp$i + ($i$995$i << 2) >> 2] | 0;
            $169 = $168 + $pp$394$i | 0;
            HEAP32[$142 + ($i$995$i << 2) >> 2] = ($169 << $maxLen$0$lcssa$i - $i$995$i) + -1;
            $174 = $169 << 1;
            $175 = $168 + $t$193$i | 0;
            $177 = $i$995$i + 1 | 0;
            HEAP32[$141 + ($177 << 2) >> 2] = $174 - $175;
            if (($177 | 0) == ($maxLen$0$lcssa$i | 0)) {
             $pp$3$lcssa$i = $174;
             break;
            } else {
             $i$995$i = $177;
             $pp$394$i = $174;
             $t$193$i = $175;
            }
           }
          } else $pp$3$lcssa$i = 0;
          HEAP32[$142 + ($maxLen$0$lcssa$i << 2) >> 2] = $pp$3$lcssa$i + -1 + (HEAP32[$temp$i + ($maxLen$0$lcssa$i << 2) >> 2] | 0);
          HEAP32[$142 + ($maxLen$0$lcssa$i + 1 << 2) >> 2] = 2147483647;
          HEAP32[$141 + ($minLen$0$lcssa$i << 2) >> 2] = 0;
          $187 = $j$099$i + 1 | 0;
          if (($187 | 0) < ($83 | 0)) $j$099$i = $187; else break L44;
         }
         $$14$i = -5;
         break L8;
        } while (0);
        _memset($byteCount$i | 0, 0, 1024) | 0;
        $i$1062$i = 0;
        while (1) {
         HEAP8[$mtfSymbol$i + $i$1062$i >> 0] = $i$1062$i;
         $195 = $i$1062$i + 1 | 0;
         if (($195 | 0) == 256) break; else $i$1062$i = $195;
        }
        if ($91) {
         $189 = $bd + 4 | 0;
         $190 = $bd + 20 | 0;
         $191 = $bd + 16 | 0;
         $192 = $bd + 24 | 0;
         $dbufCount$060$i = 0;
         $runCnt$057$i = 0;
         $runPos$058$i = 0;
         $selector$059$i = 0;
         L88 : while (1) {
          $196 = $selector$059$i + 1 | 0;
          $200 = HEAPU8[$bd + 1248 + $selector$059$i >> 0] | 0;
          $201 = $bd + 34016 + ($200 * 1204 | 0) + 80 | 0;
          $202 = $bd + 34016 + ($200 * 1204 | 0) + -4 | 0;
          $203 = $bd + 34016 + ($200 * 1204 | 0) + 1200 | 0;
          $204 = $bd + 34016 + ($200 * 1204 | 0) + 1196 | 0;
          $dbufCount$1$i = $dbufCount$060$i;
          $runCnt$1$i = $runCnt$057$i;
          $runPos$1$i = $runPos$058$i;
          $symCount$0$i = 49;
          while (1) {
           $205 = HEAP32[$bd >> 2] | 0;
           $206 = HEAP32[$203 >> 2] | 0;
           $207 = $205 - $206 | 0;
           L92 : do if (($207 | 0) < 0) {
            $$pre46 = HEAP32[$191 >> 2] | 0;
            $209 = HEAP32[$190 >> 2] | 0;
            $221 = $205;
            $323 = $206;
            while (1) {
             if (($209 | 0) == ($$pre46 | 0)) {
              $$lcssa98 = $323;
              break;
             }
             $213 = HEAP32[$189 >> 2] << 8;
             $214 = $209 + 1 | 0;
             HEAP32[$190 >> 2] = $214;
             $219 = HEAPU8[(HEAP32[$192 >> 2] | 0) + $209 >> 0] | 0 | $213;
             HEAP32[$189 >> 2] = $219;
             $220 = $221 + 8 | 0;
             HEAP32[$bd >> 2] = $220;
             $222 = HEAP32[$203 >> 2] | 0;
             $223 = $220 - $222 | 0;
             if (($223 | 0) < 0) {
              $209 = $214;
              $221 = $220;
              $323 = $222;
             } else {
              $$lcssa37$i = $223;
              $226 = $219;
              $228 = $222;
              label = 77;
              break L92;
             }
            }
            $nextSym$0$i = _get_bits($bd, $$lcssa98) | 0;
           } else {
            $$lcssa37$i = $207;
            $226 = HEAP32[$189 >> 2] | 0;
            $228 = $206;
            label = 77;
           } while (0);
           if ((label | 0) == 77) {
            label = 0;
            HEAP32[$bd >> 2] = $$lcssa37$i;
            $nextSym$0$i = $226 >>> $$lcssa37$i & (1 << $228) + -1;
           }
           $i$11$i = HEAP32[$204 >> 2] | 0;
           while (1) if (($nextSym$0$i | 0) > (HEAP32[$202 + ($i$11$i << 2) >> 2] | 0)) $i$11$i = $i$11$i + 1 | 0; else {
            $i$11$i$lcssa = $i$11$i;
            break;
           }
           $237 = (HEAP32[$203 >> 2] | 0) - $i$11$i$lcssa | 0;
           if (($237 | 0) < 0) {
            $$14$i = -5;
            break L8;
           }
           HEAP32[$bd >> 2] = (HEAP32[$bd >> 2] | 0) + $237;
           $244 = ($nextSym$0$i >> $237) - (HEAP32[$201 + ($i$11$i$lcssa << 2) >> 2] | 0) | 0;
           if ($244 >>> 0 > 257) {
            $$14$i = -5;
            break L8;
           }
           $247 = HEAP32[$bd + 34016 + ($200 * 1204 | 0) + 164 + ($244 << 2) >> 2] | 0;
           $249 = ($runPos$1$i | 0) == 0;
           if ($247 >>> 0 < 2) {
            $$runPos$1$i = $249 ? 1 : $runPos$1$i;
            $dbufCount$5$i = $dbufCount$1$i;
            $runCnt$6$i = ($$runPos$1$i << $247) + ($249 ? 0 : $runCnt$1$i) | 0;
            $runPos$5$i = $$runPos$1$i << (($$runPos$1$i | 0) < ($54 | 0) & 1);
           } else {
            do if ($249) {
             $dbufCount$4$i = $dbufCount$1$i;
             $runCnt$5$i = $runCnt$1$i;
            } else {
             $254 = $dbufCount$1$i + $runCnt$1$i | 0;
             if (($254 | 0) > ($54 | 0)) {
              $$14$i = -5;
              break L8;
             }
             $260 = HEAPU8[$symToByte$i + (HEAPU8[$mtfSymbol$i >> 0] | 0) >> 0] | 0;
             $261 = $byteCount$i + ($260 << 2) | 0;
             HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + $runCnt$1$i;
             $264 = $runCnt$1$i + -1 | 0;
             if (($runCnt$1$i | 0) > 0) {
              $270 = $264;
              $dbufCount$252$i = $dbufCount$1$i;
             } else {
              $dbufCount$4$i = $dbufCount$1$i;
              $runCnt$5$i = $264;
              break;
             }
             while (1) {
              HEAP32[$268 + ($dbufCount$252$i << 2) >> 2] = $260;
              if (($270 | 0) > 0) {
               $270 = $270 + -1 | 0;
               $dbufCount$252$i = $dbufCount$252$i + 1 | 0;
              } else {
               $dbufCount$4$i = $254;
               $runCnt$5$i = -1;
               break;
              }
             }
            } while (0);
            if (($247 | 0) > ($symTotal$3$i$lcssa | 0)) {
             $dbufCount$4$i$lcssa = $dbufCount$4$i;
             break L88;
            }
            if (($dbufCount$4$i | 0) >= ($54 | 0)) {
             $$14$i = -5;
             break L8;
            }
            $274 = $247 + -1 | 0;
            $276 = HEAP8[$mtfSymbol$i + $274 >> 0] | 0;
            $i$12$i = $274;
            while (1) {
             $277 = $i$12$i + -1 | 0;
             HEAP8[$mtfSymbol$i + $i$12$i >> 0] = HEAP8[$mtfSymbol$i + $277 >> 0] | 0;
             if (!$277) break; else $i$12$i = $277;
            }
            HEAP8[$mtfSymbol$i >> 0] = $276;
            $285 = HEAPU8[$symToByte$i + ($276 & 255) >> 0] | 0;
            $286 = $byteCount$i + ($285 << 2) | 0;
            HEAP32[$286 >> 2] = (HEAP32[$286 >> 2] | 0) + 1;
            HEAP32[$268 + ($dbufCount$4$i << 2) >> 2] = $285;
            $dbufCount$5$i = $dbufCount$4$i + 1 | 0;
            $runCnt$6$i = $runCnt$5$i;
            $runPos$5$i = 0;
           }
           if (($symCount$0$i | 0) > 0) {
            $dbufCount$1$i = $dbufCount$5$i;
            $runCnt$1$i = $runCnt$6$i;
            $runPos$1$i = $runPos$5$i;
            $symCount$0$i = $symCount$0$i + -1 | 0;
           } else {
            $dbufCount$5$i$lcssa = $dbufCount$5$i;
            $runCnt$6$i$lcssa = $runCnt$6$i;
            $runPos$5$i$lcssa = $runPos$5$i;
            break;
           }
          }
          if (($196 | 0) < ($89 | 0)) {
           $dbufCount$060$i = $dbufCount$5$i$lcssa;
           $runCnt$057$i = $runCnt$6$i$lcssa;
           $runPos$058$i = $runPos$5$i$lcssa;
           $selector$059$i = $196;
          } else {
           $$14$i = -5;
           break L8;
          }
         }
         $i$1346$i = 0;
         $j$145$i = 0;
         while (1) {
          $294 = $byteCount$i + ($i$1346$i << 2) | 0;
          $296 = (HEAP32[$294 >> 2] | 0) + $j$145$i | 0;
          HEAP32[$294 >> 2] = $j$145$i;
          $297 = $i$1346$i + 1 | 0;
          if (($297 | 0) == 256) break; else {
           $i$1346$i = $297;
           $j$145$i = $296;
          }
         }
         if (($dbufCount$4$i$lcssa | 0) > 0) {
          $i$1444$i = 0;
          while (1) {
           $301 = $byteCount$i + ((HEAP32[$268 + ($i$1444$i << 2) >> 2] & 255) << 2) | 0;
           $302 = HEAP32[$301 >> 2] | 0;
           $304 = $268 + ($302 << 2) | 0;
           HEAP32[$304 >> 2] = HEAP32[$304 >> 2] | $i$1444$i << 8;
           HEAP32[$301 >> 2] = $302 + 1;
           $308 = $i$1444$i + 1 | 0;
           if (($308 | 0) == ($dbufCount$4$i$lcssa | 0)) break; else $i$1444$i = $308;
          }
         }
         if ($dbufCount$4$i$lcssa | 0) {
          if (($64 | 0) >= ($dbufCount$4$i$lcssa | 0)) {
           $$14$i = -5;
           break;
          }
          $312 = HEAP32[$268 + ($64 << 2) >> 2] | 0;
          HEAP32[$7 >> 2] = $312 & 255;
          HEAP32[$5 >> 2] = $312 >>> 8;
          HEAP32[$bd + 36 >> 2] = 5;
         }
         HEAP32[$0 >> 2] = $dbufCount$4$i$lcssa;
         $$14$i = 0;
        } else $$14$i = -5;
       }
      }
     }
    } else $$14$i = -7; while (0);
    if ($$14$i | 0) {
     label = 103;
     break;
    }
    $$24$ph = $$35;
    $$28$ph = $$39;
    $CRC$2$ph = -1;
    $current$2$ph = HEAP32[$7 >> 2] | 0;
    $pos$2$ph = HEAP32[$5 >> 2] | 0;
   }
   L138 : while (1) {
    if ((label | 0) == 5) {
     label = 0;
     $16 = $$17 + -1 | 0;
     if (($$17 | 0) < 1) {
      label = 105;
      break L5;
     }
     $19 = $$13 + 1 | 0;
     HEAP8[$$13 >> 0] = $current$1;
     $25 = HEAP32[$bd + 224 + (($CRC$1 >>> 24 ^ $current$1) << 2) >> 2] ^ $CRC$1 << 8;
     $26 = HEAP32[$11 >> 2] | 0;
     if (!$26) {
      $$24$ph = $19;
      $$28$ph = $16;
      $CRC$2$ph = $25;
      $current$2$ph = $current$1;
      $pos$2$ph = $pos$1;
     } else {
      $$02 = $19;
      $$06 = $16;
      $15 = $26;
      $CRC$0 = $25;
      $current$0 = $current$1;
      $pos$0 = $pos$1;
      label = 4;
      continue L5;
     }
    }
    $28 = $bd + 36 | 0;
    $30 = HEAP32[$0 >> 2] | 0;
    $pos$2 = $pos$2$ph;
    while (1) {
     $29 = $30 + -1 | 0;
     HEAP32[$0 >> 2] = $29;
     if (($30 | 0) < 1) break L138;
     $33 = HEAP32[$4 + ($pos$2 << 2) >> 2] | 0;
     $34 = $33 & 255;
     $35 = $33 >> 8;
     $37 = (HEAP32[$28 >> 2] | 0) + -1 | 0;
     HEAP32[$28 >> 2] = $37;
     if ($37 | 0) {
      $$lcssa = $34;
      $$lcssa96 = $35;
      break;
     }
     HEAP32[$11 >> 2] = $34;
     HEAP32[$28 >> 2] = 5;
     if (!$34) {
      $30 = $29;
      $pos$2 = $35;
     } else {
      $$lcssa95 = $34;
      $$lcssa97 = $35;
      label = 13;
      break;
     }
    }
    if ((label | 0) == 13) {
     label = 0;
     HEAP32[$11 >> 2] = $$lcssa95 + -1;
     $$13 = $$24$ph;
     $$17 = $$28$ph;
     $CRC$1 = $CRC$2$ph;
     $current$1 = $current$2$ph;
     $pos$1 = $$lcssa97;
     label = 5;
     continue;
    }
    if (($$lcssa | 0) == ($current$2$ph | 0)) {
     $$13 = $$24$ph;
     $$17 = $$28$ph;
     $CRC$1 = $CRC$2$ph;
     $current$1 = $current$2$ph;
     $pos$1 = $$lcssa96;
     label = 5;
     continue;
    }
    HEAP32[$28 >> 2] = 4;
    $$13 = $$24$ph;
    $$17 = $$28$ph;
    $CRC$1 = $CRC$2$ph;
    $current$1 = $$lcssa;
    $pos$1 = $$lcssa96;
    label = 5;
   }
   $42 = ~$CRC$2$ph;
   HEAP32[$9 >> 2] = $42;
   $43 = $bd + 52 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$43 >> 2] = ($44 << 1 | $44 >>> 31) ^ $42;
   $49 = $bd + 48 | 0;
   $50 = HEAP32[$49 >> 2] | 0;
   if (($50 | 0) != ($42 | 0)) {
    label = 16;
    break;
   }
   $$35 = $$24$ph;
   $$39 = $$28$ph;
   $$pre$phiZ2D = $49;
   $268 = HEAP32[$3 >> 2] | 0;
   label = 17;
  }
  if ((label | 0) == 16) {
   HEAP32[$43 >> 2] = $50 + 1;
   $$5 = -1;
   break;
  } else if ((label | 0) == 103) {
   HEAP32[$0 >> 2] = $$14$i;
   $$5 = ($$14$i | 0) != -1 ? $$14$i : $$39;
   break;
  } else if ((label | 0) == 105) {
   HEAP32[$5 >> 2] = $pos$1;
   HEAP32[$7 >> 2] = $current$1;
   HEAP32[$9 >> 2] = $CRC$1;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
   $$5 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$5 | 0;
}

function _getopt32($argv, $applet_opts, $varargs) {
 $argv = $argv | 0;
 $applet_opts = $applet_opts | 0;
 $varargs = $varargs | 0;
 var $$ = 0, $$0 = 0, $$alloca_mul = 0, $$lcssa252 = 0, $$lcssa53 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $148 = 0, $15 = 0, $150 = 0, $159 = 0, $160 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $170 = 0, $176 = 0, $177 = 0, $18 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $200 = 0, $202 = 0, $203 = 0, $210 = 0, $212 = 0, $213 = 0, $219 = 0, $221 = 0, $225 = 0, $231 = 0, $233 = 0, $237 = 0, $240 = 0, $248 = 0, $255 = 0, $259 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $74 = 0, $75 = 0, $80 = 0, $83 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $argc$0 = 0, $argc$0$lcssa = 0, $argv$pn = 0, $c$0$lcssa = 0, $c$0109 = 0, $c$193 = 0, $c$2 = 0, $complementary = 0, $count$0105 = 0, $count$0105$lcssa = 0, $flags$0$lcssa137 = 0, $flags$070 = 0, $flags$070$lcssa = 0, $flags$1 = 0, $flags$2$lcssa = 0, $flags$260 = 0, $i$0101 = 0, $l_o$095 = 0, $long_options$0 = 0, $max_arg$0$lcssa135 = 0, $max_arg$073 = 0, $max_arg$073$lcssa = 0, $max_arg$2 = 0, $min_arg$0$lcssa136 = 0, $min_arg$072 = 0, $min_arg$072$lcssa = 0, $min_arg$2 = 0, $on_off$0111 = 0, $on_off$1$lcssa = 0, $on_off$188 = 0, $on_off$262 = 0, $on_off$262$lcssa = 0, $on_off$367 = 0, $on_off$367$lcssa = 0, $on_off$4$lcssa = 0, $on_off$457 = 0, $on_off$556 = 0, $optstr$0104 = 0, $optstr$1100 = 0, $p = 0, $pair_switch$0$ph = 0, $pargv$0 = 0, $requires$0$lcssa138 = 0, $requires$069 = 0, $requires$069$lcssa = 0, $requires$1 = 0, $s$1$ph = 0, $s$1110 = 0, $s$2 = 0, $s$3 = 0, $s$471 = 0, $s$7 = 0, $s$7$pn = 0, $s$7$pn$ph = 0, $s$8 = 0, $s$8$lcssa235 = 0, $s$9 = 0, $spec_flgs$074 = 0, $spec_flgs$074$lcssa = 0, $spec_flgs$3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $complementary = sp + 24 | 0;
 $p = sp + 8 | 0;
 $argc$0 = 1;
 while (1) if (!(HEAP32[$argv + ($argc$0 << 2) >> 2] | 0)) {
  $argc$0$lcssa = $argc$0;
  break;
 } else $argc$0 = $argc$0 + 1 | 0;
 HEAP32[$p >> 2] = $varargs;
 _memset($complementary | 0, 0, 1056) | 0;
 $$alloca_mul = (_strlen($applet_opts) | 0) + 1 | 0;
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $7 = _strcpy($6, $applet_opts) | 0;
 $9 = (HEAP8[$7 >> 0] | 0) == 33;
 $$ = $9 ? $7 + 1 | 0 : $7;
 $11 = HEAP8[$$ >> 0] | 0;
 switch ($11 << 24 >> 24) {
 case 45:
 case 43:
  {
   $12 = $$ + 1 | 0;
   $13 = HEAP8[$12 >> 0] | 0;
   $s$1$ph = $12;
   break;
  }
 default:
  {
   $13 = $11;
   $s$1$ph = $$;
  }
 }
 if (!($13 << 24 >> 24)) $c$0$lcssa = 0; else {
  $15 = $13;
  $c$0109 = 0;
  $on_off$0111 = $complementary;
  $s$1110 = $s$1$ph;
  while (1) {
   HEAP8[$on_off$0111 >> 0] = $15;
   HEAP32[$on_off$0111 + 8 >> 2] = 1 << $c$0109;
   $18 = $s$1110 + 1 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   if ($19 << 24 >> 24 == 58) {
    $26 = (HEAP32[$p >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $27 = HEAP32[$26 >> 2] | 0;
    HEAP32[$p >> 2] = $26 + 4;
    HEAP32[$on_off$0111 + 24 >> 2] = $27;
    $29 = $s$1110 + 2 | 0;
    $30 = HEAP8[$29 >> 0] | 0;
    if (($30 & -2) << 24 >> 24 == 42) {
     HEAP32[$on_off$0111 + 4 >> 2] = $30 << 24 >> 24 == 43 ? 2 : 1;
     _overlapping_strcpy($29, $s$1110 + 3 | 0);
     $s$2 = $18;
    } else $s$2 = $18;
    while (1) {
     $36 = $s$2 + 1 | 0;
     $37 = HEAP8[$36 >> 0] | 0;
     if ($37 << 24 >> 24 == 58) $s$2 = $36; else {
      $41 = $37;
      $s$3 = $36;
      break;
     }
    }
   } else {
    $41 = $19;
    $s$3 = $18;
   }
   $40 = $c$0109 + 1 | 0;
   if (($c$0109 | 0) > 30 | $41 << 24 >> 24 == 0) {
    $c$0$lcssa = $40;
    break;
   } else {
    $15 = $41;
    $c$0109 = $40;
    $on_off$0111 = $on_off$0111 + 32 | 0;
    $s$1110 = $s$3;
   }
  }
 }
 $44 = HEAP32[1416] | 0;
 if (!$44) $long_options$0 = 5676; else {
  if (!(HEAP8[$44 >> 0] | 0)) {
   $48 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
   HEAP32[$48 >> 2] = 0;
   HEAP32[$48 + 4 >> 2] = 0;
   HEAP32[$48 + 8 >> 2] = 0;
   HEAP32[$48 + 12 >> 2] = 0;
   $259 = $48;
   $59 = $48;
  } else {
   $count$0105 = 1;
   $optstr$0104 = $44;
   while (1) {
    $51 = $optstr$0104 + ((_strlen($optstr$0104) | 0) + 3) | 0;
    $52 = $count$0105 + 1 | 0;
    if (!(HEAP8[$51 >> 0] | 0)) {
     $$lcssa252 = $52;
     $count$0105$lcssa = $count$0105;
     break;
    } else {
     $count$0105 = $52;
     $optstr$0104 = $51;
    }
   }
   $55 = $$lcssa252 << 4;
   $56 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $55 | 0) + 15 & -16) | 0;
   if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
   _memset($56 | 0, 0, $55 | 0) | 0;
   if (!$count$0105$lcssa) {
    $259 = $56;
    $59 = $56;
   } else {
    $75 = $count$0105$lcssa;
    $i$0101 = 0;
    $optstr$1100 = $44;
    while (1) {
     HEAP32[$56 + ($i$0101 << 4) >> 2] = $optstr$1100;
     $64 = $optstr$1100 + ((_strlen($optstr$1100) | 0) + 1) | 0;
     $65 = $64 + 1 | 0;
     HEAP32[$56 + ($i$0101 << 4) + 4 >> 2] = HEAPU8[$64 >> 0];
     HEAP32[$56 + ($i$0101 << 4) + 12 >> 2] = HEAPU8[$65 >> 0];
     $74 = $75 + -1 | 0;
     if (!$74) {
      $259 = $56;
      $59 = $56;
      break;
     } else {
      $75 = $74;
      $i$0101 = $i$0101 + 1 | 0;
      $optstr$1100 = $65 + 1 | 0;
     }
    }
   }
  }
  L28 : do if (HEAP32[$59 >> 2] | 0) {
   $c$193 = $c$0$lcssa;
   $l_o$095 = $259;
   while (1) {
    L31 : do if (!(HEAP32[$l_o$095 + 8 >> 2] | 0)) {
     $80 = HEAP8[$complementary >> 0] | 0;
     if (!($80 << 24 >> 24)) {
      $$lcssa53 = $complementary;
      $on_off$1$lcssa = $complementary;
     } else {
      $83 = HEAP32[$l_o$095 + 12 >> 2] | 0;
      $85 = $80;
      $on_off$188 = $complementary;
      while (1) {
       if (($85 & 255 | 0) == ($83 | 0)) {
        $c$2 = $c$193;
        break L31;
       }
       $87 = $on_off$188 + 32 | 0;
       $88 = HEAP8[$87 >> 0] | 0;
       if (!($88 << 24 >> 24)) {
        $$lcssa53 = $87;
        $on_off$1$lcssa = $87;
        break;
       } else {
        $85 = $88;
        $on_off$188 = $87;
       }
      }
     }
     if (($c$193 | 0) > 31) break L28;
     HEAP8[$$lcssa53 >> 0] = HEAP32[$l_o$095 + 12 >> 2];
     HEAP32[$on_off$1$lcssa + 8 >> 2] = 1 << $c$193;
     if (HEAP32[$l_o$095 + 4 >> 2] | 0) {
      $104 = (HEAP32[$p >> 2] | 0) + (4 - 1) & ~(4 - 1);
      $105 = HEAP32[$104 >> 2] | 0;
      HEAP32[$p >> 2] = $104 + 4;
      HEAP32[$on_off$1$lcssa + 24 >> 2] = $105;
     }
     $c$2 = $c$193 + 1 | 0;
    } else $c$2 = $c$193; while (0);
    $108 = $l_o$095 + 16 | 0;
    if (!(HEAP32[$108 >> 2] | 0)) break; else {
     $c$193 = $c$2;
     $l_o$095 = $108;
    }
   }
  } while (0);
  HEAP32[1416] = 0;
  $long_options$0 = $259;
 }
 $111 = HEAP32[1417] | 0;
 L46 : do if (!$111) {
  HEAP32[1417] = 0;
  $flags$0$lcssa137 = 0;
  $max_arg$0$lcssa135 = -1;
  $min_arg$0$lcssa136 = 0;
  $requires$0$lcssa138 = 0;
 } else {
  $flags$070 = 0;
  $max_arg$073 = -1;
  $min_arg$072 = 0;
  $requires$069 = 0;
  $s$471 = $111;
  $spec_flgs$074 = 0;
  L48 : while (1) {
   $113 = HEAP8[$s$471 >> 0] | 0;
   L50 : do switch ($113 << 24 >> 24) {
   case 0:
    {
     $flags$070$lcssa = $flags$070;
     $max_arg$073$lcssa = $max_arg$073;
     $min_arg$072$lcssa = $min_arg$072;
     $requires$069$lcssa = $requires$069;
     $spec_flgs$074$lcssa = $spec_flgs$074;
     break L48;
     break;
    }
   case 58:
    {
     $flags$1 = $flags$070;
     $max_arg$2 = $max_arg$073;
     $min_arg$2 = $min_arg$072;
     $requires$1 = $requires$069;
     $s$9 = $s$471;
     $spec_flgs$3 = $spec_flgs$074;
     break;
    }
   default:
    {
     $114 = $s$471 + 1 | 0;
     $115 = HEAP8[$114 >> 0] | 0;
     $116 = $115 & 255;
     switch ($113 << 24 >> 24) {
     case 63:
      {
       $119 = ($115 + -48 & 255) > 9;
       $flags$1 = $flags$070;
       $max_arg$2 = $119 ? $max_arg$073 : $116 + -48 | 0;
       $min_arg$2 = $min_arg$072;
       $requires$1 = $requires$069;
       $s$9 = $119 ? $s$471 : $114;
       $spec_flgs$3 = $119 & 1 | $spec_flgs$074;
       break L50;
       break;
      }
     case 45:
      {
       if (($115 + -48 & 255) <= 9) {
        $flags$1 = $flags$070;
        $max_arg$2 = $max_arg$073;
        $min_arg$2 = $116 + -48 | 0;
        $requires$1 = $requires$069;
        $s$9 = $114;
        $spec_flgs$3 = $spec_flgs$074;
        break L50;
       }
       if ($115 << 24 >> 24 == 45) {
        $flags$1 = $flags$070;
        $max_arg$2 = $max_arg$073;
        $min_arg$2 = $min_arg$072;
        $requires$1 = $requires$069;
        $s$9 = $114;
        $spec_flgs$3 = $spec_flgs$074 | 4;
        break L50;
       } else {
        $flags$1 = $flags$070;
        $max_arg$2 = $max_arg$073;
        $min_arg$2 = $min_arg$072;
        $requires$1 = $requires$069;
        $s$9 = $s$471;
        $spec_flgs$3 = $spec_flgs$074 | 2;
        break L50;
       }
       break;
      }
     case 61:
      {
       $127 = $116 + -48 | 0;
       $flags$1 = $flags$070;
       $max_arg$2 = $127;
       $min_arg$2 = $127;
       $requires$1 = $requires$069;
       $s$9 = $114;
       $spec_flgs$3 = $spec_flgs$074;
       break L50;
       break;
      }
     default:
      {
       $117 = HEAP8[$complementary >> 0] | 0;
       if (!($117 << 24 >> 24)) {
        $134 = $113;
        label = 43;
        break L48;
       } else {
        $128 = $117;
        $on_off$262 = $complementary;
       }
       while (1) {
        if ($128 << 24 >> 24 == $113 << 24 >> 24) {
         $on_off$262$lcssa = $on_off$262;
         break;
        }
        $130 = $on_off$262 + 32 | 0;
        $131 = HEAP8[$130 >> 0] | 0;
        if (!($131 << 24 >> 24)) {
         $134 = $113;
         label = 43;
         break L48;
        } else {
         $128 = $131;
         $on_off$262 = $130;
        }
       }
       L58 : do switch ($115 << 24 >> 24) {
       case 58:
        {
         if ((HEAP8[$s$471 + 2 >> 0] | 0) == 58) {
          HEAP32[$on_off$262$lcssa + 4 >> 2] = 1;
          $flags$1 = $flags$070;
          $max_arg$2 = $max_arg$073;
          $min_arg$2 = $min_arg$072;
          $requires$1 = $requires$069;
          $s$9 = $s$471;
          $spec_flgs$3 = $spec_flgs$074;
          break L50;
         } else label = 49;
         break;
        }
       case 43:
        {
         switch (HEAP8[$s$471 + 2 >> 0] | 0) {
         case 0:
         case 58:
          break;
         default:
          break L58;
         }
         HEAP32[$on_off$262$lcssa + 4 >> 2] = 2;
         $flags$1 = $flags$070;
         $max_arg$2 = $max_arg$073;
         $min_arg$2 = $min_arg$072;
         $requires$1 = $requires$069;
         $s$9 = $114;
         $spec_flgs$3 = $spec_flgs$074;
         break L50;
         break;
        }
       case 0:
        {
         label = 49;
         break;
        }
       case 45:
        {
         switch (HEAP8[$s$471 + 2 >> 0] | 0) {
         case 0:
         case 58:
          break;
         default:
          break L58;
         }
         $148 = HEAP32[$on_off$262$lcssa + 8 >> 2] | 0;
         $150 = $on_off$262$lcssa + 16 | 0;
         HEAP32[$150 >> 2] = HEAP32[$150 >> 2] | $148;
         $flags$1 = $148 | $flags$070;
         $max_arg$2 = $max_arg$073;
         $min_arg$2 = $min_arg$072;
         $requires$1 = $requires$069;
         $s$9 = $114;
         $spec_flgs$3 = $spec_flgs$074;
         break L50;
         break;
        }
       default:
        {}
       } while (0);
       if ((label | 0) == 49) {
        label = 0;
        $flags$1 = $flags$070;
        $max_arg$2 = $max_arg$073;
        $min_arg$2 = $min_arg$072;
        $requires$1 = HEAP32[$on_off$262$lcssa + 8 >> 2] | $requires$069;
        $s$9 = $s$471;
        $spec_flgs$3 = $spec_flgs$074;
        break L50;
       }
       if ($115 << 24 >> 24 == $113 << 24 >> 24) {
        $159 = (HEAP32[$p >> 2] | 0) + (4 - 1) & ~(4 - 1);
        $160 = HEAP32[$159 >> 2] | 0;
        HEAP32[$p >> 2] = $159 + 4;
        HEAP32[$on_off$262$lcssa + 28 >> 2] = $160;
        $s$7 = $114;
       } else $s$7 = $s$471;
       $163 = $on_off$262$lcssa + 20 | 0;
       $164 = $on_off$262$lcssa + 12 | 0;
       $165 = $on_off$262$lcssa + 16 | 0;
       $pair_switch$0$ph = $on_off$262$lcssa + 8 | 0;
       $s$7$pn$ph = $s$7;
       L71 : while (1) {
        $s$7$pn = $s$7$pn$ph;
        L73 : while (1) {
         $s$8 = $s$7$pn + 1 | 0;
         $166 = HEAP8[$s$8 >> 0] | 0;
         switch ($166 << 24 >> 24) {
         case 0:
         case 58:
          {
           $flags$1 = $flags$070;
           $max_arg$2 = $max_arg$073;
           $min_arg$2 = $min_arg$072;
           $requires$1 = $requires$069;
           $s$9 = $s$7$pn;
           $spec_flgs$3 = $spec_flgs$074;
           break L50;
           break;
          }
         case 63:
          {
           $pair_switch$0$ph = $163;
           $s$7$pn$ph = $s$8;
           continue L71;
           break;
          }
         case 45:
          {
           $s$8$lcssa235 = $s$8;
           break L73;
           break;
          }
         default:
          {}
         }
         $167 = HEAP8[$complementary >> 0] | 0;
         if (!($167 << 24 >> 24)) {
          $s$7$pn = $s$8;
          continue;
         } else {
          $170 = $167;
          $on_off$367 = $complementary;
         }
         while (1) {
          if ($170 << 24 >> 24 == $166 << 24 >> 24) {
           $on_off$367$lcssa = $on_off$367;
           break;
          }
          $176 = $on_off$367 + 32 | 0;
          $177 = HEAP8[$176 >> 0] | 0;
          if (!($177 << 24 >> 24)) {
           $s$7$pn = $s$8;
           continue L73;
          } else {
           $170 = $177;
           $on_off$367 = $176;
          }
         }
         HEAP32[$pair_switch$0$ph >> 2] = HEAP32[$pair_switch$0$ph >> 2] | HEAP32[$on_off$367$lcssa + 8 >> 2];
         $s$7$pn = $s$8;
        }
        $pair_switch$0$ph = ($pair_switch$0$ph | 0) == ($164 | 0) ? $165 : $164;
        $s$7$pn$ph = $s$8$lcssa235;
       }
      }
     }
    }
   } while (0);
   $flags$070 = $flags$1;
   $max_arg$073 = $max_arg$2;
   $min_arg$072 = $min_arg$2;
   $requires$069 = $requires$1;
   $s$471 = $s$9 + 1 | 0;
   $spec_flgs$074 = $spec_flgs$3;
  }
  if ((label | 0) == 43) {
   HEAP32[$vararg_buffer >> 2] = $134 & 255;
   _bb_error_msg_and_die(2618, $vararg_buffer);
  }
  HEAP32[1417] = 0;
  if (!($spec_flgs$074$lcssa & 6)) {
   $flags$0$lcssa137 = $flags$070$lcssa;
   $max_arg$0$lcssa135 = $max_arg$073$lcssa;
   $min_arg$0$lcssa136 = $min_arg$072$lcssa;
   $requires$0$lcssa138 = $requires$069$lcssa;
  } else {
   $183 = ($spec_flgs$074$lcssa & 2 | 0) == 0;
   $argv$pn = $argv;
   while (1) {
    $pargv$0 = $argv$pn + 4 | 0;
    $184 = HEAP32[$pargv$0 >> 2] | 0;
    if (!$184) {
     $flags$0$lcssa137 = $flags$070$lcssa;
     $max_arg$0$lcssa135 = $max_arg$073$lcssa;
     $min_arg$0$lcssa136 = $min_arg$072$lcssa;
     $requires$0$lcssa138 = $requires$069$lcssa;
     break L46;
    }
    switch (HEAP8[$184 >> 0] | 0) {
    case 0:
    case 45:
     break;
    default:
     {
      $189 = _xmalloc((_strlen($184) | 0) + 2 | 0) | 0;
      HEAP8[$189 >> 0] = 45;
      _strcpy($189 + 1 | 0, HEAP32[$pargv$0 >> 2] | 0) | 0;
      HEAP32[$pargv$0 >> 2] = $189;
     }
    }
    if ($183) {
     $flags$0$lcssa137 = $flags$070$lcssa;
     $max_arg$0$lcssa135 = $max_arg$073$lcssa;
     $min_arg$0$lcssa136 = $min_arg$072$lcssa;
     $requires$0$lcssa138 = $requires$069$lcssa;
     break L46;
    } else $argv$pn = $pargv$0;
   }
  }
 } while (0);
 HEAP32[22] = 1;
 $192 = _getopt_long($argc$0$lcssa, $argv, $$, $long_options$0, 0) | 0;
 L102 : do if (($192 | 0) == -1) {
  $flags$2$lcssa = $flags$0$lcssa137;
  label = 71;
 } else {
  $196 = $192;
  $flags$260 = $flags$0$lcssa137;
  while (1) {
   $194 = HEAP8[$complementary >> 0] | 0;
   $195 = $196 & 255;
   if ($194 << 24 >> 24 == $195 << 24 >> 24) $on_off$4$lcssa = $complementary; else {
    $200 = $194;
    $on_off$457 = $complementary;
    while (1) {
     if (!($200 << 24 >> 24)) {
      label = 91;
      break L102;
     }
     $202 = $on_off$457 + 32 | 0;
     $203 = HEAP8[$202 >> 0] | 0;
     if ($203 << 24 >> 24 == $195 << 24 >> 24) {
      $on_off$4$lcssa = $202;
      break;
     } else {
      $200 = $203;
      $on_off$457 = $202;
     }
    }
   }
   if (HEAP32[$on_off$4$lcssa + 16 >> 2] & $flags$260 | 0) {
    label = 91;
    break L102;
   }
   $210 = HEAP32[$on_off$4$lcssa + 8 >> 2] | 0;
   $212 = HEAP32[$on_off$4$lcssa + 12 >> 2] | 0;
   $213 = $212 & $210;
   $219 = (($213 ^ ~$212) & $flags$260 | $213 ^ $210) ^ $213;
   $221 = HEAP32[$on_off$4$lcssa + 28 >> 2] | 0;
   if ($221 | 0) HEAP32[$221 >> 2] = (HEAP32[$221 >> 2] | 0) + 1;
   $225 = HEAP32[1442] | 0;
   L114 : do if ($225 | 0) switch (HEAP32[$on_off$4$lcssa + 4 >> 2] | 0) {
   case 1:
    {
     _llist_add_to_end(HEAP32[$on_off$4$lcssa + 24 >> 2] | 0, $225);
     break L114;
     break;
    }
   case 2:
    {
     $233 = _xatoi_positive($225) | 0;
     HEAP32[HEAP32[$on_off$4$lcssa + 24 >> 2] >> 2] = $233;
     break L114;
     break;
    }
   default:
    {
     $237 = HEAP32[$on_off$4$lcssa + 24 >> 2] | 0;
     if (!$237) break L114;
     HEAP32[$237 >> 2] = $225;
     break L114;
    }
   } while (0);
   $231 = _getopt_long($argc$0$lcssa, $argv, $$, $long_options$0, 0) | 0;
   if (($231 | 0) == -1) {
    $flags$2$lcssa = $219;
    label = 71;
    break;
   } else {
    $196 = $231;
    $flags$260 = $219;
   }
  }
 } while (0);
 L122 : do if ((label | 0) == 71) {
  if (HEAP8[$complementary >> 0] | 0) {
   $on_off$556 = $complementary;
   while (1) {
    $240 = HEAP32[$on_off$556 + 20 >> 2] | 0;
    if ($240 | 0) if (($240 & $flags$2$lcssa | 0) == 0 ? (HEAP32[$on_off$556 + 8 >> 2] & $flags$2$lcssa | 0) != 0 : 0) {
     label = 91;
     break L122;
    }
    $248 = $on_off$556 + 32 | 0;
    if (!(HEAP8[$248 >> 0] | 0)) break; else $on_off$556 = $248;
   }
  }
  if (($requires$0$lcssa138 | 0) != 0 & ($flags$2$lcssa & $requires$0$lcssa138 | 0) == 0) label = 91; else {
   $255 = $argc$0$lcssa - (HEAP32[22] | 0) | 0;
   if (($255 | 0) < ($min_arg$0$lcssa136 | 0)) label = 91; else if (($max_arg$0$lcssa135 | 0) > -1 & ($255 | 0) > ($max_arg$0$lcssa135 | 0)) label = 91; else {
    HEAP32[1418] = $flags$2$lcssa;
    $$0 = $flags$2$lcssa;
   }
  }
 } while (0);
 if ((label | 0) == 91) if ($9) $$0 = -1; else _bb_show_usage();
 STACKTOP = sp;
 return $$0 | 0;
}

function _writeFileToTarball($fileName, $statbuf, $userData, $depth) {
 $fileName = $fileName | 0;
 $statbuf = $statbuf | 0;
 $userData = $userData | 0;
 $depth = $depth | 0;
 var $$0 = 0, $$01$i = 0, $$01$i$lcssa = 0, $$026$i = 0, $$pre = 0, $0 = 0, $101 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $120 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $137 = 0, $14 = 0, $141 = 0, $15 = 0, $151 = 0, $163 = 0, $164 = 0, $17 = 0, $180 = 0, $183 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $201 = 0, $208 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $221 = 0, $224 = 0, $227 = 0, $230 = 0, $234 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $243 = 0, $245 = 0, $25 = 0, $252 = 0, $256 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $268 = 0, $271 = 0, $29 = 0, $293 = 0, $296 = 0, $3 = 0, $300 = 0, $46 = 0, $48 = 0, $49 = 0, $52 = 0, $60 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $75 = 0, $79 = 0, $82 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $98 = 0, $header$i = 0, $inputFileFd$0 = 0, $p$04$i = 0, $tempBuffer$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer8 = 0, $vbFd$0$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer43 = sp + 96 | 0;
 $vararg_buffer40 = sp + 88 | 0;
 $vararg_buffer36 = sp + 80 | 0;
 $vararg_buffer32 = sp + 72 | 0;
 $vararg_buffer28 = sp + 64 | 0;
 $vararg_buffer24 = sp + 56 | 0;
 $vararg_buffer20 = sp + 48 | 0;
 $vararg_buffer16 = sp + 40 | 0;
 $vararg_buffer12 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $tempBuffer$i$i = sp + 616 | 0;
 $header$i = sp + 104 | 0;
 $0 = _strip_unsafe_prefix($fileName) | 0;
 L1 : do if (!(HEAP8[$0 >> 0] | 0)) $$0 = 1; else {
  $3 = $statbuf + 24 | 0;
  if ((HEAP32[$3 >> 2] & 61440 | 0) == 49152) {
   HEAP32[$vararg_buffer >> 2] = $fileName;
   _bb_error_msg(1729, $vararg_buffer);
   $$0 = 1;
   break;
  }
  $7 = $userData + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  L6 : do if ((HEAP32[$3 >> 2] & 61440 | 0) != 16384) if ((HEAP32[$statbuf + 16 >> 2] | 0) >>> 0 > 1) {
   $14 = $userData + 12 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $$pre = $statbuf + 8 | 0;
   L9 : do if ($15 | 0) {
    $17 = HEAP32[$$pre >> 2] | 0;
    $$01$i = $15;
    while (1) {
     if (($17 | 0) == (HEAP32[$$01$i + 8 >> 2] | 0)) if ((HEAP32[$statbuf >> 2] | 0) == (HEAP32[$$01$i + 4 >> 2] | 0)) {
      $$01$i$lcssa = $$01$i;
      break;
     }
     $25 = HEAP32[$$01$i >> 2] | 0;
     if (!$25) break L9; else $$01$i = $25;
    }
    HEAP32[$7 >> 2] = $$01$i$lcssa;
    break L6;
   } while (0);
   HEAP32[$7 >> 2] = 0;
   $29 = _xmalloc((_strlen($0) | 0) + 16 | 0) | 0;
   HEAP32[$29 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$14 >> 2] = $29;
   HEAP32[$29 + 4 >> 2] = HEAP32[$statbuf >> 2];
   HEAP32[$29 + 8 >> 2] = HEAP32[$$pre >> 2];
   _strcpy($29 + 12 | 0, $0) | 0;
  } while (0);
  if ((HEAP32[$userData + 24 >> 2] | 0) == (HEAP32[$statbuf >> 2] | 0)) if ((HEAP32[$userData + 32 >> 2] | 0) == (HEAP32[$statbuf + 8 >> 2] | 0)) {
   HEAP32[$vararg_buffer1 >> 2] = $fileName;
   _bb_error_msg(1748, $vararg_buffer1);
   $$0 = 1;
   break;
  }
  $46 = HEAP32[$userData + 8 >> 2] | 0;
  if ($46 | 0) {
   $$026$i = $46;
   while (1) {
    $48 = $$026$i + 4 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    if ((HEAP8[$49 >> 0] | 0) == 47) {
     if (!(_fnmatch($49 | 0, $0 | 0, 9) | 0)) {
      $$0 = 2;
      break L1;
     }
    } else {
     $52 = HEAP8[$0 >> 0] | 0;
     if ($52 << 24 >> 24) {
      $60 = $52;
      $p$04$i = $0;
      while (1) {
       if (($p$04$i | 0) == ($0 | 0)) {
        if ($60 << 24 >> 24 != 47) label = 23;
       } else if (!($60 << 24 >> 24 == 47 | (HEAP8[$p$04$i + -1 >> 0] | 0) != 47)) label = 23;
       if ((label | 0) == 23) {
        label = 0;
        if (!(_fnmatch(HEAP32[$48 >> 2] | 0, $p$04$i | 0, 9) | 0)) {
         $$0 = 2;
         break L1;
        }
       }
       $65 = $p$04$i + 1 | 0;
       $66 = HEAP8[$65 >> 0] | 0;
       if (!($66 << 24 >> 24)) break; else {
        $60 = $66;
        $p$04$i = $65;
       }
      }
     }
    }
    $68 = HEAP32[$$026$i >> 2] | 0;
    if (!$68) break; else $$026$i = $68;
   }
  }
  if (!(HEAP32[$7 >> 2] | 0)) if ((HEAP32[$3 >> 2] & 61440 | 0) == 32768) {
   $75 = _open_or_warn($fileName, 0) | 0;
   if (($75 | 0) < 0) {
    $$0 = 0;
    break;
   } else $inputFileFd$0 = $75;
  } else $inputFileFd$0 = -1; else $inputFileFd$0 = -1;
  _memset($header$i | 0, 0, 512) | 0;
  _strncpy($header$i, $0, 100) | 0;
  $79 = HEAP32[$3 >> 2] & 4095;
  HEAP32[$vararg_buffer4 >> 2] = 8;
  HEAP32[$vararg_buffer4 + 4 >> 2] = $79;
  $82 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer4) | 0) + -8) | 0;
  $86 = (HEAP8[$82 >> 0] | 0) == 48 ? $82 + 1 | 0 : $82;
  $87 = $86;
  $88 = HEAPU8[$87 >> 0] | HEAPU8[$87 + 1 >> 0] << 8 | HEAPU8[$87 + 2 >> 0] << 16 | HEAPU8[$87 + 3 >> 0] << 24;
  $90 = $86 + 4 | 0;
  $91 = HEAPU8[$90 >> 0] | HEAPU8[$90 + 1 >> 0] << 8 | HEAPU8[$90 + 2 >> 0] << 16 | HEAPU8[$90 + 3 >> 0] << 24;
  $92 = $header$i + 100 | 0;
  $93 = $92;
  HEAP8[$93 >> 0] = $88;
  HEAP8[$93 + 1 >> 0] = $88 >> 8;
  HEAP8[$93 + 2 >> 0] = $88 >> 16;
  HEAP8[$93 + 3 >> 0] = $88 >> 24;
  $95 = $92 + 4 | 0;
  HEAP8[$95 >> 0] = $91;
  HEAP8[$95 + 1 >> 0] = $91 >> 8;
  HEAP8[$95 + 2 >> 0] = $91 >> 16;
  HEAP8[$95 + 3 >> 0] = $91 >> 24;
  $97 = $statbuf + 28 | 0;
  $98 = HEAP32[$97 >> 2] | 0;
  HEAP32[$vararg_buffer8 >> 2] = 8;
  HEAP32[$vararg_buffer8 + 4 >> 2] = $98;
  $101 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer8) | 0) + -8) | 0;
  $105 = (HEAP8[$101 >> 0] | 0) == 48 ? $101 + 1 | 0 : $101;
  $106 = $105;
  $107 = HEAPU8[$106 >> 0] | HEAPU8[$106 + 1 >> 0] << 8 | HEAPU8[$106 + 2 >> 0] << 16 | HEAPU8[$106 + 3 >> 0] << 24;
  $109 = $105 + 4 | 0;
  $110 = HEAPU8[$109 >> 0] | HEAPU8[$109 + 1 >> 0] << 8 | HEAPU8[$109 + 2 >> 0] << 16 | HEAPU8[$109 + 3 >> 0] << 24;
  $111 = $header$i + 108 | 0;
  $112 = $111;
  HEAP8[$112 >> 0] = $107;
  HEAP8[$112 + 1 >> 0] = $107 >> 8;
  HEAP8[$112 + 2 >> 0] = $107 >> 16;
  HEAP8[$112 + 3 >> 0] = $107 >> 24;
  $114 = $111 + 4 | 0;
  HEAP8[$114 >> 0] = $110;
  HEAP8[$114 + 1 >> 0] = $110 >> 8;
  HEAP8[$114 + 2 >> 0] = $110 >> 16;
  HEAP8[$114 + 3 >> 0] = $110 >> 24;
  $116 = $statbuf + 32 | 0;
  $117 = HEAP32[$116 >> 2] | 0;
  HEAP32[$vararg_buffer12 >> 2] = 8;
  HEAP32[$vararg_buffer12 + 4 >> 2] = $117;
  $120 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer12) | 0) + -8) | 0;
  $124 = (HEAP8[$120 >> 0] | 0) == 48 ? $120 + 1 | 0 : $120;
  $125 = $124;
  $126 = HEAPU8[$125 >> 0] | HEAPU8[$125 + 1 >> 0] << 8 | HEAPU8[$125 + 2 >> 0] << 16 | HEAPU8[$125 + 3 >> 0] << 24;
  $128 = $124 + 4 | 0;
  $129 = HEAPU8[$128 >> 0] | HEAPU8[$128 + 1 >> 0] << 8 | HEAPU8[$128 + 2 >> 0] << 16 | HEAPU8[$128 + 3 >> 0] << 24;
  $130 = $header$i + 116 | 0;
  $131 = $130;
  HEAP8[$131 >> 0] = $126;
  HEAP8[$131 + 1 >> 0] = $126 >> 8;
  HEAP8[$131 + 2 >> 0] = $126 >> 16;
  HEAP8[$131 + 3 >> 0] = $126 >> 24;
  $133 = $130 + 4 | 0;
  HEAP8[$133 >> 0] = $129;
  HEAP8[$133 + 1 >> 0] = $129 >> 8;
  HEAP8[$133 + 2 >> 0] = $129 >> 16;
  HEAP8[$133 + 3 >> 0] = $129 >> 24;
  $134 = $header$i + 124 | 0;
  dest = $134;
  stop = dest + 11 | 0;
  do {
   HEAP8[dest >> 0] = 48;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $137 = HEAP32[$statbuf + 88 >> 2] | 0;
  HEAP32[$vararg_buffer16 >> 2] = 12;
  HEAP32[$vararg_buffer16 + 4 >> 2] = ($137 | 0) < 0 ? 0 : $137;
  $141 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer16) | 0) + -12) | 0;
  dest = $header$i + 136 | 0;
  src = (HEAP8[$141 >> 0] | 0) == 48 ? $141 + 1 | 0 : $141;
  stop = dest + 12 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  _safe_strncpy($header$i + 265 | 0, _get_cached_username(HEAP32[$97 >> 2] | 0) | 0, 32) | 0;
  _safe_strncpy($header$i + 297 | 0, _get_cached_groupname(HEAP32[$116 >> 2] | 0) | 0, 32) | 0;
  $151 = HEAP32[$7 >> 2] | 0;
  L43 : do if (!$151) {
   $163 = HEAP32[$3 >> 2] & 61440;
   L45 : do if (($163 | 0) < 24576) {
    if (($163 | 0) < 8192) {
     switch ($163 | 0) {
     case 4096:
      break;
     default:
      {
       label = 43;
       break L45;
      }
     }
     HEAP8[$header$i + 156 >> 0] = 54;
     break L43;
    }
    if (($163 | 0) < 16384) {
     switch ($163 | 0) {
     case 8192:
      break;
     default:
      {
       label = 43;
       break L45;
      }
     }
     HEAP8[$header$i + 156 >> 0] = 51;
     $180 = $statbuf + 40 | 0;
     $183 = (HEAP32[$180 >> 2] | 0) >>> 8 & 4095;
     HEAP32[$vararg_buffer20 >> 2] = 8;
     HEAP32[$vararg_buffer20 + 4 >> 2] = $183;
     $186 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer20) | 0) + -8) | 0;
     $190 = (HEAP8[$186 >> 0] | 0) == 48 ? $186 + 1 | 0 : $186;
     $191 = $190;
     $192 = HEAPU8[$191 >> 0] | HEAPU8[$191 + 1 >> 0] << 8 | HEAPU8[$191 + 2 >> 0] << 16 | HEAPU8[$191 + 3 >> 0] << 24;
     $194 = $190 + 4 | 0;
     $195 = HEAPU8[$194 >> 0] | HEAPU8[$194 + 1 >> 0] << 8 | HEAPU8[$194 + 2 >> 0] << 16 | HEAPU8[$194 + 3 >> 0] << 24;
     $196 = $header$i + 329 | 0;
     $197 = $196;
     HEAP8[$197 >> 0] = $192;
     HEAP8[$197 + 1 >> 0] = $192 >> 8;
     HEAP8[$197 + 2 >> 0] = $192 >> 16;
     HEAP8[$197 + 3 >> 0] = $192 >> 24;
     $199 = $196 + 4 | 0;
     HEAP8[$199 >> 0] = $195;
     HEAP8[$199 + 1 >> 0] = $195 >> 8;
     HEAP8[$199 + 2 >> 0] = $195 >> 16;
     HEAP8[$199 + 3 >> 0] = $195 >> 24;
     $201 = HEAP32[$180 >> 2] | 0;
     HEAP32[$vararg_buffer24 >> 2] = 8;
     HEAP32[$vararg_buffer24 + 4 >> 2] = $201 >>> 12 & 1048320 | $201 & 255;
     $208 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer24) | 0) + -8) | 0;
     $212 = (HEAP8[$208 >> 0] | 0) == 48 ? $208 + 1 | 0 : $208;
     $213 = $212;
     $214 = HEAPU8[$213 >> 0] | HEAPU8[$213 + 1 >> 0] << 8 | HEAPU8[$213 + 2 >> 0] << 16 | HEAPU8[$213 + 3 >> 0] << 24;
     $216 = $212 + 4 | 0;
     $217 = HEAPU8[$216 >> 0] | HEAPU8[$216 + 1 >> 0] << 8 | HEAPU8[$216 + 2 >> 0] << 16 | HEAPU8[$216 + 3 >> 0] << 24;
     $218 = $header$i + 337 | 0;
     $219 = $218;
     HEAP8[$219 >> 0] = $214;
     HEAP8[$219 + 1 >> 0] = $214 >> 8;
     HEAP8[$219 + 2 >> 0] = $214 >> 16;
     HEAP8[$219 + 3 >> 0] = $214 >> 24;
     $221 = $218 + 4 | 0;
     HEAP8[$221 >> 0] = $217;
     HEAP8[$221 + 1 >> 0] = $217 >> 8;
     HEAP8[$221 + 2 >> 0] = $217 >> 16;
     HEAP8[$221 + 3 >> 0] = $217 >> 24;
     break L43;
    }
    switch ($163 | 0) {
    case 16384:
     break;
    default:
     {
      label = 43;
      break L45;
     }
    }
    HEAP8[$header$i + 156 >> 0] = 53;
    if (HEAP8[$header$i + 99 >> 0] | 0) break L43;
    HEAP8[$header$i + (_strlen($header$i) | 0) >> 0] = 47;
    break L43;
   } else {
    if (($163 | 0) < 32768) {
     switch ($163 | 0) {
     case 24576:
      break;
     default:
      {
       label = 43;
       break L45;
      }
     }
     HEAP8[$header$i + 156 >> 0] = 52;
     $224 = $statbuf + 40 | 0;
     $227 = (HEAP32[$224 >> 2] | 0) >>> 8 & 4095;
     HEAP32[$vararg_buffer28 >> 2] = 8;
     HEAP32[$vararg_buffer28 + 4 >> 2] = $227;
     $230 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer28) | 0) + -8) | 0;
     $234 = (HEAP8[$230 >> 0] | 0) == 48 ? $230 + 1 | 0 : $230;
     $235 = $234;
     $236 = HEAPU8[$235 >> 0] | HEAPU8[$235 + 1 >> 0] << 8 | HEAPU8[$235 + 2 >> 0] << 16 | HEAPU8[$235 + 3 >> 0] << 24;
     $238 = $234 + 4 | 0;
     $239 = HEAPU8[$238 >> 0] | HEAPU8[$238 + 1 >> 0] << 8 | HEAPU8[$238 + 2 >> 0] << 16 | HEAPU8[$238 + 3 >> 0] << 24;
     $240 = $header$i + 329 | 0;
     $241 = $240;
     HEAP8[$241 >> 0] = $236;
     HEAP8[$241 + 1 >> 0] = $236 >> 8;
     HEAP8[$241 + 2 >> 0] = $236 >> 16;
     HEAP8[$241 + 3 >> 0] = $236 >> 24;
     $243 = $240 + 4 | 0;
     HEAP8[$243 >> 0] = $239;
     HEAP8[$243 + 1 >> 0] = $239 >> 8;
     HEAP8[$243 + 2 >> 0] = $239 >> 16;
     HEAP8[$243 + 3 >> 0] = $239 >> 24;
     $245 = HEAP32[$224 >> 2] | 0;
     HEAP32[$vararg_buffer32 >> 2] = 8;
     HEAP32[$vararg_buffer32 + 4 >> 2] = $245 >>> 12 & 1048320 | $245 & 255;
     $252 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer32) | 0) + -8) | 0;
     $256 = (HEAP8[$252 >> 0] | 0) == 48 ? $252 + 1 | 0 : $252;
     $257 = $256;
     $258 = HEAPU8[$257 >> 0] | HEAPU8[$257 + 1 >> 0] << 8 | HEAPU8[$257 + 2 >> 0] << 16 | HEAPU8[$257 + 3 >> 0] << 24;
     $260 = $256 + 4 | 0;
     $261 = HEAPU8[$260 >> 0] | HEAPU8[$260 + 1 >> 0] << 8 | HEAPU8[$260 + 2 >> 0] << 16 | HEAPU8[$260 + 3 >> 0] << 24;
     $262 = $header$i + 337 | 0;
     $263 = $262;
     HEAP8[$263 >> 0] = $258;
     HEAP8[$263 + 1 >> 0] = $258 >> 8;
     HEAP8[$263 + 2 >> 0] = $258 >> 16;
     HEAP8[$263 + 3 >> 0] = $258 >> 24;
     $265 = $262 + 4 | 0;
     HEAP8[$265 >> 0] = $261;
     HEAP8[$265 + 1 >> 0] = $261 >> 8;
     HEAP8[$265 + 2 >> 0] = $261 >> 16;
     HEAP8[$265 + 3 >> 0] = $261 >> 24;
     break L43;
    }
    if (($163 | 0) < 40960) {
     switch ($163 | 0) {
     case 32768:
      break;
     default:
      {
       label = 43;
       break L45;
      }
     }
     $268 = HEAP32[$statbuf + 48 >> 2] | 0;
     HEAP32[$vararg_buffer36 >> 2] = 12;
     HEAP32[$vararg_buffer36 + 4 >> 2] = $268;
     $271 = $tempBuffer$i$i + ((_sprintf($tempBuffer$i$i, 1782, $vararg_buffer36) | 0) + -12) | 0;
     dest = $134;
     src = (HEAP8[$271 >> 0] | 0) == 48 ? $271 + 1 | 0 : $271;
     stop = dest + 12 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$header$i + 156 >> 0] = 48;
     break L43;
    }
    switch ($163 | 0) {
    case 40960:
     break;
    default:
     {
      label = 43;
      break L45;
     }
    }
    $164 = _xmalloc_readlink_or_warn($fileName) | 0;
    if ($164 | 0) {
     HEAP8[$header$i + 156 >> 0] = 50;
     _strncpy($header$i + 157 | 0, $164, 100) | 0;
     if (HEAP8[$header$i + 256 >> 0] | 0) _writeLongname(HEAP32[$userData >> 2] | 0, 75, $164, 0);
     _free($164);
     break L43;
    }
   } while (0);
   if ((label | 0) == 43) {
    HEAP32[$vararg_buffer40 >> 2] = $fileName;
    _bb_error_msg(1850, $vararg_buffer40);
   }
   $$0 = 0;
   break L1;
  } else {
   HEAP8[$header$i + 156 >> 0] = 49;
   _strncpy($header$i + 157 | 0, $151 + 12 | 0, 100) | 0;
   if (HEAP8[$header$i + 256 >> 0] | 0) _writeLongname(HEAP32[$userData >> 2] | 0, 75, (HEAP32[$7 >> 2] | 0) + 12 | 0, 0);
  } while (0);
  if (HEAP8[$header$i + 99 >> 0] | 0) _writeLongname(HEAP32[$userData >> 2] | 0, 76, $0, (HEAP32[$3 >> 2] & 61440 | 0) == 16384 & 1);
  _chksum_and_xwrite(HEAP32[$userData >> 2] | 0, $header$i);
  if (HEAP32[$userData + 4 >> 2] | 0) {
   $vbFd$0$i = (HEAP32[$userData >> 2] | 0) == 1 ? HEAP32[75] | 0 : HEAP32[133] | 0;
   $293 = (HEAP32[$3 >> 2] & 61440 | 0) == 16384 ? 2603 : 6289;
   HEAP32[$vararg_buffer43 >> 2] = $0;
   HEAP32[$vararg_buffer43 + 4 >> 2] = $293;
   _fprintf($vbFd$0$i, 1872, $vararg_buffer43) | 0;
  }
  if (($inputFileFd$0 | 0) > -1) {
   $296 = $statbuf + 48 | 0;
   _bb_copyfd_exact_size($inputFileFd$0, HEAP32[$userData >> 2] | 0, HEAP32[$296 >> 2] | 0);
   _close($inputFileFd$0) | 0;
   $300 = 0 - (HEAP32[$296 >> 2] | 0) & 511;
   _memset(_bb_common_bufsiz1 | 0, 0, $300 | 0) | 0;
   _xwrite(HEAP32[$userData >> 2] | 0, _bb_common_bufsiz1, $300);
   $$0 = 1;
  } else $$0 = 1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i12 = 0, $$0$lcssa$i4 = 0, $$01$i = 0, $$02$i = 0, $$02$i8 = 0, $$03$i = 0, $$3$i = 0, $$lcssa$i = 0, $$lcssa$i11 = 0, $$lcssa291 = 0, $$lcssa294 = 0, $$lcssa297 = 0, $$lcssa311 = 0, $$lcssa314 = 0, $$lcssa317 = 0, $$lcssa332 = 0, $$pr$i = 0, $0 = 0, $101 = 0, $111 = 0, $115 = 0, $118 = 0, $12 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $151 = 0, $153 = 0, $154 = 0, $157 = 0, $158 = 0, $161 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $186 = 0, $193 = 0, $204 = 0, $205 = 0, $212 = 0, $214 = 0, $219 = 0, $221 = 0, $226 = 0, $23 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $48 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $69 = 0, $70 = 0, $8 = 0, $84 = 0, $9 = 0, $95 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i7 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa145$i = 0, $ip$0$ph78$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph57$i = 0, $jp$0$ph15$ph72$i = 0, $jp$0$ph1567$i = 0, $jp$0$ph1567$i$lcssa = 0, $jp$0$ph1567$i$lcssa$lcssa = 0, $jp$0$ph79$i = 0, $jp$1$ph11$ph51$i = 0, $jp$1$ph1146$i = 0, $jp$1$ph1146$i$lcssa = 0, $jp$1$ph1146$i$lcssa$lcssa = 0, $jp$1$ph58$i = 0, $k$061$i = 0, $k$141$i = 0, $k$340$i = 0, $k$340$i$lcssa = 0, $k$4$i = 0, $l$082$i = 0, $l$082$i$lcssa331 = 0, $mem$0$i = 0, $mem0$0$i = 0, $p$0$ph$ph$lcssa34$i = 0, $p$0$ph$ph$lcssa34146$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa25$i = 0, $p$1$ph$ph52$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $byteset$i = sp + 1024 | 0;
 $shift$i = sp;
 $0 = HEAP8[$n >> 0] | 0;
 do if (!($0 << 24 >> 24)) $$0 = $h; else {
  $3 = _strchr($h, $0 << 24 >> 24) | 0;
  if (!$3) $$0 = 0; else {
   $6 = HEAP8[$n + 1 >> 0] | 0;
   if (!($6 << 24 >> 24)) $$0 = $3; else {
    $8 = $3 + 1 | 0;
    $9 = HEAP8[$8 >> 0] | 0;
    if (!($9 << 24 >> 24)) $$0 = 0; else {
     $12 = HEAP8[$n + 2 >> 0] | 0;
     if (!($12 << 24 >> 24)) {
      $17 = $6 & 255 | ($0 & 255) << 8;
      $$01$i = $8;
      $233 = $9;
      $hw$0$in2$i = HEAPU8[$3 >> 0] << 8 | $9 & 255;
      while (1) {
       $23 = $hw$0$in2$i & 65535;
       if (($23 | 0) == ($17 | 0)) {
        $$0$lcssa$i = $$01$i;
        $31 = $233;
        break;
       }
       $26 = $$01$i + 1 | 0;
       $27 = HEAP8[$26 >> 0] | 0;
       if (!($27 << 24 >> 24)) {
        $$0$lcssa$i = $26;
        $31 = 0;
        break;
       } else {
        $$01$i = $26;
        $233 = $27;
        $hw$0$in2$i = $27 & 255 | $23 << 8;
       }
      }
      $$0 = $31 << 24 >> 24 ? $$0$lcssa$i + -1 | 0 : 0;
      break;
     }
     $35 = $3 + 2 | 0;
     $36 = HEAP8[$35 >> 0] | 0;
     if (!($36 << 24 >> 24)) $$0 = 0; else {
      $39 = HEAP8[$n + 3 >> 0] | 0;
      if (!($39 << 24 >> 24)) {
       $48 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8;
       $57 = ($36 & 255) << 8 | ($9 & 255) << 16 | HEAPU8[$3 >> 0] << 24;
       if (($57 | 0) == ($48 | 0)) {
        $$0$lcssa$i4 = $35;
        $$lcssa$i = $36;
       } else {
        $$02$i = $35;
        $hw$03$i = $57;
        while (1) {
         $59 = $$02$i + 1 | 0;
         $60 = HEAP8[$59 >> 0] | 0;
         $63 = ($60 & 255 | $hw$03$i) << 8;
         if ($60 << 24 >> 24 == 0 | ($63 | 0) == ($48 | 0)) {
          $$0$lcssa$i4 = $59;
          $$lcssa$i = $60;
          break;
         } else {
          $$02$i = $59;
          $hw$03$i = $63;
         }
        }
       }
       $$0 = $$lcssa$i << 24 >> 24 ? $$0$lcssa$i4 + -2 | 0 : 0;
       break;
      }
      $69 = $3 + 3 | 0;
      $70 = HEAP8[$69 >> 0] | 0;
      if (!($70 << 24 >> 24)) $$0 = 0; else {
       if (!(HEAP8[$n + 4 >> 0] | 0)) {
        $84 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8 | $39 & 255;
        $95 = ($36 & 255) << 8 | ($9 & 255) << 16 | $70 & 255 | HEAPU8[$3 >> 0] << 24;
        if (($95 | 0) == ($84 | 0)) {
         $$0$lcssa$i12 = $69;
         $$lcssa$i11 = $70;
        } else {
         $$02$i8 = $69;
         $hw$03$i7 = $95;
         while (1) {
          $98 = $$02$i8 + 1 | 0;
          $99 = HEAP8[$98 >> 0] | 0;
          $101 = $99 & 255 | $hw$03$i7 << 8;
          if ($99 << 24 >> 24 == 0 | ($101 | 0) == ($84 | 0)) {
           $$0$lcssa$i12 = $98;
           $$lcssa$i11 = $99;
           break;
          } else {
           $$02$i8 = $98;
           $hw$03$i7 = $101;
          }
         }
        }
        $$0 = $$lcssa$i11 << 24 >> 24 ? $$0$lcssa$i12 + -3 | 0 : 0;
        break;
       };
       HEAP32[$byteset$i >> 2] = 0;
       HEAP32[$byteset$i + 4 >> 2] = 0;
       HEAP32[$byteset$i + 8 >> 2] = 0;
       HEAP32[$byteset$i + 12 >> 2] = 0;
       HEAP32[$byteset$i + 16 >> 2] = 0;
       HEAP32[$byteset$i + 20 >> 2] = 0;
       HEAP32[$byteset$i + 24 >> 2] = 0;
       HEAP32[$byteset$i + 28 >> 2] = 0;
       $111 = $0;
       $l$082$i = 0;
       while (1) {
        if (!(HEAP8[$3 + $l$082$i >> 0] | 0)) {
         $$3$i = 0;
         break;
        }
        $115 = $byteset$i + ((($111 & 255) >>> 5 & 255) << 2) | 0;
        HEAP32[$115 >> 2] = HEAP32[$115 >> 2] | 1 << ($111 & 31);
        $118 = $l$082$i + 1 | 0;
        HEAP32[$shift$i + (($111 & 255) << 2) >> 2] = $118;
        $122 = HEAP8[$n + $118 >> 0] | 0;
        if (!($122 << 24 >> 24)) {
         $$lcssa332 = $118;
         $l$082$i$lcssa331 = $l$082$i;
         label = 23;
         break;
        } else {
         $111 = $122;
         $l$082$i = $118;
        }
       }
       L32 : do if ((label | 0) == 23) {
        L34 : do if ($$lcssa332 >>> 0 > 1) {
         $234 = 1;
         $ip$0$ph78$i = -1;
         $jp$0$ph79$i = 0;
         L35 : while (1) {
          $235 = $234;
          $jp$0$ph15$ph72$i = $jp$0$ph79$i;
          $p$0$ph$ph73$i = 1;
          while (1) {
           $236 = $235;
           $jp$0$ph1567$i = $jp$0$ph15$ph72$i;
           L39 : while (1) {
            $134 = $236;
            $k$061$i = 1;
            while (1) {
             $132 = HEAP8[$n + ($k$061$i + $ip$0$ph78$i) >> 0] | 0;
             $135 = HEAP8[$n + $134 >> 0] | 0;
             if ($132 << 24 >> 24 != $135 << 24 >> 24) {
              $$lcssa311 = $134;
              $$lcssa314 = $132;
              $$lcssa317 = $135;
              $jp$0$ph1567$i$lcssa = $jp$0$ph1567$i;
              break L39;
             }
             $128 = $k$061$i + 1 | 0;
             if (($k$061$i | 0) == ($p$0$ph$ph73$i | 0)) break;
             $127 = $128 + $jp$0$ph1567$i | 0;
             if ($127 >>> 0 < $$lcssa332 >>> 0) {
              $134 = $127;
              $k$061$i = $128;
             } else {
              $ip$0$ph$lcssa$i = $ip$0$ph78$i;
              $p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
              break L35;
             }
            }
            $138 = $jp$0$ph1567$i + $p$0$ph$ph73$i | 0;
            $139 = $138 + 1 | 0;
            if ($139 >>> 0 < $$lcssa332 >>> 0) {
             $236 = $139;
             $jp$0$ph1567$i = $138;
            } else {
             $ip$0$ph$lcssa$i = $ip$0$ph78$i;
             $p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
             break L35;
            }
           }
           $142 = $$lcssa311 - $ip$0$ph78$i | 0;
           if (($$lcssa314 & 255) <= ($$lcssa317 & 255)) {
            $jp$0$ph1567$i$lcssa$lcssa = $jp$0$ph1567$i$lcssa;
            break;
           }
           $125 = $$lcssa311 + 1 | 0;
           if ($125 >>> 0 < $$lcssa332 >>> 0) {
            $235 = $125;
            $jp$0$ph15$ph72$i = $$lcssa311;
            $p$0$ph$ph73$i = $142;
           } else {
            $ip$0$ph$lcssa$i = $ip$0$ph78$i;
            $p$0$ph$ph$lcssa34$i = $142;
            break L35;
           }
          }
          $144 = $jp$0$ph1567$i$lcssa$lcssa + 2 | 0;
          if ($144 >>> 0 < $$lcssa332 >>> 0) {
           $234 = $144;
           $ip$0$ph78$i = $jp$0$ph1567$i$lcssa$lcssa;
           $jp$0$ph79$i = $jp$0$ph1567$i$lcssa$lcssa + 1 | 0;
          } else {
           $ip$0$ph$lcssa$i = $jp$0$ph1567$i$lcssa$lcssa;
           $p$0$ph$ph$lcssa34$i = 1;
           break;
          }
         }
         $237 = 1;
         $ip$1$ph57$i = -1;
         $jp$1$ph58$i = 0;
         while (1) {
          $239 = $237;
          $jp$1$ph11$ph51$i = $jp$1$ph58$i;
          $p$1$ph$ph52$i = 1;
          while (1) {
           $238 = $239;
           $jp$1$ph1146$i = $jp$1$ph11$ph51$i;
           L54 : while (1) {
            $153 = $238;
            $k$141$i = 1;
            while (1) {
             $151 = HEAP8[$n + ($k$141$i + $ip$1$ph57$i) >> 0] | 0;
             $154 = HEAP8[$n + $153 >> 0] | 0;
             if ($151 << 24 >> 24 != $154 << 24 >> 24) {
              $$lcssa291 = $153;
              $$lcssa294 = $151;
              $$lcssa297 = $154;
              $jp$1$ph1146$i$lcssa = $jp$1$ph1146$i;
              break L54;
             }
             $147 = $k$141$i + 1 | 0;
             if (($k$141$i | 0) == ($p$1$ph$ph52$i | 0)) break;
             $146 = $147 + $jp$1$ph1146$i | 0;
             if ($146 >>> 0 < $$lcssa332 >>> 0) {
              $153 = $146;
              $k$141$i = $147;
             } else {
              $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;
              $ip$1$ph$lcssa$i = $ip$1$ph57$i;
              $p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;
              $p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
              break L34;
             }
            }
            $157 = $jp$1$ph1146$i + $p$1$ph$ph52$i | 0;
            $158 = $157 + 1 | 0;
            if ($158 >>> 0 < $$lcssa332 >>> 0) {
             $238 = $158;
             $jp$1$ph1146$i = $157;
            } else {
             $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;
             $ip$1$ph$lcssa$i = $ip$1$ph57$i;
             $p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;
             $p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
             break L34;
            }
           }
           $161 = $$lcssa291 - $ip$1$ph57$i | 0;
           if (($$lcssa294 & 255) >= ($$lcssa297 & 255)) {
            $jp$1$ph1146$i$lcssa$lcssa = $jp$1$ph1146$i$lcssa;
            break;
           }
           $165 = $$lcssa291 + 1 | 0;
           if ($165 >>> 0 < $$lcssa332 >>> 0) {
            $239 = $165;
            $jp$1$ph11$ph51$i = $$lcssa291;
            $p$1$ph$ph52$i = $161;
           } else {
            $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;
            $ip$1$ph$lcssa$i = $ip$1$ph57$i;
            $p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;
            $p$1$ph$ph$lcssa25$i = $161;
            break L34;
           }
          }
          $163 = $jp$1$ph1146$i$lcssa$lcssa + 2 | 0;
          if ($163 >>> 0 < $$lcssa332 >>> 0) {
           $237 = $163;
           $ip$1$ph57$i = $jp$1$ph1146$i$lcssa$lcssa;
           $jp$1$ph58$i = $jp$1$ph1146$i$lcssa$lcssa + 1 | 0;
          } else {
           $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;
           $ip$1$ph$lcssa$i = $jp$1$ph1146$i$lcssa$lcssa;
           $p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;
           $p$1$ph$ph$lcssa25$i = 1;
           break;
          }
         }
        } else {
         $ip$0$ph$lcssa145$i = -1;
         $ip$1$ph$lcssa$i = -1;
         $p$0$ph$ph$lcssa34146$i = 1;
         $p$1$ph$ph$lcssa25$i = 1;
        } while (0);
        $169 = ($ip$1$ph$lcssa$i + 1 | 0) >>> 0 > ($ip$0$ph$lcssa145$i + 1 | 0) >>> 0;
        $p$1$p$0$i = $169 ? $p$1$ph$ph$lcssa25$i : $p$0$ph$ph$lcssa34146$i;
        $ip$1$ip$0$i = $169 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa145$i;
        $171 = $ip$1$ip$0$i + 1 | 0;
        if (!(_memcmp($n, $n + $p$1$p$0$i | 0, $171) | 0)) {
         $mem0$0$i = $$lcssa332 - $p$1$p$0$i | 0;
         $p$3$i = $p$1$p$0$i;
        } else {
         $175 = $$lcssa332 - $ip$1$ip$0$i + -1 | 0;
         $mem0$0$i = 0;
         $p$3$i = ($ip$1$ip$0$i >>> 0 > $175 >>> 0 ? $ip$1$ip$0$i : $175) + 1 | 0;
        }
        $179 = $$lcssa332 | 63;
        $180 = ($mem0$0$i | 0) != 0;
        $181 = $$lcssa332 - $p$3$i | 0;
        $$03$i = $3;
        $mem$0$i = 0;
        $z$0$i = $3;
        L69 : while (1) {
         $183 = $$03$i;
         do if (($z$0$i - $183 | 0) >>> 0 < $$lcssa332 >>> 0) {
          $186 = _memchr($z$0$i, 0, $179) | 0;
          if (!$186) {
           $z$3$i = $z$0$i + $179 | 0;
           break;
          } else if (($186 - $183 | 0) >>> 0 < $$lcssa332 >>> 0) {
           $$3$i = 0;
           break L32;
          } else {
           $z$3$i = $186;
           break;
          }
         } else $z$3$i = $z$0$i; while (0);
         $193 = HEAP8[$$03$i + $l$082$i$lcssa331 >> 0] | 0;
         if (!(1 << ($193 & 31) & HEAP32[$byteset$i + ((($193 & 255) >>> 5 & 255) << 2) >> 2])) {
          $$03$i = $$03$i + $$lcssa332 | 0;
          $mem$0$i = 0;
          $z$0$i = $z$3$i;
          continue;
         }
         $204 = HEAP32[$shift$i + (($193 & 255) << 2) >> 2] | 0;
         $205 = $$lcssa332 - $204 | 0;
         if (($$lcssa332 | 0) != ($204 | 0)) {
          $$03$i = $$03$i + ($180 & ($mem$0$i | 0) != 0 & $205 >>> 0 < $p$3$i >>> 0 ? $181 : $205) | 0;
          $mem$0$i = 0;
          $z$0$i = $z$3$i;
          continue;
         }
         $212 = $171 >>> 0 > $mem$0$i >>> 0 ? $171 : $mem$0$i;
         $214 = HEAP8[$n + $212 >> 0] | 0;
         L83 : do if (!($214 << 24 >> 24)) $k$4$i = $171; else {
          $$pr$i = $214;
          $k$340$i = $212;
          while (1) {
           if ($$pr$i << 24 >> 24 != (HEAP8[$$03$i + $k$340$i >> 0] | 0)) {
            $k$340$i$lcssa = $k$340$i;
            break;
           }
           $219 = $k$340$i + 1 | 0;
           $221 = HEAP8[$n + $219 >> 0] | 0;
           if (!($221 << 24 >> 24)) {
            $k$4$i = $171;
            break L83;
           } else {
            $$pr$i = $221;
            $k$340$i = $219;
           }
          }
          $$03$i = $$03$i + ($k$340$i$lcssa - $ip$1$ip$0$i) | 0;
          $mem$0$i = 0;
          $z$0$i = $z$3$i;
          continue L69;
         } while (0);
         while (1) {
          if ($k$4$i >>> 0 <= $mem$0$i >>> 0) {
           $$3$i = $$03$i;
           break L32;
          }
          $226 = $k$4$i + -1 | 0;
          if ((HEAP8[$n + $226 >> 0] | 0) == (HEAP8[$$03$i + $226 >> 0] | 0)) $k$4$i = $226; else break;
         }
         $$03$i = $$03$i + $p$3$i | 0;
         $mem$0$i = $mem0$0$i;
         $z$0$i = $z$3$i;
        }
       } while (0);
       $$0 = $$3$i;
      }
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $208 = 0, $211 = 0, $212 = 0, $218 = 0, $23 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $263 = 0, $268 = 0, $27 = 0, $274 = 0, $278 = 0, $279 = 0, $297 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $316 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[1448] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $15 = $1 + (0 - $12) | 0;
  $16 = $12 + $8 | 0;
  if ($15 >>> 0 < $2 >>> 0) _abort();
  if (($15 | 0) == (HEAP32[1449] | 0)) {
   $104 = $9 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   HEAP32[1446] = $16;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$15 + 4 >> 2] = $16 | 1;
   HEAP32[$15 + $16 >> 2] = $16;
   return;
  }
  $20 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $23 = HEAP32[$15 + 8 >> 2] | 0;
   $25 = HEAP32[$15 + 12 >> 2] | 0;
   $27 = 5816 + ($20 << 1 << 2) | 0;
   if (($23 | 0) != ($27 | 0)) {
    if ($23 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$23 + 12 >> 2] | 0) != ($15 | 0)) _abort();
   }
   if (($25 | 0) == ($23 | 0)) {
    HEAP32[1444] = HEAP32[1444] & ~(1 << $20);
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   if (($25 | 0) == ($27 | 0)) $$pre$phi43Z2D = $25 + 8 | 0; else {
    if ($25 >>> 0 < $2 >>> 0) _abort();
    $40 = $25 + 8 | 0;
    if ((HEAP32[$40 >> 2] | 0) == ($15 | 0)) $$pre$phi43Z2D = $40; else _abort();
   }
   HEAP32[$23 + 12 >> 2] = $25;
   HEAP32[$$pre$phi43Z2D >> 2] = $23;
   $p$1 = $15;
   $psize$1 = $16;
   break;
  }
  $45 = HEAP32[$15 + 24 >> 2] | 0;
  $47 = HEAP32[$15 + 12 >> 2] | 0;
  do if (($47 | 0) == ($15 | 0)) {
   $58 = $15 + 16 | 0;
   $59 = $58 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if (!$60) {
    $62 = HEAP32[$58 >> 2] | 0;
    if (!$62) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $62;
     $RP$1 = $58;
    }
   } else {
    $R$1 = $60;
    $RP$1 = $59;
   }
   while (1) {
    $64 = $R$1 + 20 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65 | 0) {
     $R$1 = $65;
     $RP$1 = $64;
     continue;
    }
    $67 = $R$1 + 16 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    if (!$68) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $68;
     $RP$1 = $67;
    }
   }
   if ($RP$1$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $50 = HEAP32[$15 + 8 >> 2] | 0;
   if ($50 >>> 0 < $2 >>> 0) _abort();
   $52 = $50 + 12 | 0;
   if ((HEAP32[$52 >> 2] | 0) != ($15 | 0)) _abort();
   $55 = $47 + 8 | 0;
   if ((HEAP32[$55 >> 2] | 0) == ($15 | 0)) {
    HEAP32[$52 >> 2] = $47;
    HEAP32[$55 >> 2] = $50;
    $R$3 = $47;
    break;
   } else _abort();
  } while (0);
  if (!$45) {
   $p$1 = $15;
   $psize$1 = $16;
  } else {
   $73 = HEAP32[$15 + 28 >> 2] | 0;
   $74 = 6080 + ($73 << 2) | 0;
   if (($15 | 0) == (HEAP32[$74 >> 2] | 0)) {
    HEAP32[$74 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1445] = HEAP32[1445] & ~(1 << $73);
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   } else {
    if ($45 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $83 = $45 + 16 | 0;
    if ((HEAP32[$83 >> 2] | 0) == ($15 | 0)) HEAP32[$83 >> 2] = $R$3; else HEAP32[$45 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   }
   $88 = HEAP32[1448] | 0;
   if ($R$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $45;
   $91 = $15 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92 | 0) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $p$1 = $15;
    $psize$1 = $16;
   } else if ($98 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$3;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
  }
 } else {
  $p$1 = $1;
  $psize$1 = $8;
 } while (0);
 if ($p$1 >>> 0 >= $9 >>> 0) _abort();
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[1450] | 0)) {
   $122 = (HEAP32[1447] | 0) + $psize$1 | 0;
   HEAP32[1447] = $122;
   HEAP32[1450] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $122 | 1;
   if (($p$1 | 0) != (HEAP32[1449] | 0)) return;
   HEAP32[1449] = 0;
   HEAP32[1446] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[1449] | 0)) {
   $130 = (HEAP32[1446] | 0) + $psize$1 | 0;
   HEAP32[1446] = $130;
   HEAP32[1449] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $130 | 1;
   HEAP32[$p$1 + $130 >> 2] = $130;
   return;
  }
  $135 = ($114 & -8) + $psize$1 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$9 + 8 >> 2] | 0;
   $141 = HEAP32[$9 + 12 >> 2] | 0;
   $143 = 5816 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[1444] = HEAP32[1444] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi41Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi41Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi41Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$9 + 24 >> 2] | 0;
   $165 = HEAP32[$9 + 12 >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $9 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $R8$3 = 0;
      break;
     } else {
      $R8$1 = $181;
      $RP10$1 = $177;
     }
    } else {
     $R8$1 = $179;
     $RP10$1 = $178;
    }
    while (1) {
     $183 = $R8$1 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184 | 0) {
      $R8$1 = $184;
      $RP10$1 = $183;
      continue;
     }
     $186 = $R8$1 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $R8$1$lcssa = $R8$1;
      $RP10$1$lcssa = $RP10$1;
      break;
     } else {
      $R8$1 = $187;
      $RP10$1 = $186;
     }
    }
    if ($RP10$1$lcssa >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
     HEAP32[$RP10$1$lcssa >> 2] = 0;
     $R8$3 = $R8$1$lcssa;
     break;
    }
   } else {
    $168 = HEAP32[$9 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R8$3 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163 | 0) {
    $193 = HEAP32[$9 + 28 >> 2] | 0;
    $194 = 6080 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R8$3;
     if (!$R8$3) {
      HEAP32[1445] = HEAP32[1445] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R8$3; else HEAP32[$163 + 20 >> 2] = $R8$3;
     if (!$R8$3) break;
    }
    $208 = HEAP32[1448] | 0;
    if ($R8$3 >>> 0 < $208 >>> 0) _abort();
    HEAP32[$R8$3 + 24 >> 2] = $163;
    $211 = $9 + 16 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    do if ($212 | 0) if ($212 >>> 0 < $208 >>> 0) _abort(); else {
     HEAP32[$R8$3 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R8$3;
     break;
    } while (0);
    $218 = HEAP32[$211 + 4 >> 2] | 0;
    if ($218 | 0) if ($218 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
     HEAP32[$R8$3 + 20 >> 2] = $218;
     HEAP32[$218 + 24 >> 2] = $R8$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $135 | 1;
  HEAP32[$p$1 + $135 >> 2] = $135;
  if (($p$1 | 0) == (HEAP32[1449] | 0)) {
   HEAP32[1446] = $135;
   return;
  } else $psize$2 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$p$1 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $236 = 5816 + ($233 << 1 << 2) | 0;
  $237 = HEAP32[1444] | 0;
  $238 = 1 << $233;
  if (!($237 & $238)) {
   HEAP32[1444] = $237 | $238;
   $$pre$phiZ2D = $236 + 8 | 0;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   if ($243 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F18$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F18$0;
  HEAP32[$p$1 + 12 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 if (!$249) $I20$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $254 = ($249 + 1048320 | 0) >>> 16 & 8;
  $255 = $249 << $254;
  $258 = ($255 + 520192 | 0) >>> 16 & 4;
  $260 = $255 << $258;
  $263 = ($260 + 245760 | 0) >>> 16 & 2;
  $268 = 14 - ($258 | $254 | $263) + ($260 << $263 >>> 15) | 0;
  $I20$0 = $psize$2 >>> ($268 + 7 | 0) & 1 | $268 << 1;
 }
 $274 = 6080 + ($I20$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I20$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $278 = HEAP32[1445] | 0;
 $279 = 1 << $I20$0;
 do if (!($278 & $279)) {
  HEAP32[1445] = $278 | $279;
  HEAP32[$274 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $274;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K21$0 = $psize$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
  $T$0 = HEAP32[$274 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    $T$0$lcssa = $T$0;
    label = 130;
    break;
   }
   $297 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
   $299 = HEAP32[$297 >> 2] | 0;
   if (!$299) {
    $$lcssa = $297;
    $T$0$lcssa48 = $T$0;
    label = 127;
    break;
   } else {
    $K21$0 = $K21$0 << 1;
    $T$0 = $299;
   }
  }
  if ((label | 0) == 127) if ($$lcssa >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
   HEAP32[$$lcssa >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0$lcssa48;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 130) {
   $306 = $T$0$lcssa + 8 | 0;
   $307 = HEAP32[$306 >> 2] | 0;
   $308 = HEAP32[1448] | 0;
   if ($307 >>> 0 >= $308 >>> 0 & $T$0$lcssa >>> 0 >= $308 >>> 0) {
    HEAP32[$307 + 12 >> 2] = $p$1;
    HEAP32[$306 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $307;
    HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $316 = (HEAP32[1452] | 0) + -1 | 0;
 HEAP32[1452] = $316;
 if (!$316) $sp$0$in$i = 6232; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[1452] = -1;
 return;
}

function _get_header_tar($archive_handle) {
 $archive_handle = $archive_handle | 0;
 var $$0 = 0, $$04$i = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa219 = 0, $$lcssa227 = 0, $1 = 0, $10 = 0, $103 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $183 = 0, $19 = 0, $192 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $205 = 0, $208 = 0, $21 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $9 = 0, $end$i = 0, $i$0122 = 0, $i$1125 = 0, $p$0$i = 0, $storemerge = 0, $sum_s$0120 = 0, $sum_s$1123 = 0, $sum_u$0121 = 0, $sum_u$1124 = 0, $sz$0126 = 0, $tar = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $end$i = sp + 576 | 0;
 $tar = sp + 64 | 0;
 $1 = HEAP32[$archive_handle + 24 >> 2] | 0;
 $2 = $archive_handle + 4 | 0;
 $3 = $archive_handle + 40 | 0;
 $4 = $tar + 345 | 0;
 $5 = $archive_handle + 52 | 0;
 $6 = $archive_handle + 48 | 0;
 $7 = $tar + 257 | 0;
 $8 = $tar + 148 | 0;
 $9 = $tar + 156 | 0;
 $10 = $tar + 329 | 0;
 $11 = $1 + 4 | 0;
 $12 = $archive_handle + 56 | 0;
 $13 = $tar + 157 | 0;
 $14 = $tar + 265 | 0;
 $15 = $1 + 8 | 0;
 $16 = $tar + 297 | 0;
 $17 = $1 + 12 | 0;
 $18 = $tar + 136 | 0;
 $19 = $1 + 32 | 0;
 $20 = $tar + 124 | 0;
 $21 = $1 + 16 | 0;
 $22 = $tar + 116 | 0;
 $23 = $1 + 24 | 0;
 $24 = $tar + 108 | 0;
 $25 = $1 + 20 | 0;
 $26 = $tar + 100 | 0;
 $27 = $1 + 28 | 0;
 $28 = $tar + 500 | 0;
 $29 = $tar + 337 | 0;
 $30 = $1 + 36 | 0;
 L1 : while (1) {
  _data_align($archive_handle, 512);
  L3 : while (1) {
   HEAP32[$tar >> 2] = 0;
   switch (_full_read(HEAP32[$2 >> 2] | 0, $tar, 512) | 0) {
   case 0:
    {
     label = 4;
     break L1;
     break;
    }
   case 512:
    break;
   default:
    {
     label = 6;
     break L1;
    }
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 512;
   if (!((HEAP8[$tar >> 0] | HEAP8[$4 >> 0]) << 24 >> 24)) if (!(HEAP32[$5 >> 2] | 0)) {
    label = 9;
    break L1;
   }
   HEAP32[$6 >> 2] = 0;
   if (!(_is_prefixed_with($7, 2295) | 0)) if (!(_memcmp($7, 6284, 5) | 0)) {
    $i$0122 = 0;
    $sum_s$0120 = 256;
    $sum_u$0121 = 256;
   } else {
    label = 14;
    break L1;
   } else {
    $i$0122 = 0;
    $sum_s$0120 = 256;
    $sum_u$0121 = 256;
   }
   while (1) {
    $53 = HEAP8[$tar + $i$0122 >> 0] | 0;
    $55 = ($53 & 255) + $sum_u$0121 | 0;
    $57 = ($53 << 24 >> 24) + $sum_s$0120 | 0;
    $58 = $i$0122 + 1 | 0;
    if (($58 | 0) == 148) {
     $i$1125 = 156;
     $sum_s$1123 = $57;
     $sum_u$1124 = $55;
     break;
    } else {
     $i$0122 = $58;
     $sum_s$0120 = $57;
     $sum_u$0121 = $55;
    }
   }
   while (1) {
    $60 = HEAP8[$tar + $i$1125 >> 0] | 0;
    $62 = ($60 & 255) + $sum_u$1124 | 0;
    $64 = ($60 << 24 >> 24) + $sum_s$1123 | 0;
    $65 = $i$1125 + 1 | 0;
    if (($65 | 0) == 512) {
     $$lcssa215 = $62;
     $$lcssa216 = $64;
     break;
    } else {
     $i$1125 = $65;
     $sum_s$1123 = $64;
     $sum_u$1124 = $62;
    }
   }
   $66 = _strtoul($8, $end$i, 8) | 0;
   switch (HEAP8[HEAP32[$end$i >> 2] >> 0] | 0) {
   case 32:
   case 0:
    break;
   default:
    {
     label = 19;
     break L1;
    }
   }
   if (!(($$lcssa215 | 0) == ($66 | 0) | ($$lcssa216 | 0) == ($66 | 0))) {
    label = 19;
    break L1;
   }
   $71 = _strtoul($8, 0, 8) | 0;
   if (!(($$lcssa215 | 0) == ($71 | 0) | ($$lcssa216 | 0) == ($71 | 0))) {
    label = 21;
    break L1;
   }
   $74 = HEAP8[$9 >> 0] | 0;
   if (!($74 << 24 >> 24)) {
    HEAP8[$9 >> 0] = 48;
    $77 = 48;
   } else $77 = $74;
   $78 = ($77 & -8) << 24 >> 24 == 48;
   if (HEAP8[$10 >> 0] | 0) {
    $81 = HEAP8[$4 >> 0] | 0;
    $82 = _getOctal($29, 8) | 0;
    $83 = tempRet0;
    $84 = _getOctal($10, 8) | 0;
    $86 = _bitshift64Shl($84 | 0, tempRet0 | 0, 8) | 0;
    $89 = _bitshift64Shl($82 | 0, $83 | 0, 12) | 0;
    HEAP32[$30 >> 2] = $89 & -1048576 | $82 & 255 | $86 & 1048320;
    HEAP8[$4 >> 0] = $81;
   }
   HEAP32[$11 >> 2] = 0;
   if (!((HEAP8[$13 >> 0] | 0) == 0 | $78 & (HEAP32[$12 >> 2] | 0) == 0 ^ 1)) HEAP32[$11 >> 2] = _xstrndup($13, 100) | 0;
   if (!(HEAP8[$14 >> 0] | 0)) $103 = 0; else $103 = _xstrndup($14, 32) | 0;
   HEAP32[$15 >> 2] = $103;
   if (!(HEAP8[$16 >> 0] | 0)) $107 = 0; else $107 = _xstrndup($16, 32) | 0;
   HEAP32[$17 >> 2] = $107;
   $108 = _getOctal($18, 12) | 0;
   HEAP32[$19 >> 2] = $108;
   $110 = _getOctal($20, 12) | 0;
   HEAP32[$21 >> 2] = $110;
   $112 = _getOctal($22, 8) | 0;
   HEAP32[$23 >> 2] = $112;
   $114 = _getOctal($24, 8) | 0;
   HEAP32[$25 >> 2] = $114;
   $116 = _getOctal($26, 8) | 0;
   HEAP32[$27 >> 2] = $116 & 4095;
   HEAP32[$1 >> 2] = 0;
   do if ($78 & (HEAP32[$5 >> 2] | 0) == 0) {
    HEAP8[$26 >> 0] = 0;
    if (!(HEAP8[$4 >> 0] | 0)) {
     $124 = _xstrdup($tar) | 0;
     HEAP32[$1 >> 2] = $124;
     $244 = $124;
     break;
    } else {
     HEAP8[$28 >> 0] = 0;
     $123 = _concat_path_file($4, $tar) | 0;
     HEAP32[$1 >> 2] = $123;
     $244 = $123;
     break;
    }
   } else $244 = 0; while (0);
   $125 = HEAP8[$9 >> 0] | 0;
   $126 = $125 << 24 >> 24;
   switch ($126 | 0) {
   case 49:
    {
     label = 37;
     break L1;
     break;
    }
   case 48:
   case 55:
    {
     $$lcssa219 = $244;
     label = 38;
     break L1;
     break;
    }
   case 50:
    {
     label = 40;
     break L1;
     break;
    }
   case 51:
    {
     label = 42;
     break L1;
     break;
    }
   case 52:
    {
     label = 43;
     break L1;
     break;
    }
   case 53:
    {
     label = 44;
     break L1;
     break;
    }
   case 54:
    {
     label = 45;
     break L1;
     break;
    }
   case 76:
    {
     label = 60;
     break L3;
     break;
    }
   case 75:
    {
     label = 62;
     break L3;
     break;
    }
   case 120:
   case 103:
    break;
   default:
    {
     $$lcssa227 = $126;
     label = 65;
     break L1;
    }
   }
   $143 = HEAP32[$21 >> 2] | 0;
   if ($143 >>> 0 > 1048575) {
    HEAP32[$vararg_buffer11 >> 2] = $126;
    _bb_error_msg(2434, $vararg_buffer11);
    $199 = (HEAP32[$21 >> 2] | 0) + 511 | 0;
    HEAP32[$3 >> 2] = ($199 & -512) + (HEAP32[$3 >> 2] | 0);
    $203 = $199 >> 9;
    if (!$203) continue; else $sz$0126 = $203;
    while (1) {
     $205 = $sz$0126 + -1 | 0;
     _xread(HEAP32[$2 >> 2] | 0, $tar, 512);
     if (!$205) continue L3; else $sz$0126 = $205;
    }
   }
   $146 = $143 + 511 & -512;
   $148 = _xmalloc($146 | 1) | 0;
   _xread(HEAP32[$2 >> 2] | 0, $148, $146);
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $146;
   HEAP8[$148 + $143 >> 0] = 0;
   L46 : do if ($143 | 0) {
    $153 = $125 << 24 >> 24 == 103;
    $$04$i = $143;
    $p$0$i = $148;
    while (1) {
     $154 = _bb_strtoul($p$0$i, $end$i, 10) | 0;
     $155 = $p$0$i + $154 | 0;
     $156 = $$04$i - $154 | 0;
     if (($154 | 0) == 0 | ($156 | $154 | 0) < 0) break;
     if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 22) break;
     if ((HEAP8[HEAP32[$end$i >> 2] >> 0] | 0) != 32) break;
     HEAP8[$155 + -1 >> 0] = 0;
     $167 = HEAP32[$end$i >> 2] | 0;
     $168 = $167 + 1 | 0;
     do if (!$153) {
      if (_is_prefixed_with($168, 2418) | 0) {
       _free(HEAP32[$5 >> 2] | 0);
       HEAP32[$5 >> 2] = _xstrdup($167 + 6 | 0) | 0;
       break;
      }
      if (!(_is_prefixed_with($168, 2424) | 0)) break;
      _free(HEAP32[$12 >> 2] | 0);
      HEAP32[$12 >> 2] = _xstrdup($167 + 10 | 0) | 0;
     } while (0);
     if (($$04$i | 0) == ($154 | 0)) break L46; else {
      $$04$i = $156;
      $p$0$i = $155;
     }
    }
    _bb_error_msg(2383, $vararg_buffer9);
   } while (0);
   _free($148);
  }
  if ((label | 0) == 60) {
   label = 0;
   _free(HEAP32[$5 >> 2] | 0);
   $183 = _xzalloc((HEAP32[$21 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[$5 >> 2] = $183;
   _xread(HEAP32[$2 >> 2] | 0, $183, HEAP32[$21 >> 2] | 0);
   $storemerge = (HEAP32[$3 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) | 0;
  } else if ((label | 0) == 62) {
   label = 0;
   _free(HEAP32[$12 >> 2] | 0);
   $192 = _xzalloc((HEAP32[$21 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[$12 >> 2] = $192;
   _xread(HEAP32[$2 >> 2] | 0, $192, HEAP32[$21 >> 2] | 0);
   $storemerge = (HEAP32[$3 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) | 0;
  }
  HEAP32[$3 >> 2] = $storemerge;
 }
 switch (label | 0) {
 case 4:
  {
   if (!(HEAP32[$3 >> 2] | 0)) {
    _bb_error_msg(2727, $vararg_buffer);
    $$0 = 1;
   } else $$0 = 1;
   break;
  }
 case 6:
  {
   _bb_error_msg_and_die(2727, $vararg_buffer1);
   break;
  }
 case 9:
  {
   if (!(HEAP32[$6 >> 2] | 0)) {
    HEAP32[$6 >> 2] = 1;
    $$0 = 0;
    break;
   } else {
    do {} while ((_full_read(HEAP32[$2 >> 2] | 0, $tar, 512) | 0) == 512);
    $$0 = 1;
   }
   break;
  }
 case 14:
  {
   _bb_error_msg_and_die(2301, $vararg_buffer3);
   break;
  }
 case 19:
  {
   _bb_error_msg_and_die(2319, $vararg_buffer5);
   break;
  }
 case 21:
  {
   _bb_error_msg_and_die(2319, $vararg_buffer7);
   break;
  }
 case 37:
  {
   HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 32768;
   label = 41;
   break;
  }
 case 38:
  {
   if (!(_last_char_is($$lcssa219, 47) | 0)) {
    HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 32768;
    label = 66;
   } else label = 44;
   break;
  }
 case 40:
  {
   HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 40960;
   label = 41;
   break;
  }
 case 42:
  {
   HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 8192;
   label = 41;
   break;
  }
 case 43:
  {
   HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 24576;
   label = 41;
   break;
  }
 case 45:
  {
   HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 4096;
   label = 41;
   break;
  }
 case 65:
  {
   HEAP32[$vararg_buffer13 >> 2] = $$lcssa227;
   _bb_error_msg_and_die(2464, $vararg_buffer13);
   break;
  }
 }
 if ((label | 0) == 44) {
  HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 16384;
  label = 41;
 }
 if ((label | 0) == 41) {
  HEAP32[$21 >> 2] = 0;
  label = 66;
 }
 if ((label | 0) == 66) {
  $208 = HEAP32[$5 >> 2] | 0;
  if ($208 | 0) {
   HEAP32[$1 >> 2] = $208;
   HEAP32[$5 >> 2] = 0;
  }
  $210 = HEAP32[$12 >> 2] | 0;
  if ($210 | 0) {
   HEAP32[$11 >> 2] = $210;
   HEAP32[$12 >> 2] = 0;
  }
  $212 = HEAP32[$1 >> 2] | 0;
  _overlapping_strcpy($212, _strip_unsafe_prefix($212) | 0);
  $215 = _last_char_is(HEAP32[$1 >> 2] | 0, 47) | 0;
  do if (!((FUNCTION_TABLE_ii[HEAP32[$archive_handle + 8 >> 2] & 7]($archive_handle) | 0) << 24 >> 24)) {
   FUNCTION_TABLE_vi[HEAP32[$archive_handle + 28 >> 2] & 15]($1);
   if ($215 | 0) HEAP8[$215 >> 0] = 0;
   FUNCTION_TABLE_vi[HEAP32[$archive_handle + 32 >> 2] & 15]($archive_handle);
   if (!(HEAP32[$archive_handle + 12 >> 2] | 0)) if (!(HEAP32[$archive_handle + 16 >> 2] | 0)) if (!(HEAP32[$archive_handle >> 2] & 512)) {
    _free(HEAP32[$1 >> 2] | 0);
    break;
   }
   _llist_add_to($archive_handle + 20 | 0, HEAP32[$1 >> 2] | 0);
  } else {
   _data_skip($archive_handle);
   _free(HEAP32[$1 >> 2] | 0);
  } while (0);
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + (HEAP32[$21 >> 2] | 0);
  _free(HEAP32[$11 >> 2] | 0);
  _free(HEAP32[$15 >> 2] | 0);
  _free(HEAP32[$17 >> 2] | 0);
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $176 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $196 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $232 = 0, $239 = 0, $25 = 0, $259 = 0, $261 = 0, $272 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $79 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $286 = 0;
  $287 = 0;
 } else {
  $3 = $f + 4 | 0;
  $4 = $f + 100 | 0;
  do {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $6 + 1;
    $13 = HEAPU8[$6 >> 0] | 0;
   } else $13 = ___shgetc($f) | 0;
  } while ((_isspace($13) | 0) != 0);
  $$lcssa113 = $13;
  L11 : do switch ($$lcssa113 | 0) {
  case 43:
  case 45:
   {
    $17 = (($$lcssa113 | 0) == 45) << 31 >> 31;
    $18 = HEAP32[$3 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $18 + 1;
     $c$0 = HEAPU8[$18 >> 0] | 0;
     $neg$0 = $17;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $17;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa113;
    $neg$0 = 0;
   }
  } while (0);
  $25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else $37 = ___shgetc($f) | 0;
   if (($37 | 32 | 0) != 120) if ($25) {
    $$116 = 8;
    $c$117 = $37;
    label = 46;
    break;
   } else {
    $$1 = $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $47 = HEAPU8[$39 >> 0] | 0;
   } else $47 = ___shgetc($f) | 0;
   if ((HEAPU8[2890 + $47 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $286 = 0;
     $287 = 0;
     break L1;
    }
    if ($51) {
     $286 = 0;
     $287 = 0;
     break L1;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $286 = 0;
    $287 = 0;
    break L1;
   } else {
    $$116 = 16;
    $c$117 = $47;
    label = 46;
   }
  } else {
   $$base14 = $25 ? 10 : $base;
   if ((HEAPU8[2890 + $c$0 >> 0] | 0) >>> 0 < $$base14 >>> 0) {
    $$1 = $$base14;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    ___shlim($f, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $286 = 0;
    $287 = 0;
    break L1;
   }
  } while (0);
  if ((label | 0) == 32) if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $71 = $67;
    $x$070 = 0;
    while (1) {
     $70 = ($x$070 * 10 | 0) + $71 | 0;
     $72 = HEAP32[$3 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $72 + 1;
      $c$2$be = HEAPU8[$72 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $79 = $c$2$be + -48 | 0;
     if ($79 >>> 0 < 10 & $70 >>> 0 < 429496729) {
      $71 = $79;
      $x$070 = $70;
     } else {
      $$lcssa112 = $70;
      $c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $288 = $$lcssa112;
    $289 = 0;
    $c$2$lcssa = $c$2$be$lcssa;
   } else {
    $288 = 0;
    $289 = 0;
    $c$2$lcssa = $c$1;
   }
   $83 = $c$2$lcssa + -48 | 0;
   if ($83 >>> 0 < 10) {
    $85 = $288;
    $86 = $289;
    $89 = $83;
    $c$359 = $c$2$lcssa;
    while (1) {
     $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
     $88 = tempRet0;
     $91 = (($89 | 0) < 0) << 31 >> 31;
     $93 = ~$91;
     if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$89 >>> 0) {
      $$lcssa = $89;
      $290 = $85;
      $291 = $86;
      $c$3$lcssa = $c$359;
      break;
     }
     $99 = _i64Add($87 | 0, $88 | 0, $89 | 0, $91 | 0) | 0;
     $100 = tempRet0;
     $101 = HEAP32[$3 >> 2] | 0;
     if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $101 + 1;
      $c$3$be = HEAPU8[$101 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $108 = $c$3$be + -48 | 0;
     if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
      $85 = $99;
      $86 = $100;
      $89 = $108;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $108;
      $290 = $99;
      $291 = $100;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $259 = $291;
     $261 = $290;
     $neg$1 = $neg$0;
    } else {
     $$115 = 10;
     $292 = $290;
     $293 = $291;
     $c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $259 = $289;
    $261 = $288;
    $neg$1 = $neg$0;
   }
  } else {
   $$116 = $$1;
   $c$117 = $c$1;
   label = 46;
  }
  L63 : do if ((label | 0) == 46) {
   if (!($$116 + -1 & $$116)) {
    $128 = HEAP8[3146 + (($$116 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[2890 + $c$117 >> 0] | 0;
    $131 = $130 & 255;
    if ($131 >>> 0 < $$116 >>> 0) {
     $135 = $131;
     $x$136 = 0;
     while (1) {
      $134 = $135 | $x$136 << $128;
      $136 = HEAP32[$3 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $136 + 1;
       $c$4$be = HEAPU8[$136 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $144 = HEAP8[2890 + $c$4$be >> 0] | 0;
      $145 = $144 & 255;
      if ($134 >>> 0 < 134217728 & $145 >>> 0 < $$116 >>> 0) {
       $135 = $145;
       $x$136 = $134;
      } else {
       $$lcssa108 = $134;
       $$lcssa109 = $144;
       $c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $152 = $$lcssa109;
     $154 = 0;
     $156 = $$lcssa108;
     $c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;
     $154 = 0;
     $156 = 0;
     $c$4$lcssa = $c$117;
    }
    $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $150 = tempRet0;
    if (($152 & 255) >>> 0 >= $$116 >>> 0 | ($154 >>> 0 > $150 >>> 0 | ($154 | 0) == ($150 | 0) & $156 >>> 0 > $149 >>> 0)) {
     $$115 = $$116;
     $292 = $156;
     $293 = $154;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;
     $162 = $154;
     $166 = $152;
    }
    while (1) {
     $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
     $164 = tempRet0;
     $167 = $166 & 255 | $163;
     $168 = HEAP32[$3 >> 2] | 0;
     if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $168 + 1;
      $c$5$be = HEAPU8[$168 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $176 = HEAP8[2890 + $c$5$be >> 0] | 0;
     if (($176 & 255) >>> 0 >= $$116 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
      $$115 = $$116;
      $292 = $167;
      $293 = $164;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $161 = $167;
      $162 = $164;
      $166 = $176;
     }
    }
   }
   $120 = HEAP8[2890 + $c$117 >> 0] | 0;
   $121 = $120 & 255;
   if ($121 >>> 0 < $$116 >>> 0) {
    $186 = $121;
    $x$254 = 0;
    while (1) {
     $185 = $186 + (Math_imul($x$254, $$116) | 0) | 0;
     $187 = HEAP32[$3 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $187 + 1;
      $c$6$be = HEAPU8[$187 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $195 = HEAP8[2890 + $c$6$be >> 0] | 0;
     $196 = $195 & 255;
     if ($185 >>> 0 < 119304647 & $196 >>> 0 < $$116 >>> 0) {
      $186 = $196;
      $x$254 = $185;
     } else {
      $$lcssa110 = $185;
      $$lcssa111 = $195;
      $c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $201 = $$lcssa111;
    $294 = $$lcssa110;
    $295 = 0;
    $c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;
    $294 = 0;
    $295 = 0;
    $c$6$lcssa = $c$117;
   }
   if (($201 & 255) >>> 0 < $$116 >>> 0) {
    $203 = ___udivdi3(-1, -1, $$116 | 0, 0) | 0;
    $204 = tempRet0;
    $205 = $295;
    $207 = $294;
    $215 = $201;
    $c$742 = $c$6$lcssa;
    while (1) {
     if ($205 >>> 0 > $204 >>> 0 | ($205 | 0) == ($204 | 0) & $207 >>> 0 > $203 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $212 = ___muldi3($207 | 0, $205 | 0, $$116 | 0, 0) | 0;
     $213 = tempRet0;
     $214 = $215 & 255;
     if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
     $223 = tempRet0;
     $224 = HEAP32[$3 >> 2] | 0;
     if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $224 + 1;
      $c$7$be = HEAPU8[$224 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $232 = HEAP8[2890 + $c$7$be >> 0] | 0;
     if (($232 & 255) >>> 0 < $$116 >>> 0) {
      $205 = $223;
      $207 = $222;
      $215 = $232;
      $c$742 = $c$7$be;
     } else {
      $$115 = $$116;
      $292 = $222;
      $293 = $223;
      $c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$115 = $$116;
    $292 = $294;
    $293 = $295;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[2890 + $c$8 >> 0] | 0) >>> 0 < $$115 >>> 0) {
   do {
    $239 = HEAP32[$3 >> 2] | 0;
    if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $239 + 1;
     $c$9$be = HEAPU8[$239 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[2890 + $c$9$be >> 0] | 0) >>> 0 < $$115 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $259 = $1;
   $261 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $259 = $293;
   $261 = $292;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (!($259 >>> 0 < $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $286 = tempRet0;
    $287 = $272;
    break;
   }
   if ($259 >>> 0 > $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $286 = $1;
    $287 = $0;
    break;
   }
  }
  $281 = (($neg$1 | 0) < 0) << 31 >> 31;
  $284 = _i64Subtract($261 ^ $neg$1 | 0, $259 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0;
  $286 = tempRet0;
  $287 = $284;
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $124 = 0, $129 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $208 = 0, $22 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $258 = 0, $264 = 0, $268 = 0, $269 = 0, $287 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, label = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[1448] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[1449] | 0)) {
   $99 = $0 + 4 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$1 = $9;
    $$14 = $10;
    break;
   }
   HEAP32[1446] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$9 + 4 >> 2] = $10 | 1;
   HEAP32[$9 + $10 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$9 + 8 >> 2] | 0;
   $20 = HEAP32[$9 + 12 >> 2] | 0;
   $22 = 5816 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[1444] = HEAP32[1444] & ~(1 << $15);
    $$1 = $9;
    $$14 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi24Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi24Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi24Z2D >> 2] = $18;
   $$1 = $9;
   $$14 = $10;
   break;
  }
  $40 = HEAP32[$9 + 24 >> 2] | 0;
  $42 = HEAP32[$9 + 12 >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $53 = $9 + 16 | 0;
   $54 = $53 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   if (!$55) {
    $57 = HEAP32[$53 >> 2] | 0;
    if (!$57) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $57;
     $RP$1 = $53;
    }
   } else {
    $R$1 = $55;
    $RP$1 = $54;
   }
   while (1) {
    $59 = $R$1 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60 | 0) {
     $R$1 = $60;
     $RP$1 = $59;
     continue;
    }
    $62 = $R$1 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $63;
     $RP$1 = $62;
    }
   }
   if ($RP$1$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$9 + 8 >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$3 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$1 = $9;
   $$14 = $10;
  } else {
   $68 = HEAP32[$9 + 28 >> 2] | 0;
   $69 = 6080 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1445] = HEAP32[1445] & ~(1 << $68);
     $$1 = $9;
     $$14 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$3; else HEAP32[$40 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $$1 = $9;
     $$14 = $10;
     break;
    }
   }
   $83 = HEAP32[1448] | 0;
   if ($R$3 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $40;
   $86 = $9 + 16 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   do if ($87 | 0) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $93 = HEAP32[$86 + 4 >> 2] | 0;
   if (!$93) {
    $$1 = $9;
    $$14 = $10;
   } else if ($93 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$3;
    $$1 = $9;
    $$14 = $10;
    break;
   }
  }
 } else {
  $$1 = $p;
  $$14 = $psize;
 } while (0);
 $107 = HEAP32[1448] | 0;
 if ($0 >>> 0 < $107 >>> 0) _abort();
 $109 = $0 + 4 | 0;
 $110 = HEAP32[$109 >> 2] | 0;
 if (!($110 & 2)) {
  if (($0 | 0) == (HEAP32[1450] | 0)) {
   $116 = (HEAP32[1447] | 0) + $$14 | 0;
   HEAP32[1447] = $116;
   HEAP32[1450] = $$1;
   HEAP32[$$1 + 4 >> 2] = $116 | 1;
   if (($$1 | 0) != (HEAP32[1449] | 0)) return;
   HEAP32[1449] = 0;
   HEAP32[1446] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[1449] | 0)) {
   $124 = (HEAP32[1446] | 0) + $$14 | 0;
   HEAP32[1446] = $124;
   HEAP32[1449] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($110 & -8) + $$14 | 0;
  $130 = $110 >>> 3;
  do if ($110 >>> 0 < 256) {
   $133 = HEAP32[$0 + 8 >> 2] | 0;
   $135 = HEAP32[$0 + 12 >> 2] | 0;
   $137 = 5816 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $107 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[1444] = HEAP32[1444] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi22Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $107 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($0 | 0)) $$pre$phi22Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi22Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$0 + 24 >> 2] | 0;
   $157 = HEAP32[$0 + 12 >> 2] | 0;
   do if (($157 | 0) == ($0 | 0)) {
    $168 = $0 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $R7$3 = 0;
      break;
     } else {
      $R7$1 = $172;
      $RP9$1 = $168;
     }
    } else {
     $R7$1 = $170;
     $RP9$1 = $169;
    }
    while (1) {
     $174 = $R7$1 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175 | 0) {
      $R7$1 = $175;
      $RP9$1 = $174;
      continue;
     }
     $177 = $R7$1 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) {
      $R7$1$lcssa = $R7$1;
      $RP9$1$lcssa = $RP9$1;
      break;
     } else {
      $R7$1 = $178;
      $RP9$1 = $177;
     }
    }
    if ($RP9$1$lcssa >>> 0 < $107 >>> 0) _abort(); else {
     HEAP32[$RP9$1$lcssa >> 2] = 0;
     $R7$3 = $R7$1$lcssa;
     break;
    }
   } else {
    $160 = HEAP32[$0 + 8 >> 2] | 0;
    if ($160 >>> 0 < $107 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($0 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $R7$3 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155 | 0) {
    $183 = HEAP32[$0 + 28 >> 2] | 0;
    $184 = 6080 + ($183 << 2) | 0;
    if (($0 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $R7$3;
     if (!$R7$3) {
      HEAP32[1445] = HEAP32[1445] & ~(1 << $183);
      break;
     }
    } else {
     if ($155 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
     $193 = $155 + 16 | 0;
     if ((HEAP32[$193 >> 2] | 0) == ($0 | 0)) HEAP32[$193 >> 2] = $R7$3; else HEAP32[$155 + 20 >> 2] = $R7$3;
     if (!$R7$3) break;
    }
    $198 = HEAP32[1448] | 0;
    if ($R7$3 >>> 0 < $198 >>> 0) _abort();
    HEAP32[$R7$3 + 24 >> 2] = $155;
    $201 = $0 + 16 | 0;
    $202 = HEAP32[$201 >> 2] | 0;
    do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
     HEAP32[$R7$3 + 16 >> 2] = $202;
     HEAP32[$202 + 24 >> 2] = $R7$3;
     break;
    } while (0);
    $208 = HEAP32[$201 + 4 >> 2] | 0;
    if ($208 | 0) if ($208 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$3 + 20 >> 2] = $208;
     HEAP32[$208 + 24 >> 2] = $R7$3;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[1449] | 0)) {
   HEAP32[1446] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$109 >> 2] = $110 & -2;
  HEAP32[$$1 + 4 >> 2] = $$14 | 1;
  HEAP32[$$1 + $$14 >> 2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $226 = 5816 + ($223 << 1 << 2) | 0;
  $227 = HEAP32[1444] | 0;
  $228 = 1 << $223;
  if (!($227 & $228)) {
   HEAP32[1444] = $227 | $228;
   $$pre$phiZ2D = $226 + 8 | 0;
   $F17$0 = $226;
  } else {
   $232 = $226 + 8 | 0;
   $233 = HEAP32[$232 >> 2] | 0;
   if ($233 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $232;
    $F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$F17$0 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $F17$0;
  HEAP32[$$1 + 12 >> 2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 if (!$239) $I20$0 = 0; else if ($$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $244 = ($239 + 1048320 | 0) >>> 16 & 8;
  $245 = $239 << $244;
  $248 = ($245 + 520192 | 0) >>> 16 & 4;
  $250 = $245 << $248;
  $253 = ($250 + 245760 | 0) >>> 16 & 2;
  $258 = 14 - ($248 | $244 | $253) + ($250 << $253 >>> 15) | 0;
  $I20$0 = $$2 >>> ($258 + 7 | 0) & 1 | $258 << 1;
 }
 $264 = 6080 + ($I20$0 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $I20$0;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $268 = HEAP32[1445] | 0;
 $269 = 1 << $I20$0;
 if (!($268 & $269)) {
  HEAP32[1445] = $268 | $269;
  HEAP32[$264 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $264;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $K21$0 = $$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
 $T$0 = HEAP32[$264 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $287 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
  $289 = HEAP32[$287 >> 2] | 0;
  if (!$289) {
   $$lcssa = $287;
   $T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $K21$0 << 1;
   $T$0 = $289;
  }
 }
 if ((label | 0) == 124) {
  if ($$lcssa >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $T$0$lcssa30;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 127) {
  $296 = $T$0$lcssa + 8 | 0;
  $297 = HEAP32[$296 >> 2] | 0;
  $298 = HEAP32[1448] | 0;
  if (!($297 >>> 0 >= $298 >>> 0 & $T$0$lcssa >>> 0 >= $298 >>> 0)) _abort();
  HEAP32[$297 + 12 >> 2] = $$1;
  HEAP32[$296 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $297;
  HEAP32[$$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $r_sroa_0_0_extract_trunc = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (!$155) break; else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _data_extract_all($archive_handle) {
 $archive_handle = $archive_handle | 0;
 var $1 = 0, $100 = 0, $11 = 0, $111 = 0, $115 = 0, $117 = 0, $121 = 0, $123 = 0, $128 = 0, $13 = 0, $130 = 0, $135 = 0, $139 = 0, $142 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $31 = 0, $34 = 0, $76 = 0, $77 = 0, $81 = 0, $93 = 0, $dst_name$0 = 0, $dst_name$2 = 0, $existing_sb = 0, $gid$1 = 0, $hard_link$0 = 0, $hard_link$1 = 0, $hard_link$2 = 0, $hard_link$4 = 0, $n$0 = 0, $uid$1 = 0, $uid$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer25 = sp + 224 | 0;
 $vararg_buffer22 = sp + 216 | 0;
 $vararg_buffer17 = sp + 200 | 0;
 $vararg_buffer14 = sp + 192 | 0;
 $vararg_buffer9 = sp + 176 | 0;
 $vararg_buffer6 = sp + 168 | 0;
 $vararg_buffer3 = sp + 160 | 0;
 $vararg_buffer1 = sp + 152 | 0;
 $vararg_buffer = sp + 144 | 0;
 $existing_sb = sp;
 $1 = HEAP32[$archive_handle + 24 >> 2] | 0;
 $2 = $1 + 28 | 0;
 if ((HEAP32[$2 >> 2] & 61440 | 0) == 32768) if (!(HEAP32[$1 + 16 >> 2] | 0)) $hard_link$0 = HEAP32[$1 + 4 >> 2] | 0; else $hard_link$0 = 0; else $hard_link$0 = 0;
 $11 = HEAP32[$1 >> 2] | 0;
 $13 = HEAP32[$archive_handle + 44 >> 2] | 0;
 L5 : do if (!$13) {
  $dst_name$2 = $11;
  $hard_link$4 = $hard_link$0;
  label = 13;
 } else {
  $dst_name$0 = $11;
  $hard_link$1 = $hard_link$0;
  $n$0 = $13;
  while (1) {
   $15 = _strchr($dst_name$0, 47) | 0;
   if (!$15) {
    label = 7;
    break;
   }
   $17 = $15 + 1 | 0;
   if (!(HEAP8[$17 >> 0] | 0)) {
    label = 7;
    break;
   }
   if (!$hard_link$1) $hard_link$2 = 0; else {
    $21 = _strchr($hard_link$1, 47) | 0;
    if (!$21) {
     label = 11;
     break;
    }
    $23 = $21 + 1 | 0;
    if (!(HEAP8[$23 >> 0] | 0)) {
     label = 11;
     break;
    } else $hard_link$2 = $23;
   }
   $26 = $n$0 + -1 | 0;
   if (!$26) {
    $dst_name$2 = $17;
    $hard_link$4 = $hard_link$2;
    label = 13;
    break L5;
   } else {
    $dst_name$0 = $17;
    $hard_link$1 = $hard_link$2;
    $n$0 = $26;
   }
  }
  if ((label | 0) == 7) {
   _data_skip($archive_handle);
   break;
  } else if ((label | 0) == 11) {
   _data_skip($archive_handle);
   break;
  }
 } while (0);
 L17 : do if ((label | 0) == 13) {
  $28 = HEAP32[$archive_handle >> 2] | 0;
  if (!($28 & 2)) $34 = $28; else {
   $31 = _strrchr($dst_name$2, 47) | 0;
   if (!$31) $34 = $28; else {
    HEAP8[$31 >> 0] = 0;
    _bb_make_directory($dst_name$2, -1, 4) | 0;
    HEAP8[$31 >> 0] = 47;
    $34 = HEAP32[$archive_handle >> 2] | 0;
   }
  }
  if (!($34 & 4)) {
   if ($34 & 16 | 0) do if ((_lstat($dst_name$2, $existing_sb) | 0) == -1) {
    if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 2) _bb_perror_msg_and_die(1968, $vararg_buffer1);
   } else {
    if ((HEAP32[$existing_sb + 88 >> 2] | 0) < (HEAP32[$1 + 32 >> 2] | 0)) {
     if ((_unlink($dst_name$2) | 0) != -1) break;
     if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 21) break;
     HEAP32[$vararg_buffer6 >> 2] = $dst_name$2;
     _bb_perror_msg_and_die(1943, $vararg_buffer6);
    }
    if (!(HEAP32[$archive_handle >> 2] & 8)) if ((HEAP32[$2 >> 2] & 61440 | 0) != 16384) {
     HEAP32[$vararg_buffer3 >> 2] = $dst_name$2;
     _bb_error_msg(1988, $vararg_buffer3);
    }
    _data_skip($archive_handle);
    break L17;
   } while (0);
  } else if ((HEAP32[$2 >> 2] & 61440 | 0) != 16384) {
   if ($hard_link$4 | 0) if (!(_strcmp($hard_link$4, $dst_name$2) | 0)) break;
   if ((_unlink($dst_name$2) | 0) == -1) if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 2) {
    HEAP32[$vararg_buffer >> 2] = $dst_name$2;
    _bb_perror_msg_and_die(1943, $vararg_buffer);
   }
  }
  if ($hard_link$4 | 0) {
   if (!(_link($hard_link$4, $dst_name$2) | 0)) break;
   if (HEAP32[$archive_handle >> 2] & 8 | 0) break;
   HEAP32[$vararg_buffer9 >> 2] = 2068;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $dst_name$2;
   HEAP32[$vararg_buffer9 + 8 >> 2] = $hard_link$4;
   _bb_perror_msg(2034, $vararg_buffer9);
   break;
  }
  $76 = HEAP32[$2 >> 2] | 0;
  $77 = $76 & 61440;
  L53 : do if (($77 | 0) < 24576) {
   if (($77 | 0) < 8192) switch ($77 | 0) {
   case 4096:
    {
     label = 49;
     break L53;
     break;
    }
   default:
    {
     label = 52;
     break L53;
    }
   }
   if (($77 | 0) < 16384) switch ($77 | 0) {
   case 8192:
    {
     label = 49;
     break L53;
     break;
    }
   default:
    {
     label = 52;
     break L53;
    }
   }
   switch ($77 | 0) {
   case 16384:
    break;
   default:
    {
     label = 52;
     break L53;
    }
   }
   if ((_mkdir($dst_name$2, $76) | 0) == -1) {
    switch (HEAP32[(___errno_location() | 0) >> 2] | 0) {
    case 17:
    case 21:
     {
      break L53;
      break;
     }
    default:
     {}
    }
    if (!(HEAP32[$archive_handle >> 2] & 8)) {
     HEAP32[$vararg_buffer14 >> 2] = $dst_name$2;
     _bb_perror_msg(2073, $vararg_buffer14);
    }
   }
  } else {
   if (($77 | 0) < 40960) {
    if (($77 | 0) < 32768) switch ($77 | 0) {
    case 24576:
     {
      label = 49;
      break L53;
      break;
     }
    default:
     {
      label = 52;
      break L53;
     }
    }
    switch ($77 | 0) {
    case 32768:
     break;
    default:
     {
      label = 52;
      break L53;
     }
    }
    $81 = _xopen3($dst_name$2, HEAP32[$archive_handle >> 2] & 256 | 0 ? 577 : 193, $76) | 0;
    _bb_copyfd_exact_size(HEAP32[$archive_handle + 4 >> 2] | 0, $81, HEAP32[$1 + 16 >> 2] | 0);
    _close($81) | 0;
    break;
   }
   if (($77 | 0) >= 49152) switch ($77 | 0) {
   case 49152:
    {
     label = 49;
     break L53;
     break;
    }
   default:
    {
     label = 52;
     break L53;
    }
   }
   switch ($77 | 0) {
   case 40960:
    break;
   default:
    {
     label = 52;
     break L53;
    }
   }
   $93 = $1 + 4 | 0;
   if (_symlink(HEAP32[$93 >> 2] | 0, $dst_name$2) | 0) if (!(HEAP32[$archive_handle >> 2] & 8)) {
    $100 = HEAP32[$93 >> 2] | 0;
    HEAP32[$vararg_buffer17 >> 2] = 2091;
    HEAP32[$vararg_buffer17 + 4 >> 2] = $dst_name$2;
    HEAP32[$vararg_buffer17 + 8 >> 2] = $100;
    _bb_perror_msg(2034, $vararg_buffer17);
   }
  } while (0);
  if ((label | 0) == 52) _bb_error_msg_and_die(2116, $vararg_buffer25);
  if ((label | 0) == 49) if ((_mknod($dst_name$2, $76, HEAP32[$1 + 36 >> 2] | 0) | 0) == -1) if (!(HEAP32[$archive_handle >> 2] & 8)) {
   HEAP32[$vararg_buffer22 >> 2] = $dst_name$2;
   _bb_perror_msg(2095, $vararg_buffer22);
  }
  if ((HEAP32[$2 >> 2] & 61440 | 0) != 40960) {
   $111 = HEAP32[$archive_handle >> 2] | 0;
   if (!($111 & 32)) {
    $115 = HEAP32[$1 + 20 >> 2] | 0;
    $117 = HEAP32[$1 + 24 >> 2] | 0;
    if (!($111 & 128)) {
     $121 = HEAP32[$1 + 8 >> 2] | 0;
     if (!$121) $uid$1 = $115; else {
      $123 = _bb_internal_getpwnam($121) | 0;
      if (!$123) $uid$1 = $115; else $uid$1 = HEAP32[$123 + 8 >> 2] | 0;
     }
     $128 = HEAP32[$1 + 12 >> 2] | 0;
     if (!$128) {
      $gid$1 = $117;
      $uid$2 = $uid$1;
     } else {
      $130 = _bb_internal_getgrnam($128) | 0;
      if (!$130) {
       $gid$1 = $117;
       $uid$2 = $uid$1;
      } else {
       $gid$1 = HEAP32[$130 + 8 >> 2] | 0;
       $uid$2 = $uid$1;
      }
     }
    } else {
     $gid$1 = $117;
     $uid$2 = $115;
    }
    _chown($dst_name$2, $uid$2, $gid$1) | 0;
    $135 = HEAP32[$archive_handle >> 2] | 0;
   } else $135 = $111;
   if (!($135 & 64)) {
    _chmod($dst_name$2, HEAP32[$2 >> 2] | 0) | 0;
    $139 = HEAP32[$archive_handle >> 2] | 0;
   } else $139 = $135;
   if ($139 & 1 | 0) {
    $142 = HEAP32[$1 + 32 >> 2] | 0;
    HEAP32[$existing_sb >> 2] = $142;
    HEAP32[$existing_sb + 8 >> 2] = $142;
    HEAP32[$existing_sb + 4 >> 2] = 0;
    HEAP32[$existing_sb + 12 >> 2] = 0;
    _utimes($dst_name$2 | 0, $existing_sb | 0) | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _tar_main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $$0 = 0, $$017 = 0, $$mux = 0, $$mux21 = 0, $$not = 0, $$pr4 = 0, $$pr5 = 0, $0 = 0, $100 = 0, $102 = 0, $112 = 0, $12 = 0, $128 = 0, $131 = 0, $14 = 0, $145 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $31 = 0, $6 = 0, $71 = 0, $74 = 0, $77 = 0, $78 = 0, $79 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $base_dir = 0, $excludes = 0, $f$0$lcssa = 0, $f$014 = 0, $f$014$phi = 0, $storemerge = 0, $tar_filename = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer9 = 0, $verboseFlag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer = sp;
 $base_dir = sp + 64 | 0;
 $tar_filename = sp + 60 | 0;
 $verboseFlag = sp + 56 | 0;
 $excludes = sp + 52 | 0;
 HEAP32[$base_dir >> 2] = 0;
 HEAP32[$tar_filename >> 2] = 1314;
 HEAP32[$verboseFlag >> 2] = 0;
 HEAP32[$excludes >> 2] = 0;
 $0 = _init_handle() | 0;
 HEAP32[$0 >> 2] = 7;
 if (_getuid() | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 64;
 HEAP32[1417] = 1316;
 HEAP32[1416] = 1355;
 $6 = HEAP32[$argv + 4 >> 2] | 0;
 do if (!$6) label = 11; else {
  if (!(_strcmp($6, 1626) | 0)) {
   _puts(1636) | 0;
   $$0 = 0;
   break;
  }
  if ((HEAP8[$6 >> 0] | 0) == 45) label = 11; else {
   $12 = _strchr($6, 102) | 0;
   if (!$12) label = 11; else {
    $14 = $12 + 1 | 0;
    $15 = HEAP8[$14 >> 0] | 0;
    if (!($15 << 24 >> 24)) $f$0$lcssa = $12; else {
     $17 = $15;
     $19 = $14;
     $f$014 = $12;
     while (1) {
      HEAP8[$f$014 >> 0] = $17;
      $18 = $19 + 1 | 0;
      $20 = HEAP8[$18 >> 0] | 0;
      if (!($20 << 24 >> 24)) {
       $f$0$lcssa = $19;
       break;
      } else {
       $f$014$phi = $19;
       $17 = $20;
       $19 = $18;
       $f$014 = $f$014$phi;
      }
     }
    }
    HEAP8[$f$0$lcssa >> 0] = 102;
    label = 11;
   }
  }
 } while (0);
 do if ((label | 0) == 11) {
  $22 = $0 + 12 | 0;
  $23 = $0 + 16 | 0;
  HEAP32[$vararg_buffer >> 2] = $base_dir;
  HEAP32[$vararg_buffer + 4 >> 2] = $tar_filename;
  HEAP32[$vararg_buffer + 8 >> 2] = $22;
  HEAP32[$vararg_buffer + 12 >> 2] = $23;
  HEAP32[$vararg_buffer + 16 >> 2] = $0 + 44;
  HEAP32[$vararg_buffer + 20 >> 2] = $0 + 60;
  HEAP32[$vararg_buffer + 24 >> 2] = $excludes;
  HEAP32[$vararg_buffer + 28 >> 2] = $verboseFlag;
  HEAP32[$vararg_buffer + 32 >> 2] = $verboseFlag;
  $26 = _getopt32($argv, 1657, $vararg_buffer) | 0;
  $28 = $argv + (HEAP32[22] << 2) | 0;
  if (HEAP32[$verboseFlag >> 2] | 0) {
   $31 = $0 + 28 | 0;
   HEAP32[$31 >> 2] = 1;
   HEAP32[$31 >> 2] = (HEAP32[$verboseFlag >> 2] | 0) == 1 ? 2 : 1;
  }
  if ($26 & 2 | 0) HEAP32[$0 + 32 >> 2] = 3;
  if ($26 & 16 | 0) HEAP32[$0 + 32 >> 2] = 4;
  if ($26 & 65536 | 0) {
   _putenv(1680) | 0;
   _signal(13, 1) | 0;
   HEAP32[$0 + 32 >> 2] = 5;
   HEAP32[$0 + 64 >> 2] = _xstrdup(_get_shell_name() | 0) | 0;
  }
  if ($26 & 256 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -5;
  if ($26 & 131072 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 128;
  if ($26 & 32 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if ($26 & 262144 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 64;
  if ($26 & 524288 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -261 | 256;
  if ($26 & 8192 | 0) HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -2;
  $71 = _append_file_list_to_list(HEAP32[$23 >> 2] | 0) | 0;
  HEAP32[$23 >> 2] = $71;
  $$pr4 = HEAP32[$excludes >> 2] | 0;
  if ($$pr4 | 0) {
   $74 = HEAP32[$$pr4 >> 2] | 0;
   HEAP32[$$pr4 >> 2] = $71;
   HEAP32[$23 >> 2] = HEAP32[$excludes >> 2];
   HEAP32[$excludes >> 2] = $74;
   if ($74 | 0) {
    $77 = $74;
    while (1) {
     $78 = $77;
     $79 = HEAP32[$78 >> 2] | 0;
     HEAP32[$78 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$23 >> 2] = HEAP32[$excludes >> 2];
     HEAP32[$excludes >> 2] = $79;
     if (!$79) break; else $77 = $79;
    }
   }
  }
  $83 = _append_file_list_to_list(HEAP32[$22 >> 2] | 0) | 0;
  HEAP32[$22 >> 2] = $83;
  $84 = HEAP32[$28 >> 2] | 0;
  if (!$84) $94 = $83; else {
   $$017 = $28;
   $86 = $84;
   while (1) {
    $87 = _last_char_is($86, 47) | 0;
    $88 = HEAP32[$$017 >> 2] | 0;
    if ($87 >>> 0 > $88 >>> 0) {
     HEAP8[$87 >> 0] = 0;
     $90 = HEAP32[$$017 >> 2] | 0;
    } else $90 = $88;
    _llist_add_to_end($22, $90);
    $91 = $$017 + 4 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    if (!$92) break; else {
     $$017 = $91;
     $86 = $92;
    }
   }
   $94 = HEAP32[$22 >> 2] | 0;
  }
  $95 = ($94 | 0) == 0;
  if ($95) {
   if (HEAP32[$23 >> 2] | 0) label = 41;
  } else label = 41;
  if ((label | 0) == 41) HEAP32[$0 + 8 >> 2] = 2;
  $100 = ($26 & 512 | 0) != 0;
  $$not = $100 ^ 1;
  $$mux = $$not & 1 ^ 1;
  $$mux21 = $100 ? 577 : 0;
  if (!($$not | $95 ^ 1)) _bb_error_msg_and_die(1695, $vararg_buffer9);
  $102 = HEAP32[$tar_filename >> 2] | 0;
  if ((HEAP8[$102 >> 0] | 0) == 45) if (!(HEAP8[$102 + 1 >> 0] | 0)) {
   HEAP32[$0 + 4 >> 2] = $$mux;
   HEAP32[$0 + 36 >> 2] = 1;
  } else label = 47; else label = 47;
  if ((label | 0) == 47) HEAP32[$0 + 4 >> 2] = _xopen($102, $$mux21) | 0;
  $112 = HEAP32[$base_dir >> 2] | 0;
  if ($112 | 0) _xchdir($112);
  if ($100) {
   $$0 = _writeTarFile(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$verboseFlag >> 2] | 0, ($26 >>> 15 & 1 | $26 >>> 9 & 2) ^ 1, HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0) | 0;
   break;
  } else $storemerge = 1;
  while (1) {
   HEAP32[1414] = $storemerge;
   if (!((_get_header_tar($0) | 0) << 24 >> 24)) $storemerge = 0; else break;
  }
  $$pr5 = HEAP32[$22 >> 2] | 0;
  L82 : do if ($$pr5 | 0) {
   $128 = $0 + 20 | 0;
   $131 = $$pr5;
   while (1) {
    if (!(_find_list_entry(HEAP32[$23 >> 2] | 0, HEAP32[$131 + 4 >> 2] | 0) | 0)) if (!(_find_list_entry(HEAP32[$128 >> 2] | 0, HEAP32[(HEAP32[$22 >> 2] | 0) + 4 >> 2] | 0) | 0)) break;
    $145 = HEAP32[HEAP32[$22 >> 2] >> 2] | 0;
    HEAP32[$22 >> 2] = $145;
    if (!$145) break L82; else $131 = $145;
   }
   HEAP32[$vararg_buffer11 >> 2] = HEAP32[(HEAP32[$22 >> 2] | 0) + 4 >> 2];
   _bb_error_msg_and_die(1918, $vararg_buffer11);
  } while (0);
  $$0 = HEAP32[1414] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $104 = 0, $106 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $137 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $163 = 0, $166 = 0, $173 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $94 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $newp$2 = 0, $storemerge = 0, $storemerge1 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[1448] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[1564] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $22 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$22 + 4 >> 2] = $20 | 3;
  $29 = $22 + $20 + 4 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 1;
  _dispose_chunk($22, $20);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[1450] | 0)) {
  $35 = (HEAP32[1447] | 0) + $2 | 0;
  if ($35 >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $37 = $35 - $nb | 0;
  $38 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$38 + 4 >> 2] = $37 | 1;
  HEAP32[1450] = $38;
  HEAP32[1447] = $37;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[1449] | 0)) {
  $47 = (HEAP32[1446] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   $51 = $p + $nb | 0;
   $52 = $51 + $49 | 0;
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$51 + 4 >> 2] = $49 | 1;
   HEAP32[$52 >> 2] = $49;
   $58 = $52 + 4 | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $51;
   $storemerge1 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $65 = $p + $47 + 4 | 0;
   HEAP32[$65 >> 2] = HEAP32[$65 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[1446] = $storemerge1;
  HEAP32[1449] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($8 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $71 = ($8 & -8) + $2 | 0;
 if ($71 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $73 = $71 - $nb | 0;
 $74 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $77 = HEAP32[$3 + 8 >> 2] | 0;
  $79 = HEAP32[$3 + 12 >> 2] | 0;
  $81 = 5816 + ($74 << 1 << 2) | 0;
  if (($77 | 0) != ($81 | 0)) {
   if ($77 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$77 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($79 | 0) == ($77 | 0)) {
   HEAP32[1444] = HEAP32[1444] & ~(1 << $74);
   break;
  }
  if (($79 | 0) == ($81 | 0)) $$pre$phiZ2D = $79 + 8 | 0; else {
   if ($79 >>> 0 < $4 >>> 0) _abort();
   $94 = $79 + 8 | 0;
   if ((HEAP32[$94 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $94; else _abort();
  }
  HEAP32[$77 + 12 >> 2] = $79;
  HEAP32[$$pre$phiZ2D >> 2] = $77;
 } else {
  $99 = HEAP32[$3 + 24 >> 2] | 0;
  $101 = HEAP32[$3 + 12 >> 2] | 0;
  do if (($101 | 0) == ($3 | 0)) {
   $112 = $3 + 16 | 0;
   $113 = $112 + 4 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (!$114) {
    $116 = HEAP32[$112 >> 2] | 0;
    if (!$116) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $116;
     $RP$1 = $112;
    }
   } else {
    $R$1 = $114;
    $RP$1 = $113;
   }
   while (1) {
    $118 = $R$1 + 20 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if ($119 | 0) {
     $R$1 = $119;
     $RP$1 = $118;
     continue;
    }
    $121 = $R$1 + 16 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (!$122) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $122;
     $RP$1 = $121;
    }
   }
   if ($RP$1$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $104 = HEAP32[$3 + 8 >> 2] | 0;
   if ($104 >>> 0 < $4 >>> 0) _abort();
   $106 = $104 + 12 | 0;
   if ((HEAP32[$106 >> 2] | 0) != ($3 | 0)) _abort();
   $109 = $101 + 8 | 0;
   if ((HEAP32[$109 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$106 >> 2] = $101;
    HEAP32[$109 >> 2] = $104;
    $R$3 = $101;
    break;
   } else _abort();
  } while (0);
  if ($99 | 0) {
   $127 = HEAP32[$3 + 28 >> 2] | 0;
   $128 = 6080 + ($127 << 2) | 0;
   if (($3 | 0) == (HEAP32[$128 >> 2] | 0)) {
    HEAP32[$128 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1445] = HEAP32[1445] & ~(1 << $127);
     break;
    }
   } else {
    if ($99 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort();
    $137 = $99 + 16 | 0;
    if ((HEAP32[$137 >> 2] | 0) == ($3 | 0)) HEAP32[$137 >> 2] = $R$3; else HEAP32[$99 + 20 >> 2] = $R$3;
    if (!$R$3) break;
   }
   $142 = HEAP32[1448] | 0;
   if ($R$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $99;
   $145 = $3 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146 | 0) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152 | 0) if ($152 >>> 0 < (HEAP32[1448] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($73 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $71 | $1 & 1 | 2;
  $163 = $p + $71 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $166 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$166 + 4 >> 2] = $73 | 3;
  $173 = $166 + $73 + 4 | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($166, $73);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _bb_make_directory($path, $mode, $flags) {
 $path = $path | 0;
 $mode = $mode | 0;
 $flags = $flags | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$lcssa = 0, $$lcssa70 = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $37 = 0, $38 = 0, $8 = 0, $9 = 0, $c$04 = 0, $cur_mask$0 = 0, $cur_mask$2 = 0, $cur_mask$2$lcssa = 0, $cur_mask$273 = 0, $cur_mask$274 = 0, $cur_mask$275 = 0, $fail_msg$0 = 0, $fail_msg$1 = 0, $org_mask$0 = 0, $org_mask$1 = 0, $org_mask$1$lcssa = 0, $org_mask$178 = 0, $org_mask$179 = 0, $org_mask$180 = 0, $s$0 = 0, $s$1 = 0, $s$2 = 0, $s$32 = 0, $s$33 = 0, $st = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 152 | 0;
 $vararg_buffer = sp + 144 | 0;
 $st = sp;
 $0 = HEAP8[$path >> 0] | 0;
 switch ($0 << 24 >> 24) {
 case 47:
  {
   if (!(HEAP8[$path + 1 >> 0] | 0)) $$0 = 0; else label = 4;
   break;
  }
 case 46:
  {
   if (!(HEAP8[$path + 1 >> 0] | 0)) $$0 = 0; else label = 4;
   break;
  }
 default:
  label = 4;
 }
 if ((label | 0) == 4) {
  $8 = ($flags & 4 | 0) != 0;
  $9 = $st + 24 | 0;
  $11 = ($flags & 4096 | 0) == 0;
  $37 = $0;
  $cur_mask$0 = -1;
  $org_mask$0 = -1;
  $s$0 = $path;
  L6 : while (1) {
   L8 : do if ($8) {
    $12 = $37;
    $s$1 = $s$0;
    L9 : while (1) {
     switch ($12 << 24 >> 24) {
     case 0:
      {
       $s$33 = $s$1;
       label = 13;
       break L8;
       break;
      }
     case 47:
      {
       $s$2 = $s$1;
       break L9;
       break;
      }
     default:
      {}
     }
     $16 = $s$1 + 1 | 0;
     $12 = HEAP8[$16 >> 0] | 0;
     $s$1 = $16;
    }
    while (1) {
     $13 = $s$2 + 1 | 0;
     $14 = HEAP8[$13 >> 0] | 0;
     if ($14 << 24 >> 24 == 47) $s$2 = $13; else {
      $$lcssa = $13;
      $$lcssa70 = $14;
      break;
     }
    }
    HEAP8[$$lcssa >> 0] = 0;
    if (!($$lcssa70 << 24 >> 24)) {
     $s$33 = $$lcssa;
     label = 13;
    } else if (($cur_mask$0 | 0) == -1) {
     $19 = _umask(0) | 0;
     $20 = $19 & -193;
     if (!$20) {
      $38 = 0;
      $c$04 = $$lcssa70;
      $cur_mask$2 = 0;
      $org_mask$1 = $19;
      $s$32 = $$lcssa;
     } else {
      _umask($20) | 0;
      $38 = 0;
      $c$04 = $$lcssa70;
      $cur_mask$2 = $20;
      $org_mask$1 = $19;
      $s$32 = $$lcssa;
     }
    } else {
     $38 = 0;
     $c$04 = $$lcssa70;
     $cur_mask$2 = $cur_mask$0;
     $org_mask$1 = $org_mask$0;
     $s$32 = $$lcssa;
    }
   } else {
    $s$33 = $s$0;
    label = 13;
   } while (0);
   if ((label | 0) == 13) {
    label = 0;
    if (($org_mask$0 | 0) == ($cur_mask$0 | 0)) {
     $38 = 1;
     $c$04 = 0;
     $cur_mask$2 = $cur_mask$0;
     $org_mask$1 = $cur_mask$0;
     $s$32 = $s$33;
    } else {
     _umask($org_mask$0) | 0;
     $38 = 1;
     $c$04 = 0;
     $cur_mask$2 = $org_mask$0;
     $org_mask$1 = $org_mask$0;
     $s$32 = $s$33;
    }
   }
   if ((_mkdir($path, 511) | 0) < 0) {
    switch (HEAP32[(___errno_location() | 0) >> 2] | 0) {
    case 21:
    case 17:
     break;
    default:
     {
      $cur_mask$273 = $cur_mask$2;
      $fail_msg$0 = 2673;
      $org_mask$178 = $org_mask$1;
      label = 28;
      break L6;
     }
    }
    if (!$8) {
     $cur_mask$273 = $cur_mask$2;
     $fail_msg$0 = 2673;
     $org_mask$178 = $org_mask$1;
     label = 28;
     break;
    }
    if ((_stat($path, $st) | 0) < 0) {
     $cur_mask$273 = $cur_mask$2;
     $fail_msg$0 = 2673;
     $org_mask$178 = $org_mask$1;
     label = 28;
     break;
    }
    if ((HEAP32[$9 >> 2] & 61440 | 0) != 16384) {
     $cur_mask$273 = $cur_mask$2;
     $fail_msg$0 = 2673;
     $org_mask$178 = $org_mask$1;
     label = 28;
     break;
    }
    if ($38) {
     $$1 = 0;
     $cur_mask$275 = $cur_mask$2;
     $org_mask$180 = $org_mask$1;
     break;
    }
   } else {
    if (!$11) {
     HEAP32[$vararg_buffer >> 2] = $path;
     _printf(2629, $vararg_buffer) | 0;
    }
    if ($38) {
     $cur_mask$2$lcssa = $cur_mask$2;
     $org_mask$1$lcssa = $org_mask$1;
     label = 24;
     break;
    }
   }
   HEAP8[$s$32 >> 0] = $c$04;
   $37 = $c$04;
   $cur_mask$0 = $cur_mask$2;
   $org_mask$0 = $org_mask$1;
   $s$0 = $s$32;
  }
  if ((label | 0) == 24) if (($mode | 0) == -1) {
   $$1 = 0;
   $cur_mask$275 = $cur_mask$2$lcssa;
   $org_mask$180 = $org_mask$1$lcssa;
  } else if ((_chmod($path, $mode) | 0) < 0) if (($flags | 0) < 0) {
   $$01 = 0;
   $cur_mask$274 = $cur_mask$2$lcssa;
   $fail_msg$1 = 2654;
   $org_mask$179 = $org_mask$1$lcssa;
   label = 29;
  } else {
   $cur_mask$273 = $cur_mask$2$lcssa;
   $fail_msg$0 = 2654;
   $org_mask$178 = $org_mask$1$lcssa;
   label = 28;
  } else {
   $$1 = 0;
   $cur_mask$275 = $cur_mask$2$lcssa;
   $org_mask$180 = $org_mask$1$lcssa;
  }
  if ((label | 0) == 28) {
   $$01 = -1;
   $cur_mask$274 = $cur_mask$273;
   $fail_msg$1 = $fail_msg$0;
   $org_mask$179 = $org_mask$178;
   label = 29;
  }
  if ((label | 0) == 29) {
   HEAP32[$vararg_buffer1 >> 2] = $fail_msg$1;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $path;
   _bb_perror_msg(2680, $vararg_buffer1);
   $$1 = $$01;
   $cur_mask$275 = $cur_mask$274;
   $org_mask$180 = $org_mask$179;
  }
  if (($org_mask$180 | 0) == ($cur_mask$275 | 0)) $$0 = $$1; else {
   _umask($org_mask$180) | 0;
   $$0 = $$1;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _start_bunzip($bdp, $in_fd, $inbuf, $len) {
 $bdp = $bdp | 0;
 $in_fd = $in_fd | 0;
 $inbuf = $inbuf | 0;
 $len = $len | 0;
 var $$0$reg2mem$0 = 0, $$reg2mem25$0 = 0, $$reg2mem25$0$phi = 0, $$reg2mem45$0 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $7 = 0, _setjmpTable = 0, _setjmpTableSize = 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $0 = ($in_fd | 0) == -1;
 __THREW__ = 0;
 $1 = invoke_ii(3, ($0 ? 41240 : 45336) | 0) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 if (($2 | 0) != 0 & (threwValue | 0) != 0) {
  $3 = _testSetjmp(HEAP32[$2 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  if (!$3) _longjmp($2 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else $3 = -1;
 if (($3 | 0) == 1) {
  $$reg2mem25$0 = 0;
  $$reg2mem45$0 = tempRet0;
 } else {
  HEAP32[$bdp >> 2] = $1;
  HEAP32[$1 + 8 >> 2] = $in_fd;
  if ($0) HEAP32[$1 + 24 >> 2] = $inbuf; else {
   $7 = $1 + 41240 | 0;
   HEAP32[$1 + 24 >> 2] = $7;
   _memcpy($7 | 0, $inbuf | 0, $len | 0) | 0;
  }
  HEAP32[$1 + 16 >> 2] = $len;
  __THREW__ = 0;
  invoke_iii(1, $1 + 224 | 0, 1) | 0;
  $11 = __THREW__;
  __THREW__ = 0;
  if (($11 | 0) != 0 & (threwValue | 0) != 0) {
   $12 = _testSetjmp(HEAP32[$11 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$12) _longjmp($11 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $12 = -1;
  if (($12 | 0) == 1) {
   $$reg2mem25$0 = $1;
   $$reg2mem45$0 = tempRet0;
  } else {
   _setjmpTable = _saveSetjmp($1 + 68 | 0, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   _setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $15 = __THREW__;
   __THREW__ = 0;
   if (($15 | 0) != 0 & (threwValue | 0) != 0) {
    $16 = _testSetjmp(HEAP32[$15 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$16) _longjmp($15 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $16 = -1;
   if (($16 | 0) == 1) {
    $$reg2mem25$0 = $1;
    $$reg2mem45$0 = tempRet0;
   } else {
    $$reg2mem25$0 = $1;
    $$reg2mem45$0 = 0;
   }
  }
 }
 while (1) {
  if ($$reg2mem45$0 | 0) {
   $$0$reg2mem$0 = $$reg2mem45$0;
   break;
  }
  __THREW__ = 0;
  $19 = invoke_iii(2, $$reg2mem25$0 | 0, 16) | 0;
  $20 = __THREW__;
  __THREW__ = 0;
  if (($20 | 0) != 0 & (threwValue | 0) != 0) {
   $21 = _testSetjmp(HEAP32[$20 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$21) _longjmp($20 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $21 = -1;
  if (($21 | 0) == 1) {
   $$reg2mem25$0$phi = $$reg2mem25$0;
   $$reg2mem45$0 = tempRet0;
   $$reg2mem25$0 = $$reg2mem25$0$phi;
   continue;
  }
  if (($19 + -26673 | 0) >>> 0 > 8) {
   $$0$reg2mem$0 = -2;
   break;
  }
  $26 = ($19 * 1e5 | 0) + 1627767296 | 0;
  HEAP32[$1 + 64 >> 2] = $26;
  __THREW__ = 0;
  $29 = invoke_ii(4, $26 << 2 | 0) | 0;
  $30 = __THREW__;
  __THREW__ = 0;
  if (($30 | 0) != 0 & (threwValue | 0) != 0) {
   $31 = _testSetjmp(HEAP32[$30 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$31) _longjmp($30 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $31 = -1;
  if (($31 | 0) == 1) {
   $$reg2mem25$0$phi = $$reg2mem25$0;
   $$reg2mem45$0 = tempRet0;
   $$reg2mem25$0 = $$reg2mem25$0$phi;
   continue;
  }
  HEAP32[$1 + 60 >> 2] = $29;
  if ($29 | 0) {
   $$0$reg2mem$0 = 0;
   break;
  }
  __THREW__ = 0;
  invoke_vi(6, $1 | 0);
  $35 = __THREW__;
  __THREW__ = 0;
  if (($35 | 0) != 0 & (threwValue | 0) != 0) {
   $36 = _testSetjmp(HEAP32[$35 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$36) _longjmp($35 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $36 = -1;
  if (($36 | 0) == 1) {
   $$reg2mem25$0$phi = $$reg2mem25$0;
   $$reg2mem45$0 = tempRet0;
   $$reg2mem25$0 = $$reg2mem25$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_v(1);
  $38 = __THREW__;
  __THREW__ = 0;
  if (($38 | 0) != 0 & (threwValue | 0) != 0) {
   $39 = _testSetjmp(HEAP32[$38 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$39) _longjmp($38 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $39 = -1;
  $$reg2mem25$0$phi = $$reg2mem25$0;
  $$reg2mem45$0 = tempRet0;
  $$reg2mem25$0 = $$reg2mem25$0$phi;
 }
 _free(_setjmpTable | 0);
 return $$0$reg2mem$0 | 0;
}

function ___getopt_long($argc, $argv, $optstring, $longopts, $idx, $longonly) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 $optstring = $optstring | 0;
 $longopts = $longopts | 0;
 $idx = $idx | 0;
 $longonly = $longonly | 0;
 var $$ = 0, $$3 = 0, $$lcssa63 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $0 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $49 = 0, $51 = 0, $7 = 0, $i$023 = 0, $i$023$lcssa = 0, $i$023$lcssa59 = 0, $i$02361 = 0, $name$021 = 0, $opt$022 = 0, $opt$09 = 0, $opt$09$lcssa62 = 0, label = 0;
 $0 = HEAP32[22] | 0;
 if (($0 | 0) == 0 | (HEAP32[1439] | 0) != 0) {
  HEAP32[1439] = 0;
  HEAP32[1440] = 0;
  HEAP32[22] = 1;
  $4 = 1;
 } else $4 = $0;
 L4 : do if (($4 | 0) < ($argc | 0)) {
  $7 = HEAP32[$argv + ($4 << 2) >> 2] | 0;
  if (!$7) $$3 = -1; else if ((HEAP8[$7 >> 0] | 0) == 45) {
   $$phi$trans$insert = $7 + 1 | 0;
   $$pre = HEAP8[$$phi$trans$insert >> 0] | 0;
   if (!$longonly) {
    if ($$pre << 24 >> 24 == 45) if (HEAP8[$7 + 2 >> 0] | 0) {
     $18 = 45;
     label = 10;
    }
   } else if ($$pre << 24 >> 24) {
    $18 = $$pre;
    label = 10;
   }
   if ((label | 0) == 10) {
    $16 = HEAP32[$longopts >> 2] | 0;
    $19 = $18 << 24 >> 24 == 45;
    L14 : do if ($16 | 0) {
     $$ = $19 ? $7 + 2 | 0 : $$phi$trans$insert;
     $22 = $16;
     $i$023 = 0;
     L16 : while (1) {
      $21 = HEAP8[$22 >> 0] | 0;
      L18 : do if (!($21 << 24 >> 24)) {
       $opt$09 = $$;
       label = 15;
      } else {
       $$pr = $21;
       $name$021 = $22;
       $opt$022 = $$;
       while (1) {
        if ($$pr << 24 >> 24 != (HEAP8[$opt$022 >> 0] | 0)) break L18;
        $26 = $name$021 + 1 | 0;
        $27 = $opt$022 + 1 | 0;
        $28 = HEAP8[$26 >> 0] | 0;
        if (!($28 << 24 >> 24)) {
         $opt$09 = $27;
         label = 15;
         break;
        } else {
         $$pr = $28;
         $name$021 = $26;
         $opt$022 = $27;
        }
       }
      } while (0);
      L22 : do if ((label | 0) == 15) {
       label = 0;
       $30 = HEAP8[$opt$09 >> 0] | 0;
       switch ($30 << 24 >> 24) {
       case 61:
       case 0:
        break;
       default:
        break L22;
       }
       $33 = HEAP32[$longopts + ($i$023 << 4) + 4 >> 2] | 0;
       if ($30 << 24 >> 24 != 61) {
        $$lcssa63 = $33;
        $i$023$lcssa = $i$023;
        label = 19;
        break L16;
       }
       if ($33 | 0) {
        $i$023$lcssa59 = $i$023;
        $opt$09$lcssa62 = $opt$09;
        label = 18;
        break L16;
       }
      } while (0);
      $49 = $i$023 + 1 | 0;
      $51 = HEAP32[$longopts + ($49 << 4) >> 2] | 0;
      if (!$51) break L14; else {
       $22 = $51;
       $i$023 = $49;
      }
     }
     do if ((label | 0) == 18) {
      HEAP32[1442] = $opt$09$lcssa62 + 1;
      $42 = $4;
      $i$02361 = $i$023$lcssa59;
     } else if ((label | 0) == 19) if (($$lcssa63 | 0) == 1) {
      $37 = $4 + 1 | 0;
      HEAP32[22] = $37;
      $39 = HEAP32[$argv + ($37 << 2) >> 2] | 0;
      HEAP32[1442] = $39;
      if (!$39) {
       $$3 = 58;
       break L4;
      } else {
       $42 = $37;
       $i$02361 = $i$023$lcssa;
       break;
      }
     } else {
      HEAP32[1442] = 0;
      $42 = $4;
      $i$02361 = $i$023$lcssa;
      break;
     } while (0);
     HEAP32[22] = $42 + 1;
     if ($idx | 0) HEAP32[$idx >> 2] = $i$02361;
     $45 = HEAP32[$longopts + ($i$02361 << 4) + 8 >> 2] | 0;
     $48 = HEAP32[$longopts + ($i$02361 << 4) + 12 >> 2] | 0;
     if (!$45) {
      $$3 = $48;
      break L4;
     }
     HEAP32[$45 >> 2] = $48;
     $$3 = 0;
     break L4;
    } while (0);
    if ($19) {
     HEAP32[22] = $4 + 1;
     $$3 = 63;
     break;
    }
   }
   $$3 = _getopt($argc, $argv, $optstring) | 0;
  } else $$3 = -1;
 } else $$3 = -1; while (0);
 return $$3 | 0;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $35 = 0, $7 = 0, $8 = 0, $wd$0$lcssa = 0, $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0;
 $0 = $s;
 do if (!(($0 ^ $d) & 3)) {
  $7 = ($n | 0) != 0;
  L3 : do if ($7 & ($0 & 3 | 0) != 0) {
   $$031 = $n;
   $$0430 = $s;
   $$0629 = $d;
   while (1) {
    $8 = HEAP8[$$0430 >> 0] | 0;
    HEAP8[$$0629 >> 0] = $8;
    if (!($8 << 24 >> 24)) {
     $$0$lcssa42 = $$031;
     $$04$lcssa43 = $$0430;
     $$06$lcssa44 = $$0629;
     break L3;
    }
    $10 = $$031 + -1 | 0;
    $11 = $$0430 + 1 | 0;
    $12 = $$0629 + 1 | 0;
    $16 = ($10 | 0) != 0;
    if ($16 & ($11 & 3 | 0) != 0) {
     $$031 = $10;
     $$0430 = $11;
     $$0629 = $12;
    } else {
     $$0$lcssa = $10;
     $$04$lcssa = $11;
     $$06$lcssa = $12;
     $$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$04$lcssa = $s;
   $$06$lcssa = $d;
   $$lcssa = $7;
   label = 5;
  } while (0);
  if ((label | 0) == 5) if ($$lcssa) {
   $$0$lcssa42 = $$0$lcssa;
   $$04$lcssa43 = $$04$lcssa;
   $$06$lcssa44 = $$06$lcssa;
  } else {
   $$28 = $$06$lcssa;
   $$3 = 0;
   break;
  }
  if (!(HEAP8[$$04$lcssa43 >> 0] | 0)) {
   $$28 = $$06$lcssa44;
   $$3 = $$0$lcssa42;
  } else {
   L11 : do if ($$0$lcssa42 >>> 0 > 3) {
    $$117 = $$0$lcssa42;
    $wd$018 = $$06$lcssa44;
    $ws$019 = $$04$lcssa43;
    while (1) {
     $20 = HEAP32[$ws$019 >> 2] | 0;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$1$lcssa = $$117;
      $wd$0$lcssa = $wd$018;
      $ws$0$lcssa = $ws$019;
      break L11;
     }
     HEAP32[$wd$018 >> 2] = $20;
     $26 = $$117 + -4 | 0;
     $27 = $ws$019 + 4 | 0;
     $28 = $wd$018 + 4 | 0;
     if ($26 >>> 0 > 3) {
      $$117 = $26;
      $wd$018 = $28;
      $ws$019 = $27;
     } else {
      $$1$lcssa = $26;
      $wd$0$lcssa = $28;
      $ws$0$lcssa = $27;
      break;
     }
    }
   } else {
    $$1$lcssa = $$0$lcssa42;
    $wd$0$lcssa = $$06$lcssa44;
    $ws$0$lcssa = $$04$lcssa43;
   } while (0);
   $$15$ph = $ws$0$lcssa;
   $$17$ph = $wd$0$lcssa;
   $$2$ph = $$1$lcssa;
   label = 11;
  }
 } else {
  $$15$ph = $s;
  $$17$ph = $d;
  $$2$ph = $n;
  label = 11;
 } while (0);
 L16 : do if ((label | 0) == 11) if (!$$2$ph) {
  $$28 = $$17$ph;
  $$3 = 0;
 } else {
  $$1511 = $$15$ph;
  $$1710 = $$17$ph;
  $$212 = $$2$ph;
  while (1) {
   $31 = HEAP8[$$1511 >> 0] | 0;
   HEAP8[$$1710 >> 0] = $31;
   if (!($31 << 24 >> 24)) {
    $$28 = $$1710;
    $$3 = $$212;
    break L16;
   }
   $33 = $$212 + -1 | 0;
   $35 = $$1710 + 1 | 0;
   if (!$33) {
    $$28 = $35;
    $$3 = 0;
    break;
   } else {
    $$1511 = $$1511 + 1 | 0;
    $$1710 = $35;
    $$212 = $33;
   }
  }
 } while (0);
 _memset($$28 | 0, 0, $$3 | 0) | 0;
 return $$28 | 0;
}

function _getopt($argc, $argv, $optstring) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 $optstring = $optstring | 0;
 var $$0 = 0, $0 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$04 = 0, $k$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp + 4 | 0;
 $d = sp;
 $0 = HEAP32[22] | 0;
 if (($0 | 0) == 0 | (HEAP32[1439] | 0) != 0) {
  HEAP32[1439] = 0;
  HEAP32[1440] = 0;
  HEAP32[22] = 1;
  $4 = 1;
 } else $4 = $0;
 L4 : do if (($4 | 0) < ($argc | 0)) {
  $7 = HEAP32[$argv + ($4 << 2) >> 2] | 0;
  if (!$7) $$0 = -1; else if ((HEAP8[$7 >> 0] | 0) == 45) {
   switch (HEAP8[$7 + 1 >> 0] | 0) {
   case 0:
    {
     $$0 = -1;
     break L4;
     break;
    }
   case 45:
    {
     if (!(HEAP8[$7 + 2 >> 0] | 0)) {
      HEAP32[22] = $4 + 1;
      $$0 = -1;
      break L4;
     }
     break;
    }
   default:
    {}
   }
   $17 = HEAP32[1440] | 0;
   if (!$17) {
    HEAP32[1440] = 1;
    $20 = 1;
   } else $20 = $17;
   $21 = _mbtowc($c, $7 + $20 | 0, 4) | 0;
   if (($21 | 0) < 0) {
    HEAP32[$c >> 2] = 65533;
    $28 = 65533;
    $k$0 = 1;
   } else {
    $28 = HEAP32[$c >> 2] | 0;
    $k$0 = $21;
   }
   $23 = HEAP32[22] | 0;
   $25 = HEAP32[$argv + ($23 << 2) >> 2] | 0;
   $26 = HEAP32[1440] | 0;
   $27 = $25 + $26 | 0;
   HEAP32[1441] = $28;
   $29 = $26 + $k$0 | 0;
   HEAP32[1440] = $29;
   if (!(HEAP8[$25 + $29 >> 0] | 0)) {
    HEAP32[22] = $23 + 1;
    HEAP32[1440] = 0;
   }
   $34 = _mbtowc($d, $optstring, 4) | 0;
   L22 : do if (!$34) $i$0$lcssa = 0; else {
    $39 = $34;
    $i$04 = 0;
    while (1) {
     if ((HEAP32[$d >> 2] | 0) == (HEAP32[$c >> 2] | 0)) {
      $i$0$lcssa = $i$04;
      break L22;
     }
     $42 = (($39 | 0) < 1 ? 1 : $39) + $i$04 | 0;
     $44 = _mbtowc($d, $optstring + $42 | 0, 4) | 0;
     if (!$44) {
      $i$0$lcssa = $42;
      break;
     } else {
      $39 = $44;
      $i$04 = $42;
     }
    }
   } while (0);
   $46 = HEAP32[$d >> 2] | 0;
   if (($46 | 0) != (HEAP32[$c >> 2] | 0)) {
    if (!((HEAP8[$optstring >> 0] | 0) != 58 & (HEAP32[23] | 0) != 0)) {
     $$0 = 63;
     break;
    }
    $53 = HEAP32[$argv >> 2] | 0;
    _write(2, $53, _strlen($53) | 0) | 0;
    _write(2, 5581, 18) | 0;
    _write(2, $27, $k$0) | 0;
    _write(2, 5600, 1) | 0;
    $$0 = 63;
    break;
   }
   if ((HEAP8[$optstring + ($i$0$lcssa + 1) >> 0] | 0) == 58) {
    $59 = HEAP32[22] | 0;
    if (($59 | 0) < ($argc | 0)) {
     HEAP32[22] = $59 + 1;
     HEAP32[1442] = (HEAP32[$argv + ($59 << 2) >> 2] | 0) + (HEAP32[1440] | 0);
     HEAP32[1440] = 0;
     $$0 = $46;
     break;
    }
    if ((HEAP8[$optstring >> 0] | 0) == 58) $$0 = 58; else if (!(HEAP32[23] | 0)) $$0 = 63; else {
     $65 = HEAP32[$argv >> 2] | 0;
     _write(2, $65, _strlen($65) | 0) | 0;
     _write(2, 5602, 31) | 0;
     _write(2, $27, $k$0) | 0;
     _write(2, 5600, 1) | 0;
     $$0 = 63;
    }
   } else $$0 = $46;
  } else $$0 = -1;
 } else $$0 = -1; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _data_extract_to_command($archive_handle) {
 $archive_handle = $archive_handle | 0;
 var $1 = 0, $19 = 0, $2 = 0, $29 = 0, $30 = 0, $32 = 0, $37 = 0, $43 = 0, $44 = 0, $47 = 0, $6 = 0, $8 = 0, $9 = 0, $p = 0, $tar_env = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $p = sp + 88 | 0;
 $tar_env = sp + 56 | 0;
 $1 = HEAP32[$archive_handle + 24 >> 2] | 0;
 $2 = $1 + 28 | 0;
 do if ((HEAP32[$2 >> 2] & 61440 | 0) == 32768) {
  HEAP32[$tar_env >> 2] = 0;
  HEAP32[$tar_env + 4 >> 2] = 0;
  HEAP32[$tar_env + 8 >> 2] = 0;
  HEAP32[$tar_env + 12 >> 2] = 0;
  HEAP32[$tar_env + 16 >> 2] = 0;
  HEAP32[$tar_env + 20 >> 2] = 0;
  HEAP32[$tar_env + 24 >> 2] = 0;
  HEAP32[$tar_env + 28 >> 2] = 0;
  _xpipe($p);
  $6 = _xfork() | 0;
  if (!$6) {
   $8 = HEAP32[$2 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = 2150;
   HEAP32[$vararg_buffer + 4 >> 2] = $8;
   $9 = _xasprintf(2139, $vararg_buffer) | 0;
   HEAP32[$tar_env >> 2] = $9;
   if (!(_putenv($9 | 0) | 0)) {
    _str2env($tar_env, 1, HEAP32[$1 >> 2] | 0);
    _str2env($tar_env, 2, HEAP32[$1 >> 2] | 0);
    _str2env($tar_env, 3, HEAP32[$1 + 8 >> 2] | 0);
    _str2env($tar_env, 4, HEAP32[$1 + 12 >> 2] | 0);
    $19 = HEAP32[$1 + 16 >> 2] | 0;
    _dec2env($tar_env, 5, $19, (($19 | 0) < 0) << 31 >> 31);
    _dec2env($tar_env, 6, HEAP32[$1 + 20 >> 2] | 0, 0);
    _dec2env($tar_env, 7, HEAP32[$1 + 24 >> 2] | 0, 0);
    _close(HEAP32[$p + 4 >> 2] | 0) | 0;
    _xdup2(HEAP32[$p >> 2] | 0, 0);
    _signal(13, 0) | 0;
    $29 = $archive_handle + 64 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $32 = HEAP32[$archive_handle + 60 >> 2] | 0;
    HEAP32[$vararg_buffer4 >> 2] = 2220;
    HEAP32[$vararg_buffer4 + 4 >> 2] = $32;
    HEAP32[$vararg_buffer4 + 8 >> 2] = 0;
    _execl($30, $30, $vararg_buffer4) | 0;
    HEAP32[$vararg_buffer9 >> 2] = HEAP32[$29 >> 2];
    _bb_perror_msg_and_die(2223, $vararg_buffer9);
   } else _bb_error_msg_and_die(1273, $vararg_buffer2);
  }
  _close(HEAP32[$p >> 2] | 0) | 0;
  $37 = $p + 4 | 0;
  _bb_copyfd_exact_size(HEAP32[$archive_handle + 4 >> 2] | 0, HEAP32[$37 >> 2] | 0, 0 - (HEAP32[$1 + 16 >> 2] | 0) | 0);
  _close(HEAP32[$37 >> 2] | 0) | 0;
  $43 = _wait_for_exitstatus($6) | 0;
  $44 = $43 & 127;
  if (!$44) {
   $47 = $43 >>> 8 & 255;
   if ($47 | 0) {
    HEAP32[$vararg_buffer12 >> 2] = HEAP32[$archive_handle + 60 >> 2];
    HEAP32[$vararg_buffer12 + 4 >> 2] = $47;
    _bb_error_msg_and_die(2242, $vararg_buffer12);
   }
  }
  if ((($43 & 65535) + -1 | 0) >>> 0 < 255) {
   HEAP32[$vararg_buffer16 >> 2] = HEAP32[$archive_handle + 60 >> 2];
   HEAP32[$vararg_buffer16 + 4 >> 2] = $44;
   _bb_error_msg_and_die(2266, $vararg_buffer16);
  } else break;
 } while (0);
 STACKTOP = sp;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $49 = 0, $5 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $3 = $f + 20 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) - $1 | 0;
 HEAP32[$iovs + 4 >> 2] = $5;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $9 = $f + 60 | 0;
 $10 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $5 + $len | 0;
 while (1) {
  if (!(HEAP32[1428] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0;
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(9, $f | 0);
   HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0;
   $15 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6;
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = $rem$0 - $cnt$0 | 0;
  $36 = HEAP32[$iov$0 + 4 >> 2] | 0;
  if ($cnt$0 >>> 0 > $36 >>> 0) {
   $38 = HEAP32[$10 >> 2] | 0;
   HEAP32[$0 >> 2] = $38;
   HEAP32[$3 >> 2] = $38;
   $49 = HEAP32[$iov$0 + 12 >> 2] | 0;
   $cnt$1 = $cnt$0 - $36 | 0;
   $iov$1 = $iov$0 + 8 | 0;
   $iovcnt$1 = $iovcnt$0 + -1 | 0;
  } else if (($iovcnt$0 | 0) == 2) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0;
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = 2;
  } else {
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = $iovcnt$0;
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1;
  HEAP32[$iov$1 + 4 >> 2] = $49 - $cnt$1;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $34;
 }
 if ((label | 0) == 6) {
  $20 = HEAP32[$10 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $20 + (HEAP32[$f + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$0 >> 2] = $25;
  HEAP32[$3 >> 2] = $25;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0$lcssa12 | 0) == 2) $$0 = 0; else $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   HEAP32[$arg >> 2] = $7;
   break L1;
   break;
  }
 case 10:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   $17 = $arg;
   HEAP32[$17 >> 2] = $14;
   HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$ap >> 2] = $26 + 4;
   $28 = $arg;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$28 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $38 = $37;
   $40 = HEAP32[$38 >> 2] | 0;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $37 + 8;
   $44 = $arg;
   HEAP32[$44 >> 2] = $40;
   HEAP32[$44 + 4 >> 2] = $43;
   break L1;
   break;
  }
 case 13:
  {
   $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$ap >> 2] = $53 + 4;
   $56 = ($54 & 65535) << 16 >> 16;
   $59 = $arg;
   HEAP32[$59 >> 2] = $56;
   HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   $70 = $arg;
   HEAP32[$70 >> 2] = $69 & 65535;
   HEAP32[$70 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $80 = HEAP32[$79 >> 2] | 0;
   HEAP32[$ap >> 2] = $79 + 4;
   $82 = ($80 & 255) << 24 >> 24;
   $85 = $arg;
   HEAP32[$85 >> 2] = $82;
   HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 4;
   $96 = $arg;
   HEAP32[$96 >> 2] = $95 & 255;
   HEAP32[$96 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $106 = +HEAPF64[$105 >> 3];
   HEAP32[$ap >> 2] = $105 + 8;
   HEAPF64[$arg >> 3] = $106;
   break L1;
   break;
  }
 case 18:
  {
   $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $113 = +HEAPF64[$112 >> 3];
   HEAP32[$ap >> 2] = $112 + 8;
   HEAPF64[$arg >> 3] = $113;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa30 = $$019;
    $s$0$lcssa29 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa30 = $$0$lcssa;
  $s$0$lcssa29 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa29 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa30;
   $s$2 = $s$0$lcssa29;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa30 >>> 0 > 3) {
    $$110 = $$0$lcssa30;
    $w$011 = $s$0$lcssa29;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa30;
    $w$0$lcssa = $s$0$lcssa29;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $33 = $$24 + -1 | 0;
    if (!$33) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else {
     $$24 = $33;
     $s$15 = $32;
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $s$2 : 0) | 0;
}

function _recursive_action($fileName, $flags, $fileAction, $dirAction, $userData, $depth) {
 $fileName = $fileName | 0;
 $flags = $flags | 0;
 $fileAction = $fileAction | 0;
 $dirAction = $dirAction | 0;
 $userData = $userData | 0;
 $depth = $depth | 0;
 var $$0 = 0, $$02 = 0, $$lcssa = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $statbuf = 0, $status$0$ph = 0, $status$0$ph$lcssa = 0, $true_action$fileAction = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $statbuf = sp;
 $true_action$fileAction = ($fileAction | 0) == 0 ? 2 : $fileAction;
 $$02 = ($dirAction | 0) == 0 ? 2 : $dirAction;
 L1 : do if ((FUNCTION_TABLE_iii[((($depth | 0) == 0 ? 6 : 2) & $flags | 0 ? 4 : 3) & 7]($fileName, $statbuf) | 0) < 0) if (!($flags & 64)) label = 20; else if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 2) if (!(_lstat($fileName, $statbuf) | 0)) $$0 = FUNCTION_TABLE_iiiii[$true_action$fileAction & 3]($fileName, $statbuf, $userData, $depth) | 0; else label = 20; else label = 20; else {
  if ((HEAP32[$statbuf + 24 >> 2] & 61440 | 0) != 16384) {
   $$0 = FUNCTION_TABLE_iiiii[$true_action$fileAction & 3]($fileName, $statbuf, $userData, $depth) | 0;
   break;
  }
  if (!($flags & 1)) {
   $$0 = FUNCTION_TABLE_iiiii[$$02 & 3]($fileName, $statbuf, $userData, $depth) | 0;
   break;
  }
  $25 = ($flags & 8 | 0) != 0;
  if (!$25) switch (FUNCTION_TABLE_iiiii[$$02 & 3]($fileName, $statbuf, $userData, $depth) | 0) {
  case 2:
   {
    $$0 = 1;
    break L1;
    break;
   }
  case 0:
   {
    label = 20;
    break L1;
    break;
   }
  default:
   {}
  }
  $27 = _opendir($fileName) | 0;
  if (!$27) label = 20; else {
   $29 = $depth + 1 | 0;
   $status$0$ph = 1;
   L17 : while (1) {
    while (1) {
     $30 = _readdir($27) | 0;
     if (!$30) {
      $status$0$ph$lcssa = $status$0$ph;
      break L17;
     }
     $33 = _concat_subpath_file($fileName, $30 + 19 | 0) | 0;
     if ($33 | 0) {
      $$lcssa = $33;
      break;
     }
    }
    $36 = (_recursive_action($$lcssa, $flags, $true_action$fileAction, $$02, $userData, $29) | 0) == 0;
    _free($$lcssa);
    $status$0$ph = $36 ? 0 : $status$0$ph;
   }
   _closedir($27) | 0;
   if ($25) if (!(FUNCTION_TABLE_iiiii[$$02 & 3]($fileName, $statbuf, $userData, $depth) | 0)) label = 20; else $$0 = $status$0$ph$lcssa; else $$0 = $status$0$ph$lcssa;
  }
 } while (0);
 if ((label | 0) == 20) if (!($flags & 32)) {
  _bb_simple_perror_msg($fileName);
  $$0 = 0;
 } else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $14 = 0, $19 = 0, $24 = 0, $26 = 0, $37 = 0, $4 = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $tio = sp + 52 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 if (!(_memchr(5634, $0 << 24 >> 24, 4) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = _malloc(8212) | 0;
  if (!$4) $$0 = 0; else {
   dest = $4;
   stop = dest + 112 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if (!(_strchr($mode, 43) | 0)) HEAP32[$4 >> 2] = $0 << 24 >> 24 == 114 ? 8 : 4;
   if (!(_strchr($mode, 101) | 0)) $12 = $0; else {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
    $12 = HEAP8[$mode >> 0] | 0;
   }
   if ($12 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $14 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($14 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $14 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $19 = HEAP32[$4 >> 2] | 128;
    HEAP32[$4 >> 2] = $19;
    $26 = $19;
   } else $26 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 + 60 >> 2] = $fd;
   HEAP32[$4 + 44 >> 2] = $4 + 120;
   HEAP32[$4 + 48 >> 2] = 8092;
   $24 = $4 + 75 | 0;
   HEAP8[$24 >> 0] = -1;
   if (!($26 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21505;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $tio;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$24 >> 0] = 10;
   }
   HEAP32[$4 + 32 >> 2] = 3;
   HEAP32[$4 + 36 >> 2] = 1;
   HEAP32[$4 + 40 >> 2] = 2;
   HEAP32[$4 + 12 >> 2] = 1;
   if (!(HEAP32[1429] | 0)) HEAP32[$4 + 76 >> 2] = -1;
   ___lock(5740);
   $37 = HEAP32[1434] | 0;
   HEAP32[$4 + 56 >> 2] = $37;
   if ($37 | 0) HEAP32[$37 + 52 >> 2] = $4;
   HEAP32[1434] = $4;
   ___unlock(5740);
   $$0 = $4;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _bb_verror_msg($s, $p, $strerr) {
 $s = $s | 0;
 $p = $p | 0;
 $strerr = $strerr | 0;
 var $$s = 0, $10 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $26 = 0, $33 = 0, $4 = 0, $5 = 0, $58 = 0, $6 = 0, $9 = 0, $msg = 0, $p2 = 0, $stack_msg = 0, $used$0 = 0, $used$1 = 0, $used$2 = 0, $used$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $msg = sp + 16 | 0;
 $stack_msg = sp + 24 | 0;
 $p2 = sp;
 L1 : do if (HEAP32[2] | 0) {
  $$s = ($s | 0) == 0 ? 6289 : $s;
  $4 = _strlen(HEAP32[1412] | 0) | 0;
  $5 = $4 + 2 | 0;
  $6 = ($strerr | 0) != 0;
  if ($6) $16 = _strlen($strerr) | 0; else $16 = 0;
  $9 = _strlen(HEAP32[3] | 0) | 0;
  $10 = 78 - $4 | 0;
  if (($10 | 0) > 0) {
   HEAP32[$p2 >> 2] = HEAP32[$p >> 2];
   $13 = _vsnprintf($stack_msg + $5 | 0, $10, $$s, $p2) | 0;
   HEAP32[$msg >> 2] = $stack_msg;
   $14 = $13 + $5 | 0;
   if (($14 | 0) < (77 - $16 - $9 | 0)) {
    $33 = $stack_msg;
    $used$0 = $14;
    label = 10;
   } else label = 6;
  } else label = 6;
  do if ((label | 0) == 6) {
   $19 = _vasprintf($msg, $$s, $p) | 0;
   if (($19 | 0) < 0) break L1;
   $22 = $19 + $5 | 0;
   $26 = _realloc(HEAP32[$msg >> 2] | 0, $16 + 3 + $9 + $22 | 0) | 0;
   if (!$26) {
    HEAP8[(HEAP32[$msg >> 2] | 0) + $19 >> 0] = 10;
    $used$3 = $19 + 1 | 0;
    break;
   } else {
    HEAP32[$msg >> 2] = $26;
    _memmove($26 + $5 | 0, $26 | 0, $19 | 0) | 0;
    $33 = $26;
    $used$0 = $22;
    label = 10;
    break;
   }
  } while (0);
  if ((label | 0) == 10) {
   _strcpy($33, HEAP32[1412] | 0) | 0;
   HEAP8[(HEAP32[$msg >> 2] | 0) + $4 >> 0] = 58;
   HEAP8[(HEAP32[$msg >> 2] | 0) + ($4 + 1) >> 0] = 32;
   if ($6) {
    if (!(HEAP8[$$s >> 0] | 0)) $used$1 = $used$0; else {
     HEAP8[(HEAP32[$msg >> 2] | 0) + $used$0 >> 0] = 58;
     HEAP8[(HEAP32[$msg >> 2] | 0) + ($used$0 + 1) >> 0] = 32;
     $used$1 = $used$0 + 2 | 0;
    }
    _strcpy((HEAP32[$msg >> 2] | 0) + $used$1 | 0, $strerr) | 0;
    $used$2 = $used$1 + $16 | 0;
   } else $used$2 = $used$0;
   _strcpy((HEAP32[$msg >> 2] | 0) + $used$2 | 0, HEAP32[3] | 0) | 0;
   $used$3 = $used$2 + $9 | 0;
  }
  if (HEAP32[2] & 1 | 0) {
   _fflush_all() | 0;
   _full_write(2, HEAP32[$msg >> 2] | 0, $used$3) | 0;
  }
  $58 = HEAP32[$msg >> 2] | 0;
  if (($58 | 0) != ($stack_msg | 0)) _free($58);
 } while (0);
 STACKTOP = sp;
 return;
}

function _xstrtoul_range_sfx($numstr, $base, $lower, $upper, $suffixes) {
 $numstr = $numstr | 0;
 $base = $base | 0;
 $lower = $lower | 0;
 $upper = $upper | 0;
 $suffixes = $suffixes | 0;
 var $$04 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $17 = 0, $28 = 0, $32 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $e = 0, $r$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 24 | 0;
 $vararg_buffer = sp;
 $e = sp + 28 | 0;
 $0 = HEAP8[$numstr >> 0] | 0;
 L1 : do switch ($0 << 24 >> 24) {
 case 43:
 case 45:
  break;
 default:
  {
   switch (($0 & 255) + 247 & 255 | 0) {
   case 0:
   case 1:
   case 2:
   case 3:
   case 4:
   case 23:
    {
     break L1;
     break;
    }
   default:
    {}
   }
   $4 = ___errno_location() | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = 0;
   $6 = _strtoul($numstr, $e, $base) | 0;
   $9 = HEAP32[$e >> 2] | 0;
   if (!((HEAP32[$4 >> 2] | 0) != 0 | ($9 | 0) == ($numstr | 0))) {
    HEAP32[$4 >> 2] = $5;
    L5 : do if (!$suffixes) label = 10; else {
     $13 = HEAP32[$suffixes + 4 >> 2] | 0;
     if (!$13) label = 10; else {
      $$04 = $suffixes;
      $36 = $13;
      while (1) {
       if (!(_strcmp($$04, $9) | 0)) {
        $$lcssa = $36;
        break;
       }
       $17 = HEAP32[$$04 + 12 >> 2] | 0;
       if (!$17) {
        label = 10;
        break L5;
       } else {
        $$04 = $$04 + 8 | 0;
        $36 = $17;
       }
      }
      if ((4294967295 / ($$lcssa >>> 0) | 0) >>> 0 >= $6 >>> 0) {
       $r$0 = Math_imul($$lcssa, $6) | 0;
       label = 11;
      }
     }
    } while (0);
    if ((label | 0) == 10) if (!(HEAP8[$9 >> 0] | 0)) {
     $r$0 = $6;
     label = 11;
    } else break L1;
    if ((label | 0) == 11) if (!($r$0 >>> 0 < $lower >>> 0 | $r$0 >>> 0 > $upper >>> 0)) {
     STACKTOP = sp;
     return $r$0 | 0;
    }
    HEAP32[$vararg_buffer >> 2] = $numstr;
    $28 = $vararg_buffer + 8 | 0;
    HEAP32[$28 >> 2] = $lower;
    HEAP32[$28 + 4 >> 2] = 0;
    $32 = $vararg_buffer + 16 | 0;
    HEAP32[$32 >> 2] = $upper;
    HEAP32[$32 + 4 >> 2] = 0;
    _bb_error_msg_and_die(2738, $vararg_buffer);
   }
  }
 } while (0);
 HEAP32[$vararg_buffer3 >> 2] = $numstr;
 _bb_error_msg_and_die(2775, $vararg_buffer3);
 return 0;
}

function _find_list_entry2($list, $filename) {
 $list = $list | 0;
 $filename = $filename | 0;
 var $$0 = 0, $$0111 = 0, $$pattern_slash_cnt$0 = 0, $1 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $buf = 0, $c$03 = 0, $c$15 = 0, $d$0$lcssa = 0, $d$06 = 0, $pattern_slash_cnt$0$lcssa = 0, $pattern_slash_cnt$02 = 0, $pattern_slash_cnt$14 = 0, $pattern_slash_cnt$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $buf = sp;
 L1 : do if (!$list) $$0 = 0; else {
  $1 = $buf + 4095 | 0;
  $$0111 = $list;
  while (1) {
   $2 = $$0111 + 4 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = HEAP8[$3 >> 0] | 0;
   if (!($4 << 24 >> 24)) $pattern_slash_cnt$0$lcssa = 0; else {
    $9 = $4;
    $c$03 = $3;
    $pattern_slash_cnt$02 = 0;
    while (1) {
     $8 = $c$03 + 1 | 0;
     $$pattern_slash_cnt$0 = ($9 << 24 >> 24 == 47 & 1) + $pattern_slash_cnt$02 | 0;
     $12 = HEAP8[$8 >> 0] | 0;
     if (!($12 << 24 >> 24)) {
      $pattern_slash_cnt$0$lcssa = $$pattern_slash_cnt$0;
      break;
     } else {
      $9 = $12;
      $c$03 = $8;
      $pattern_slash_cnt$02 = $$pattern_slash_cnt$0;
     }
    }
   }
   $6 = HEAP8[$filename >> 0] | 0;
   L9 : do if (!($6 << 24 >> 24)) $d$0$lcssa = $buf; else {
    $14 = $6;
    $c$15 = $filename;
    $d$06 = $buf;
    $pattern_slash_cnt$14 = $pattern_slash_cnt$0$lcssa;
    while (1) {
     if ($14 << 24 >> 24 == 47) if (($pattern_slash_cnt$14 | 0) < 1) {
      $d$0$lcssa = $d$06;
      break L9;
     } else $pattern_slash_cnt$2 = $pattern_slash_cnt$14 + -1 | 0; else $pattern_slash_cnt$2 = $pattern_slash_cnt$14;
     $18 = $c$15 + 1 | 0;
     $19 = $d$06 + 1 | 0;
     HEAP8[$d$06 >> 0] = $14;
     $20 = HEAP8[$18 >> 0] | 0;
     if (($19 | 0) != ($1 | 0) & $20 << 24 >> 24 != 0) {
      $14 = $20;
      $c$15 = $18;
      $d$06 = $19;
      $pattern_slash_cnt$14 = $pattern_slash_cnt$2;
     } else {
      $d$0$lcssa = $19;
      break;
     }
    }
   } while (0);
   HEAP8[$d$0$lcssa >> 0] = 0;
   if (!(_fnmatch(HEAP32[$2 >> 2] | 0, $buf | 0, 0) | 0)) {
    $$0 = $$0111;
    break L1;
   }
   $27 = HEAP32[$$0111 >> 2] | 0;
   if (!$27) {
    $$0 = 0;
    break;
   } else $$0111 = $27;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _bb_full_fd_action($src_fd, $dst_fd, $size) {
 $src_fd = $src_fd | 0;
 $dst_fd = $dst_fd | 0;
 $size = $size | 0;
 var $$0 = 0, $$0$ph = 0, $$15$ph = 0, $$3 = 0, $$3$lcssa = 0, $$8 = 0, $$lcssa = 0, $$lcssa52 = 0, $$not = 0, $$size = 0, $0 = 0, $11 = 0, $3 = 0, $5 = 0, $6 = 0, $buffer = 0, $status$2 = 0, $total$0 = 0, $total$0$lcssa = 0, $total$0$lcssa48 = 0, $total$0$ph = 0, $total$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $buffer = sp + 16 | 0;
 $0 = ($size | 0) < 0;
 $$size = $0 ? 0 - $size | 0 : $size;
 L1 : do if (($src_fd | 0) < 0) {
  $status$2 = -1;
  $total$2 = 0;
 } else {
  $3 = ($$size | 0) == 0;
  $$8 = $3 ? 1 : -1;
  $$0$ph = $dst_fd;
  $$15$ph = $3 ? 16777216 : $$size;
  $total$0$ph = 0;
  L3 : while (1) {
   $5 = ($$15$ph | 0) > 4096 ? 4096 : $$15$ph;
   $$0 = $$0$ph;
   $total$0 = $total$0$ph;
   while (1) {
    $6 = _safe_read($src_fd, $buffer, $5) | 0;
    if (($6 | 0) < 0) {
     $total$0$lcssa = $total$0;
     label = 5;
     break L3;
    }
    if (!$6) {
     $status$2 = 0;
     $total$2 = $total$0;
     break L1;
    }
    if (($$0 | 0) < 0) $$3 = $$0; else {
     $$not = (_full_write($$0, $buffer, $6) | 0) >= ($6 | 0);
     if ($0 | $$not) $$3 = $$not ? $$0 : -1; else {
      $total$0$lcssa48 = $total$0;
      label = 9;
      break L3;
     }
    }
    $11 = $6 + $total$0 | 0;
    if ($3) {
     $$0 = $$3;
     $total$0 = $11;
    } else {
     $$3$lcssa = $$3;
     $$lcssa = $11;
     $$lcssa52 = $6;
     break;
    }
   }
   if (($$15$ph | 0) == ($$lcssa52 | 0)) {
    $status$2 = 0;
    $total$2 = $$lcssa;
    break L1;
   } else {
    $$0$ph = $$3$lcssa;
    $$15$ph = $$15$ph - $$lcssa52 | 0;
    $total$0$ph = $$lcssa;
   }
  }
  if ((label | 0) == 5) {
   _bb_perror_msg(1249, $vararg_buffer);
   $status$2 = $$8;
   $total$2 = $total$0$lcssa;
   break;
  } else if ((label | 0) == 9) {
   _bb_perror_msg(1260, $vararg_buffer1);
   $status$2 = $$8;
   $total$2 = $total$0$lcssa48;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return ($status$2 | 0 ? -1 : $total$2) | 0;
}

function _convert_to_struct($db, $buffer, $result) {
 $db = $db | 0;
 $buffer = $buffer | 0;
 $result = $result | 0;
 var $$01 = 0, $$1$lcssa = 0, $$13 = 0, $$2 = 0, $$in = 0, $0 = 0, $11 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $30 = 0, $38 = 0, $40 = 0, $41 = 0, $48 = 0, $5 = 0, $6 = 0, $9 = 0, $def$0 = 0, $members$0$lcssa = 0, $members$04 = 0, $members$1 = 0, $off$0 = 0;
 $0 = $db + 4 | 0;
 _memset($result | 0, 0, HEAPU8[$db + 19 >> 0] | 0) | 0;
 $5 = $result + 12 | 0;
 $$01 = $buffer;
 $11 = HEAP8[$0 >> 0] | 0;
 $def$0 = $0;
 $off$0 = $db + 11 | 0;
 while (1) {
  $6 = $off$0 + 1 | 0;
  $9 = $result + (HEAPU8[$off$0 >> 0] | 0) | 0;
  do if (($11 << 24 >> 24 | 32 | 0) == 115) {
   HEAP32[$9 >> 2] = $$01;
   if (!(HEAP8[$$01 >> 0] | 0)) {
    $16 = HEAP8[$def$0 >> 0] | 0;
    if ($16 << 24 >> 24 != 83) {
     $19 = $16;
     break;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 22;
   }
   $19 = HEAP8[$def$0 >> 0] | 0;
  } else $19 = $11; while (0);
  if ($19 << 24 >> 24 == 73) {
   HEAP32[$9 >> 2] = _bb_strtoul($$01, 0, 10) | 0;
   $22 = HEAP8[$def$0 >> 0] | 0;
  } else $22 = $19;
  if ($22 << 24 >> 24 == 109) {
   $24 = _tokenize($$01, 44) | 0;
   $30 = (HEAP32[(HEAP32[1427] | 0) + 56 >> 2] | 0) + 4 & -4;
   HEAP32[$5 >> 2] = $30;
   if (($24 | 0) > 0) {
    $$13 = $$01;
    $$in = $24;
    $members$04 = $30;
    while (1) {
     if (!(HEAP8[$$13 >> 0] | 0)) $members$1 = $members$04; else {
      HEAP32[$members$04 >> 2] = $$13;
      $members$1 = $members$04 + 4 | 0;
     }
     $38 = $$13 + ((_strlen($$13) | 0) + 1) | 0;
     if (($$in | 0) > 1) {
      $$13 = $38;
      $$in = $$in + -1 | 0;
      $members$04 = $members$1;
     } else {
      $$1$lcssa = $38;
      $members$0$lcssa = $members$1;
      break;
     }
    }
   } else {
    $$1$lcssa = $$01;
    $members$0$lcssa = $30;
   }
   HEAP32[$members$0$lcssa >> 2] = 0;
   $$2 = $$1$lcssa;
  } else $$2 = $$01;
  $40 = $def$0 + 1 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  if (($41 & 255) < 33) break;
  $$01 = $$2 + ((_strlen($$2) | 0) + 1) | 0;
  $11 = $41;
  $def$0 = $40;
  $off$0 = $6;
 }
 $48 = (HEAP32[(___errno_location() | 0) >> 2] | 0) == 0;
 return ($48 ? $result : 0) | 0;
}

function _parse_common($fp, $db, $key, $field_pos) {
 $fp = $fp | 0;
 $db = $db | 0;
 $key = $key | 0;
 $field_pos = $field_pos | 0;
 var $$cnt$0 = 0, $$cnt$0$lcssa = 0, $$lcssa = 0, $0 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $5 = 0, $buf$0 = 0, $cnt$0$lcssa = 0, $cnt$04 = 0, $p$05 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _xmalloc_fgetline($fp) | 0;
 L1 : do if (!$0) label = 14; else {
  $2 = $db + 18 | 0;
  $3 = ($field_pos | 0) == -1;
  $5 = $0;
  L3 : while (1) {
   L5 : do switch (HEAP8[$5 >> 0] | 0) {
   case 35:
   case 0:
    break;
   default:
    {
     if ((_tokenize($5, 58) | 0) != (HEAPU8[$2 >> 0] | 0)) {
      HEAP32[$vararg_buffer >> 2] = HEAP32[$db >> 2];
      _bb_error_msg(2859, $vararg_buffer);
      break L5;
     }
     if ($3) {
      $$lcssa = $5;
      break L3;
     }
     if (!(_strcmp($key, _nth_string($5, $field_pos) | 0) | 0)) {
      $$lcssa = $5;
      break L3;
     }
    }
   } while (0);
   _free($5);
   $14 = _xmalloc_fgetline($fp) | 0;
   if (!$14) {
    label = 14;
    break L1;
   } else $5 = $14;
  }
  $16 = HEAP32[1427] | 0;
  $18 = HEAP32[$16 + 56 >> 2] | 0;
  $20 = $18 - $$lcssa | 0;
  $21 = $16 + 60 | 0;
  HEAP32[$21 >> 2] = $20;
  $24 = $18;
  if ((HEAP8[$2 >> 0] | 0) == 4) {
   if ($$lcssa >>> 0 < $24 >>> 0) {
    $cnt$04 = 3;
    $p$05 = $$lcssa;
    while (1) {
     $26 = $p$05 + 1 | 0;
     $$cnt$0 = ((HEAP8[$p$05 >> 0] | 0) == 44 & 1) + $cnt$04 | 0;
     if ($26 >>> 0 < $24 >>> 0) {
      $cnt$04 = $$cnt$0;
      $p$05 = $26;
     } else {
      $$cnt$0$lcssa = $$cnt$0;
      break;
     }
    }
    $cnt$0$lcssa = $$cnt$0$lcssa << 2;
   } else $cnt$0$lcssa = 12;
   $31 = $20 + $cnt$0$lcssa | 0;
   HEAP32[$21 >> 2] = $31;
   $buf$0 = _xrealloc($$lcssa, $31) | 0;
  } else $buf$0 = $$lcssa;
 } while (0);
 if ((label | 0) == 14) {
  $33 = HEAP32[1427] | 0;
  HEAP32[$33 + 60 >> 2] = HEAP32[$33 + 56 >> 2];
  $buf$0 = 0;
 }
 STACKTOP = sp;
 return $buf$0 | 0;
}

function _header_verbose_list($file_header) {
 $file_header = $file_header | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $7 = 0, $group$0 = 0, $tm_time = 0, $uid = 0, $user$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer14 = sp + 56 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $tm_time = sp + 60 | 0;
 $uid = sp + 104 | 0;
 _localtime_r($file_header + 32 | 0, $tm_time | 0) | 0;
 $2 = HEAP32[$file_header + 8 >> 2] | 0;
 if (!$2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$file_header + 20 >> 2];
  _sprintf($uid, 2487, $vararg_buffer) | 0;
  $user$0 = $uid;
 } else $user$0 = $2;
 $7 = HEAP32[$file_header + 12 >> 2] | 0;
 if (!$7) $group$0 = _utoa(HEAP32[$file_header + 24 >> 2] | 0) | 0; else $group$0 = $7;
 $14 = _bb_mode_string(HEAP32[$file_header + 28 >> 2] | 0) | 0;
 $16 = HEAP32[$file_header + 16 >> 2] | 0;
 $19 = (HEAP32[$tm_time + 20 >> 2] | 0) + 1900 | 0;
 $22 = (HEAP32[$tm_time + 16 >> 2] | 0) + 1 | 0;
 $24 = HEAP32[$tm_time + 12 >> 2] | 0;
 $26 = HEAP32[$tm_time + 8 >> 2] | 0;
 $28 = HEAP32[$tm_time + 4 >> 2] | 0;
 $29 = HEAP32[$tm_time >> 2] | 0;
 $30 = HEAP32[$file_header >> 2] | 0;
 HEAP32[$vararg_buffer1 >> 2] = $14;
 HEAP32[$vararg_buffer1 + 4 >> 2] = $user$0;
 HEAP32[$vararg_buffer1 + 8 >> 2] = $group$0;
 HEAP32[$vararg_buffer1 + 12 >> 2] = $16;
 HEAP32[$vararg_buffer1 + 16 >> 2] = $19;
 HEAP32[$vararg_buffer1 + 20 >> 2] = $22;
 HEAP32[$vararg_buffer1 + 24 >> 2] = $24;
 HEAP32[$vararg_buffer1 + 28 >> 2] = $26;
 HEAP32[$vararg_buffer1 + 32 >> 2] = $28;
 HEAP32[$vararg_buffer1 + 36 >> 2] = $29;
 HEAP32[$vararg_buffer1 + 40 >> 2] = $30;
 _printf(2490, $vararg_buffer1) | 0;
 $32 = HEAP32[$file_header + 4 >> 2] | 0;
 if ($32 | 0) {
  HEAP32[$vararg_buffer14 >> 2] = $32;
  _printf(2536, $vararg_buffer14) | 0;
 }
 _bb_putchar(10) | 0;
 STACKTOP = sp;
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $10 = 0, $14 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $$0$lcssa = $s;
   $$01$lcssa = $d;
  } else {
   $$0115 = $d;
   $$016 = $s;
   while (1) {
    $7 = HEAP8[$$016 >> 0] | 0;
    HEAP8[$$0115 >> 0] = $7;
    if (!($7 << 24 >> 24)) {
     $$03 = $$0115;
     break L1;
    }
    $9 = $$016 + 1 | 0;
    $10 = $$0115 + 1 | 0;
    if (!($9 & 3)) {
     $$0$lcssa = $9;
     $$01$lcssa = $10;
     break;
    } else {
     $$0115 = $10;
     $$016 = $9;
    }
   }
  }
  $14 = HEAP32[$$0$lcssa >> 2] | 0;
  if (!(($14 & -2139062144 ^ -2139062144) & $14 + -16843009)) {
   $22 = $14;
   $wd$010 = $$01$lcssa;
   $ws$011 = $$0$lcssa;
   while (1) {
    $20 = $ws$011 + 4 | 0;
    $21 = $wd$010 + 4 | 0;
    HEAP32[$wd$010 >> 2] = $22;
    $23 = HEAP32[$20 >> 2] | 0;
    if (!(($23 & -2139062144 ^ -2139062144) & $23 + -16843009)) {
     $22 = $23;
     $wd$010 = $21;
     $ws$011 = $20;
    } else {
     $wd$0$lcssa = $21;
     $ws$0$lcssa = $20;
     break;
    }
   }
  } else {
   $wd$0$lcssa = $$01$lcssa;
   $ws$0$lcssa = $$0$lcssa;
  }
  $$1$ph = $ws$0$lcssa;
  $$12$ph = $wd$0$lcssa;
  label = 8;
 } else {
  $$1$ph = $s;
  $$12$ph = $d;
  label = 8;
 } while (0);
 if ((label | 0) == 8) {
  $29 = HEAP8[$$1$ph >> 0] | 0;
  HEAP8[$$12$ph >> 0] = $29;
  if (!($29 << 24 >> 24)) $$03 = $$12$ph; else {
   $$128 = $$12$ph;
   $$19 = $$1$ph;
   while (1) {
    $31 = $$19 + 1 | 0;
    $32 = $$128 + 1 | 0;
    $33 = HEAP8[$31 >> 0] | 0;
    HEAP8[$32 >> 0] = $33;
    if (!($33 << 24 >> 24)) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;
     $$19 = $31;
    }
   }
  }
 }
 return $$03 | 0;
}

function _get_bits($bd, $bits_wanted) {
 $bd = $bd | 0;
 $bits_wanted = $bits_wanted | 0;
 var $$0$lcssa = 0, $$04 = 0, $$1 = 0, $0 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $bit_count$0$lcssa = 0, $bit_count$06 = 0, $bit_count$1 = 0, $bits$0$lcssa = 0, $bits$05 = 0, $bits$1 = 0;
 $0 = HEAP32[$bd >> 2] | 0;
 L1 : do if (($0 | 0) < ($bits_wanted | 0)) {
  $2 = $bd + 20 | 0;
  $3 = $bd + 16 | 0;
  $4 = $bd + 8 | 0;
  $5 = $bd + 24 | 0;
  $6 = $bd + 4 | 0;
  $$04 = $bits_wanted;
  $7 = HEAP32[$2 >> 2] | 0;
  $9 = HEAP32[$3 >> 2] | 0;
  $bit_count$06 = $0;
  $bits$05 = 0;
  while (1) {
   if (($7 | 0) == ($9 | 0)) {
    $12 = _read(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 4096) | 0;
    HEAP32[$3 >> 2] = $12;
    if (($12 | 0) < 1) break;
    HEAP32[$2 >> 2] = 0;
    $24 = 0;
    $39 = $12;
   } else {
    $24 = $7;
    $39 = $9;
   }
   $16 = HEAP32[$6 >> 2] | 0;
   if (($bit_count$06 | 0) > 23) {
    $20 = $$04 - $bit_count$06 | 0;
    $$1 = $20;
    $bit_count$1 = 0;
    $bits$1 = ($16 & (1 << $bit_count$06) + -1) << $20;
   } else {
    $$1 = $$04;
    $bit_count$1 = $bit_count$06;
    $bits$1 = $bits$05;
   }
   $23 = $24 + 1 | 0;
   HEAP32[$2 >> 2] = $23;
   $29 = HEAPU8[(HEAP32[$5 >> 2] | 0) + $24 >> 0] | 0 | $16 << 8;
   HEAP32[$6 >> 2] = $29;
   $30 = $bit_count$1 + 8 | 0;
   if (($30 | 0) < ($$1 | 0)) {
    $$04 = $$1;
    $7 = $23;
    $9 = $39;
    $bit_count$06 = $30;
    $bits$05 = $bits$1;
   } else {
    $$0$lcssa = $$1;
    $34 = $29;
    $bit_count$0$lcssa = $30;
    $bits$0$lcssa = $bits$1;
    break L1;
   }
  }
  _longjmp($bd + 68 | 0, -3);
 } else {
  $$0$lcssa = $bits_wanted;
  $34 = HEAP32[$bd + 4 >> 2] | 0;
  $bit_count$0$lcssa = $0;
  $bits$0$lcssa = 0;
 } while (0);
 $32 = $bit_count$0$lcssa - $$0$lcssa | 0;
 HEAP32[$bd >> 2] = $32;
 return $34 >>> $32 & (1 << $$0$lcssa) + -1 | $bits$0$lcssa | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $32 = ___lockfile($f) | 0; else $32 = 0;
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $6 & -33;
  $12 = $f + 48 | 0;
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $internal_buf + 80;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$17) $ret$1 = $22; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, 0, 0) | 0;
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $28 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $28 | $7;
  if ($32 | 0) ___unlockfile($f);
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1);
 $7 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$iov + 12 >> 2] = $2;
 if (!(HEAP32[1428] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2;
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(10, $f | 0);
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer + 8 >> 2] = 2;
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16;
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $$cast = $30;
   HEAP32[$f + 8 >> 2] = $$cast + ($cnt$0 - $27);
   if (!(HEAP32[$1 >> 2] | 0)) $$0 = $len; else {
    HEAP32[$31 >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $len;
   }
  } else $$0 = $cnt$0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___libc_sigaction($sig, $sa, $old) {
 $sig = $sig | 0;
 $sa = $sa | 0;
 $old = $old | 0;
 var $$0 = 0, $$not = 0, $12 = 0, $14 = 0, $2 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $7 = 0, $ksa = 0, $ksa_old = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ksa = sp + 36 | 0;
 $ksa_old = sp + 16 | 0;
 if ($sig >>> 0 > 64) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = -1;
 } else {
  $2 = ($sa | 0) != 0;
  if ($2) {
   $3 = HEAP32[$sa >> 2] | 0;
   if ($3 >>> 0 > 1) {
    $5 = $sig + -1 | 0;
    $7 = 5640 + ($5 >>> 5 << 2) | 0;
    HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1 << ($5 & 31);
    _dummy_588() | 0;
    $12 = HEAP32[$sa >> 2] | 0;
   } else $12 = $3;
   HEAP32[$ksa >> 2] = $12;
   $14 = HEAP32[$sa + 132 >> 2] | 0;
   HEAP32[$ksa + 4 >> 2] = $14 | 67108864;
   HEAP32[$ksa + 8 >> 2] = $14 & 4 | 0 ? 3 : 2;
   $23 = $sa + 4 | 0;
   $28 = HEAP32[$23 + 4 >> 2] | 0;
   $29 = $ksa + 12 | 0;
   HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$29 + 4 >> 2] = $28;
  }
  $33 = ($old | 0) != 0;
  HEAP32[$vararg_buffer >> 2] = $sig;
  HEAP32[$vararg_buffer + 4 >> 2] = $2 ? $ksa : 0;
  HEAP32[$vararg_buffer + 8 >> 2] = $33 ? $ksa_old : 0;
  HEAP32[$vararg_buffer + 12 >> 2] = 8;
  $$not = (___syscall_ret(___syscall174(174, $vararg_buffer | 0) | 0) | 0) != 0;
  if ($$not | $33 ^ 1) $$0 = $$not << 31 >> 31; else {
   HEAP32[$old >> 2] = HEAP32[$ksa_old >> 2];
   HEAP32[$old + 132 >> 2] = HEAP32[$ksa_old + 4 >> 2];
   $43 = $ksa_old + 12 | 0;
   $48 = HEAP32[$43 + 4 >> 2] | 0;
   $49 = $old + 4 | 0;
   HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
   HEAP32[$49 + 4 >> 2] = $48;
   $$0 = 0;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _chksum_and_xwrite($fd, $hp) {
 $fd = $fd | 0;
 $hp = $hp | 0;
 var $$$i = 0, $$lcssa = 0, $1 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $chksum$0 = 0, $cp$0 = 0, $size$0 = 0, $tempBuffer$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $tempBuffer$i = sp + 8 | 0;
 $1 = $hp + 257 | 0;
 $2 = $1;
 HEAP8[$2 >> 0] = 117;
 HEAP8[$2 + 1 >> 0] = 115;
 HEAP8[$2 + 2 >> 0] = 116;
 HEAP8[$2 + 3 >> 0] = 97;
 $4 = $1 + 4 | 0;
 HEAP8[$4 >> 0] = 114;
 HEAP8[$4 + 1 >> 0] = 32;
 HEAP8[$4 + 2 >> 0] = 32;
 HEAP8[$4 + 3 >> 0] = 0;
 $5 = $hp + 148 | 0;
 $6 = $5;
 $7 = $6;
 HEAP8[$7 >> 0] = 32;
 HEAP8[$7 + 1 >> 0] = 32;
 HEAP8[$7 + 2 >> 0] = 32;
 HEAP8[$7 + 3 >> 0] = 32;
 $9 = $6 + 4 | 0;
 HEAP8[$9 >> 0] = 32;
 HEAP8[$9 + 1 >> 0] = 32;
 HEAP8[$9 + 2 >> 0] = 32;
 HEAP8[$9 + 3 >> 0] = 32;
 $chksum$0 = 0;
 $cp$0 = $hp;
 $size$0 = 512;
 while (1) {
  $13 = (HEAPU8[$cp$0 >> 0] | 0) + $chksum$0 | 0;
  $14 = $size$0 + -1 | 0;
  if (!$14) {
   $$lcssa = $13;
   break;
  } else {
   $chksum$0 = $13;
   $cp$0 = $cp$0 + 1 | 0;
   $size$0 = $14;
  }
 }
 HEAP32[$vararg_buffer >> 2] = 7;
 HEAP32[$vararg_buffer + 4 >> 2] = $$lcssa;
 $18 = $tempBuffer$i + ((_sprintf($tempBuffer$i, 1782, $vararg_buffer) | 0) + -7) | 0;
 $$$i = (HEAP8[$18 >> 0] | 0) == 48 ? $18 + 1 | 0 : $18;
 HEAP8[$5 >> 0] = HEAP8[$$$i >> 0] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[$$$i + 1 >> 0] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[$$$i + 2 >> 0] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[$$$i + 3 >> 0] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[$$$i + 4 >> 0] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[$$$i + 5 >> 0] | 0;
 HEAP8[$5 + 6 >> 0] = HEAP8[$$$i + 6 >> 0] | 0;
 _xwrite($fd, $hp, 512);
 STACKTOP = sp;
 return;
}

function _writeLongname($fd, $type, $name, $dir) {
 $fd = $fd | 0;
 $type = $type | 0;
 $name = $name | 0;
 $dir = $dir | 0;
 var $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $header = 0, $tempBuffer$i = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $tempBuffer$i = sp + 520 | 0;
 $header = sp + 8 | 0;
 $0 = ($dir | 0) != 0;
 $1 = $0 & 1;
 $2 = _strlen($name) | 0;
 $4 = ($0 ? 2 : 1) + $2 | 0;
 _memset($header + 14 | 0, 0, 498) | 0;
 dest = $header;
 src = 1788;
 stop = dest + 14 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $header + 100 | 0;
 src = 1802;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$vararg_buffer >> 2] = 12;
 HEAP32[$vararg_buffer + 4 >> 2] = $4;
 $10 = $tempBuffer$i + ((_sprintf($tempBuffer$i, 1782, $vararg_buffer) | 0) + -12) | 0;
 dest = $header + 124 | 0;
 src = (HEAP8[$10 >> 0] | 0) == 48 ? $10 + 1 | 0 : $10;
 stop = dest + 12 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$header + 156 >> 0] = $type;
 _chksum_and_xwrite($fd, $header);
 $16 = $1 << 1;
 _xwrite($fd, $name, $4 - $16 | 0);
 _xwrite($fd, 2603, $16);
 $19 = 0 - $4 & 511;
 _memset($header | 0, 0, $19 | 0) | 0;
 _xwrite($fd, $header, $19);
 STACKTOP = sp;
 return;
}

function _tokenize($buffer, $ch) {
 $buffer = $buffer | 0;
 $ch = $ch | 0;
 var $$lcssa = 0, $11 = 0, $12 = 0, $2 = 0, $7 = 0, $num_fields$0 = 0, $num_fields$1 = 0, $p$0 = 0, $p$1$lcssa = 0, $p$1$lcssa$lcssa = 0, $p$14 = 0, $p$2 = 0, $s$0 = 0, $s$2 = 0;
 $num_fields$0 = 0;
 $p$0 = $buffer;
 $s$0 = $buffer;
 while (1) {
  switch (HEAP8[$s$0 >> 0] | 0) {
  case 9:
  case 32:
   {
    _overlapping_strcpy($s$0, _skip_whitespace($s$0) | 0);
    break;
   }
  default:
   {}
  }
  $2 = HEAP8[$p$0 >> 0] | 0;
  if ($2 << 24 >> 24 == 0 | ($2 << 24 >> 24 | 0) == ($ch | 0)) {
   L8 : do if (($p$0 | 0) == ($s$0 | 0)) $p$1$lcssa = $s$0; else {
    $p$14 = $p$0;
    while (1) {
     $7 = $p$14 + -1 | 0;
     switch (HEAP8[$7 >> 0] | 0) {
     case 9:
     case 32:
      break;
     default:
      {
       $p$1$lcssa = $p$14;
       break L8;
      }
     }
     if (($7 | 0) == ($s$0 | 0)) {
      $p$1$lcssa = $s$0;
      break L8;
     } else $p$14 = $7;
    }
   } while (0);
   if (($p$1$lcssa | 0) == ($p$0 | 0)) $12 = $2; else {
    _overlapping_strcpy($p$1$lcssa, $p$0);
    $12 = HEAP8[$p$0 >> 0] | 0;
   }
   $11 = $num_fields$0 + 1 | 0;
   if (!($12 << 24 >> 24)) {
    $$lcssa = $11;
    $p$1$lcssa$lcssa = $p$1$lcssa;
    break;
   }
   HEAP8[$p$1$lcssa >> 0] = 0;
   $num_fields$1 = $11;
   $p$2 = $p$1$lcssa;
   $s$2 = $p$1$lcssa + 1 | 0;
  } else {
   $num_fields$1 = $num_fields$0;
   $p$2 = $p$0;
   $s$2 = $s$0;
  }
  $num_fields$0 = $num_fields$1;
  $p$0 = $p$2 + 1 | 0;
  $s$0 = $s$2;
 }
 HEAP32[(HEAP32[1427] | 0) + 56 >> 2] = $p$1$lcssa$lcssa + 1;
 return $$lcssa | 0;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $8 = 0, $dummy = 0, $dummy$wc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $dummy = sp;
 L1 : do if (!$src) $$0 = 0; else {
  do if ($n | 0) {
   $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
   $3 = HEAP8[$src >> 0] | 0;
   $4 = $3 & 255;
   if ($3 << 24 >> 24 > -1) {
    HEAP32[$dummy$wc >> 2] = $4;
    $$0 = $3 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $8 = $4 + -194 | 0;
   if ($8 >>> 0 <= 50) {
    $10 = $src + 1 | 0;
    $12 = HEAP32[96 + ($8 << 2) >> 2] | 0;
    if ($n >>> 0 < 4) if ($12 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0) break;
    $20 = HEAPU8[$10 >> 0] | 0;
    $21 = $20 >>> 3;
    if (($21 + -16 | $21 + ($12 >> 26)) >>> 0 <= 7) {
     $29 = $20 + -128 | $12 << 6;
     if (($29 | 0) >= 0) {
      HEAP32[$dummy$wc >> 2] = $29;
      $$0 = 2;
      break L1;
     }
     $33 = HEAPU8[$src + 2 >> 0] | 0;
     if (($33 & 192 | 0) == 128) {
      $38 = $33 + -128 | $29 << 6;
      if (($38 | 0) >= 0) {
       HEAP32[$dummy$wc >> 2] = $38;
       $$0 = 3;
       break L1;
      }
      $42 = HEAPU8[$src + 3 >> 0] | 0;
      if (($42 & 192 | 0) == 128) {
       HEAP32[$dummy$wc >> 2] = $42 + -128 | $38 << 6;
       $$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 L1 : do if (!$0) $$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $$02$lcssa = $s; else {
   $5 = $c & 255;
   $$0211 = $s;
   while (1) {
    $8 = HEAP8[$$0211 >> 0] | 0;
    if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
     $$0 = $$0211;
     break L1;
    }
    $11 = $$0211 + 1 | 0;
    if (!($11 & 3)) {
     $$02$lcssa = $11;
     break;
    } else $$0211 = $11;
   }
  }
  $15 = Math_imul($0, 16843009) | 0;
  $16 = HEAP32[$$02$lcssa >> 2] | 0;
  L10 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
   $23 = $16;
   $w$08 = $$02$lcssa;
   while (1) {
    $22 = $23 ^ $15;
    if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
     $w$0$lcssa = $w$08;
     break L10;
    }
    $29 = $w$08 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    if (!(($30 & -2139062144 ^ -2139062144) & $30 + -16843009)) {
     $23 = $30;
     $w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else $w$0$lcssa = $$02$lcssa; while (0);
  $36 = $c & 255;
  $$1 = $w$0$lcssa;
  while (1) {
   $37 = HEAP8[$$1 >> 0] | 0;
   if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $11 = 0, $19 = 0, $29 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$0 >> 2] | 0;
  label = 5;
 } else $$0 = 0; else {
  $9 = $1;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $7;
  if (($9 - $7 | 0) >>> 0 < $l >>> 0) {
   $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $11;
     $i$1 = 0;
     break L10;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     $i$0$lcssa12 = $i$0;
     break;
    } else $i$0 = $19;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, $s, $i$0$lcssa12) | 0) >>> 0 < $i$0$lcssa12 >>> 0) {
    $$0 = $i$0$lcssa12;
    break L5;
   }
   $$01 = $l - $i$0$lcssa12 | 0;
   $$02 = $s + $i$0$lcssa12 | 0;
   $29 = HEAP32[$6 >> 2] | 0;
   $i$1 = $i$0$lcssa12;
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $11;
   $i$1 = 0;
  } while (0);
  _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $$01;
  $$0 = $i$1 + $$01 | 0;
 } while (0);
 return $$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert3 = 0, $$pre = 0, $0 = 0, $1 = 0, $13 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) < 0) label = 4; else {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) {
    $41 = $$pre;
    label = 9;
   } else {
    $13 = HEAP32[$f + 4 >> 2] | 0;
    $18 = $9 - (HEAP32[$f + 108 >> 2] | 0) | 0;
    $20 = $$pre;
    if (($$pre - $13 | 0) < ($18 | 0)) {
     $41 = $20;
     label = 9;
    } else {
     HEAP32[$f + 100 >> 2] = $13 + ($18 + -1);
     $25 = $20;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $$pre;
    $25 = $41;
   }
   $$phi$trans$insert3 = $f + 4 | 0;
   if (!$25) $36 = HEAP32[$$phi$trans$insert3 >> 2] | 0; else {
    $27 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
    $29 = $f + 108 | 0;
    HEAP32[$29 >> 2] = $25 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
    $36 = $27;
   }
   $35 = $36 + -1 | 0;
   if ((HEAPU8[$35 >> 0] | 0 | 0) == ($6 | 0)) $$0 = $6; else {
    HEAP8[$35 >> 0] = $6;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _writeTarFile($tar_fd, $verboseFlag, $recurseFlags, $include, $exclude) {
 $tar_fd = $tar_fd | 0;
 $verboseFlag = $verboseFlag | 0;
 $recurseFlags = $recurseFlags | 0;
 $include = $include | 0;
 $exclude = $exclude | 0;
 var $$01 = 0, $$errorFlag$0 = 0, $8 = 0, $9 = 0, $errorFlag$0$lcssa = 0, $errorFlag$02 = 0, $tbInfo = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp + 168 | 0;
 $tbInfo = sp;
 HEAP32[$tbInfo + 12 >> 2] = 0;
 HEAP32[$tbInfo >> 2] = $tar_fd;
 HEAP32[$tbInfo + 4 >> 2] = $verboseFlag;
 _xfstat($tar_fd, $tbInfo + 24 | 0, 1709);
 HEAP32[$tbInfo + 8 >> 2] = $exclude;
 if (!$include) $errorFlag$0$lcssa = 0; else {
  $$01 = $include;
  $errorFlag$02 = 0;
  while (1) {
   $8 = (_recursive_action(HEAP32[$$01 + 4 >> 2] | 0, $recurseFlags, 1, 1, $tbInfo, 0) | 0) == 0;
   $$errorFlag$0 = $8 ? 1 : $errorFlag$02;
   $9 = HEAP32[$$01 >> 2] | 0;
   if (!$9) {
    $errorFlag$0$lcssa = $$errorFlag$0;
    break;
   } else {
    $$01 = $9;
    $errorFlag$02 = $$errorFlag$0;
   }
  }
 }
 _memset(_bb_common_bufsiz1 | 0, 0, 1024) | 0;
 _xwrite(HEAP32[$tbInfo >> 2] | 0, _bb_common_bufsiz1, 1024);
 _close(HEAP32[$tbInfo >> 2] | 0) | 0;
 if ($errorFlag$0$lcssa | 0) _bb_error_msg(1878, $vararg_buffer);
 STACKTOP = sp;
 return $errorFlag$0$lcssa | 0;
}

function _execl($path, $argv0, $varargs) {
 $path = $path | 0;
 $argv0 = $argv0 | 0;
 $varargs = $varargs | 0;
 var $$lcssa = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $ap = 0, $argc$0 = 0, $argc$0$lcssa = 0, $i$0$lcssa = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $argc$0 = 1;
 while (1) {
  $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$ap >> 2] = $5 + 4;
  $8 = $argc$0 + 1 | 0;
  if (!$6) {
   $$lcssa = $8;
   $argc$0$lcssa = $argc$0;
   break;
  } else $argc$0 = $8;
 }
 $9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$lcssa << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 HEAP32[$ap >> 2] = $varargs;
 HEAP32[$9 >> 2] = $argv0;
 if (($argc$0$lcssa | 0) > 1) {
  $i$01 = 1;
  while (1) {
   $16 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$ap >> 2] = $16 + 4;
   HEAP32[$9 + ($i$01 << 2) >> 2] = $17;
   $19 = $i$01 + 1 | 0;
   if (($19 | 0) == ($argc$0$lcssa | 0)) {
    $i$0$lcssa = $argc$0$lcssa;
    break;
   } else $i$01 = $19;
  }
 } else $i$0$lcssa = 1;
 HEAP32[$9 + ($i$0$lcssa << 2) >> 2] = 0;
 $21 = _execv($path, $9) | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 652;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0;
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
  HEAP32[$f + 48 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  HEAP32[$f + 44 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  HEAP32[$f + 28 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$$$02) $$0 = $13; else {
   $15 = HEAP32[$8 >> 2] | 0;
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getOctal($str, $len) {
 $str = $str | 0;
 $len = $len | 0;
 var $$012 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $6 = 0, $end = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $end = sp + 4 | 0;
 HEAP8[$str + $len >> 0] = 0;
 $1 = _strtoull($str, $end, 8) | 0;
 switch (HEAP8[HEAP32[$end >> 2] >> 0] | 0) {
 case 32:
 case 0:
  {
   $28 = tempRet0;
   $29 = $1;
   break;
  }
 default:
  {
   $6 = HEAP8[$str >> 0] | 0;
   if (!($6 & 128)) _bb_error_msg_and_die(2347, sp);
   $12 = ($6 << 25 >> 25 & 255) << 24 >> 24;
   $14 = (($12 | 0) < 0) << 31 >> 31;
   $15 = $len + -1 | 0;
   if (!$15) {
    $28 = $14;
    $29 = $12;
   } else {
    $$012 = $str;
    $17 = $12;
    $18 = $14;
    $26 = $15;
    while (1) {
     $19 = _bitshift64Shl($17 | 0, $18 | 0, 8) | 0;
     $20 = tempRet0;
     $21 = $$012 + 1 | 0;
     $24 = HEAPU8[$21 >> 0] | $19;
     $25 = $26 + -1 | 0;
     if (!$25) {
      $28 = $20;
      $29 = $24;
      break;
     } else {
      $$012 = $21;
      $17 = $24;
      $18 = $20;
      $26 = $25;
     }
    }
   }
  }
 }
 tempRet0 = $28;
 STACKTOP = sp;
 return $29 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $23 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do if (!$f) {
  if (!(HEAP32[162] | 0)) $27 = 0; else $27 = _fflush(HEAP32[162] | 0) | 0;
  ___lock(5740);
  $$012 = HEAP32[1434] | 0;
  if (!$$012) $r$0$lcssa = $27; else {
   $$014 = $$012;
   $r$03 = $27;
   while (1) {
    if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) $23 = ___lockfile($$014) | 0; else $23 = 0;
    if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; else $r$1 = $r$03;
    if ($23 | 0) ___unlockfile($$014);
    $$01 = HEAP32[$$014 + 56 >> 2] | 0;
    if (!$$01) {
     $r$0$lcssa = $r$1;
     break;
    } else {
     $$014 = $$01;
     $r$03 = $r$1;
    }
   }
  }
  ___unlock(5740);
  $$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $$0 = $6; else {
   ___unlockfile($f);
   $$0 = $6;
  }
 } while (0);
 return $$0 | 0;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $9 | 48;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   if ($8 >>> 0 > 9 | ($8 | 0) == 9 & $7 >>> 0 > 4294967295) {
    $$05 = $13;
    $7 = $14;
    $8 = tempRet0;
   } else {
    $$lcssa19 = $13;
    $28 = $14;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 if (!$$01$lcssa$off0) $$1$lcssa = $$0$lcssa; else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48;
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = ($y$03 >>> 0) / 10 | 0;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $$01$lcssa = $s;
  label = 4;
 } else {
  $$014 = $s;
  $21 = $0;
  while (1) {
   if (!(HEAP8[$$014 >> 0] | 0)) {
    $$pn = $21;
    break L1;
   }
   $5 = $$014 + 1 | 0;
   $6 = $5;
   if (!($6 & 3)) {
    $$01$lcssa = $5;
    label = 4;
    break;
   } else {
    $$014 = $5;
    $21 = $6;
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) $w$0 = $w$0 + 4 | 0; else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) $$1$lcssa = $w$0$lcssa; else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18;
     break;
    } else $$pn15 = $18;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pad = sp;
 do if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $3 = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  $9 = ($7 & 32 | 0) == 0;
  if ($3 >>> 0 > 255) {
   $10 = $w - $l | 0;
   $$02 = $3;
   $17 = $7;
   $18 = $9;
   while (1) {
    if ($18) {
     ___fwritex($pad, 256, $f) | 0;
     $14 = HEAP32[$f >> 2] | 0;
    } else $14 = $17;
    $11 = $$02 + -256 | 0;
    $15 = ($14 & 32 | 0) == 0;
    if ($11 >>> 0 > 255) {
     $$02 = $11;
     $17 = $14;
     $18 = $15;
    } else break;
   }
   if ($15) $$0$lcssa6 = $10 & 255; else break;
  } else if ($9) $$0$lcssa6 = $3; else break;
  ___fwritex($pad, $$0$lcssa6, $f) | 0;
 } while (0);
 STACKTOP = sp;
 return;
}

function _readdir($dir) {
 $dir = $dir | 0;
 var $$1 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $2 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $dir + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $dir + 12 | 0;
 do if (($1 | 0) < (HEAP32[$2 >> 2] | 0)) {
  $14 = $1;
  label = 6;
 } else {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$dir >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $dir + 24;
  HEAP32[$vararg_buffer + 8 >> 2] = 2048;
  $7 = ___syscall220(220, $vararg_buffer | 0) | 0;
  if (($7 | 0) >= 1) {
   HEAP32[$2 >> 2] = $7;
   HEAP32[$0 >> 2] = 0;
   $14 = 0;
   label = 6;
   break;
  }
  if (($7 | 0) < 0 & ($7 | 0) != -2) {
   HEAP32[(___errno_location() | 0) >> 2] = 0 - $7;
   $$1 = 0;
  } else $$1 = 0;
 } while (0);
 if ((label | 0) == 6) {
  $13 = $dir + 24 + $14 | 0;
  HEAP32[$0 >> 2] = (HEAPU16[$13 + 16 >> 1] | 0) + $14;
  HEAP32[$dir + 4 >> 2] = HEAP32[$13 + 8 >> 2];
  $$1 = $13;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _strip_unsafe_prefix($str) {
 $str = $str | 0;
 var $$lcssa = 0, $$lcssa5 = 0, $6 = 0, $7 = 0, $8 = 0, $cp$0 = 0, $cp$0$$le = 0, $cp$0$lcssa = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $cp$0 = $str;
 while (1) {
  if ((HEAP8[$cp$0 >> 0] | 0) == 47) {
   $cp$0 = $cp$0 + 1 | 0;
   continue;
  }
  if (!(_is_prefixed_with($cp$0, 2557) | 0)) {
   $6 = _strstr($cp$0, 2556) | 0;
   $7 = ($6 | 0) == 0;
   $8 = $6 + 4 | 0;
   if ($7) {
    $$lcssa = $7;
    $$lcssa5 = $8;
    $cp$0$lcssa = $cp$0;
    break;
   } else {
    $cp$0 = $8;
    continue;
   }
  } else {
   $cp$0 = $cp$0 + 3 | 0;
   continue;
  }
 }
 $cp$0$$le = $$lcssa ? $cp$0$lcssa : $$lcssa5;
 if (!(($cp$0$$le | 0) == ($str | 0) | (HEAP32[1415] | 0) != 0)) {
  HEAP32[1415] = 1;
  HEAP32[$vararg_buffer >> 2] = $cp$0$$le - $str;
  HEAP32[$vararg_buffer + 4 >> 2] = $str;
  _bb_error_msg(2561, $vararg_buffer);
 }
 STACKTOP = sp;
 return $cp$0$$le | 0;
}

function _fstat($fd, $st) {
 $fd = $fd | 0;
 $st = $st | 0;
 var $$0 = 0, $0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer6 = sp + 40 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 HEAP32[$vararg_buffer + 4 >> 2] = $st;
 $0 = ___syscall197(197, $vararg_buffer | 0) | 0;
 if (($0 | 0) == -9) {
  HEAP32[$vararg_buffer2 >> 2] = $fd;
  HEAP32[$vararg_buffer2 + 4 >> 2] = 1;
  if ((___syscall221(221, $vararg_buffer2 | 0) | 0) < 0) label = 3; else {
   ___procfdname($vararg_buffer2, $fd);
   HEAP32[$vararg_buffer6 >> 2] = $vararg_buffer2;
   HEAP32[$vararg_buffer6 + 4 >> 2] = $st;
   $$0 = ___syscall_ret(___syscall195(195, $vararg_buffer6 | 0) | 0) | 0;
  }
 } else label = 3;
 if ((label | 0) == 3) $$0 = ___syscall_ret($0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _bb_get_chunk_from_file($file, $end) {
 $file = $file | 0;
 $end = $end | 0;
 var $0 = 0, $1 = 0, $15 = 0, $8 = 0, $idx$0 = 0, $idx$1 = 0, $linebuf$0 = 0, $linebuf$1 = 0, $linebuf$2 = 0, $linebuf$3 = 0;
 $0 = ($end | 0) != 0;
 $idx$0 = 0;
 $linebuf$0 = 0;
 while (1) {
  $1 = _getc_unlocked($file) | 0;
  if (($1 | 0) == -1) {
   $idx$1 = $idx$0;
   $linebuf$2 = $linebuf$0;
   break;
  }
  if (!($idx$0 & 255)) $linebuf$1 = _xrealloc($linebuf$0, $idx$0 + 256 | 0) | 0; else $linebuf$1 = $linebuf$0;
  $8 = $idx$0 + 1 | 0;
  HEAP8[$linebuf$1 + $idx$0 >> 0] = $1;
  if (($1 | 0) == 0 | $0 & ($1 | 0) == 10) {
   $idx$1 = $8;
   $linebuf$2 = $linebuf$1;
   break;
  } else {
   $idx$0 = $8;
   $linebuf$0 = $linebuf$1;
  }
 }
 if ($end | 0) HEAP32[$end >> 2] = $idx$1;
 if (!$linebuf$2) $linebuf$3 = 0; else {
  $15 = _xrealloc($linebuf$2, $idx$1 + 1 | 0) | 0;
  HEAP8[$15 + $idx$1 >> 0] = 0;
  $linebuf$3 = $15;
 }
 return $linebuf$3 | 0;
}

function _utoa($n) {
 $n = $n | 0;
 var $$011$i = 0, $$048$i = 0, $$057$i = 0, $$1$i = 0, $$16$i = 0, $$2$i = 0, $0 = 0, $1 = 0, $5 = 0, $i$09$i = 0, $out$010$i = 0, $out$1$i = 0;
 $$011$i = $n;
 $$048$i = 11;
 $$057$i = 6272;
 $i$09$i = 1e9;
 $out$010$i = 0;
 while (1) {
  $0 = ($$011$i >>> 0) / ($i$09$i >>> 0) | 0;
  $1 = ($$011$i >>> 0) % ($i$09$i >>> 0) | 0;
  if (($i$09$i | 0) == 1 | ($0 | $out$010$i | 0) != 0) {
   $5 = $$048$i + -1 | 0;
   if (!$5) {
    $$2$i = $$057$i;
    break;
   }
   HEAP8[$$057$i >> 0] = $0 + 48;
   $$1$i = $5;
   $$16$i = $$057$i + 1 | 0;
   $out$1$i = $out$010$i + 1 | 0;
  } else {
   $$1$i = $$048$i;
   $$16$i = $$057$i;
   $out$1$i = $out$010$i;
  }
  if ($i$09$i >>> 0 < 10) {
   $$2$i = $$16$i;
   break;
  } else {
   $$011$i = $1;
   $$048$i = $$1$i;
   $$057$i = $$16$i;
   $i$09$i = ($i$09$i >>> 0) / 10 | 0;
   $out$010$i = $out$1$i;
  }
 }
 HEAP8[$$2$i >> 0] = 0;
 return 6272;
}

function _mallopt($param_number, $value) {
 $param_number = $param_number | 0;
 $value = $value | 0;
 var $$0$i = 0, $4 = 0, $magic$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $magic$i$i = sp;
 if (!(HEAP32[1562] | 0)) {
  HEAP32[1564] = 4096;
  HEAP32[1563] = 4096;
  HEAP32[1565] = -1;
  HEAP32[1566] = -1;
  HEAP32[1567] = 0;
  HEAP32[1555] = 0;
  $4 = $magic$i$i & -16 ^ 1431655768;
  HEAP32[$magic$i$i >> 2] = $4;
  HEAP32[1562] = $4;
 }
 switch ($param_number | 0) {
 case -1:
  {
   HEAP32[1566] = $value;
   $$0$i = 1;
   break;
  }
 case -2:
  {
   if ((HEAP32[1563] | 0) >>> 0 > $value >>> 0) $$0$i = 0; else if (!($value + -1 & $value)) {
    HEAP32[1564] = $value;
    $$0$i = 1;
   } else $$0$i = 0;
   break;
  }
 case -3:
  {
   HEAP32[1565] = $value;
   $$0$i = 1;
   break;
  }
 default:
  $$0$i = 0;
 }
 STACKTOP = sp;
 return $$0$i | 0;
}

function _get_cached_groupname($gid) {
 $gid = $gid | 0;
 var $$0$i = 0, $0 = 0, $10 = 0, $11 = 0, $2 = 0, $7 = 0, $i$06$i = 0, $i$06$i$lcssa = 0, label = 0;
 $0 = HEAP32[1426] | 0;
 L1 : do if (($0 | 0) > 0) {
  $2 = HEAP32[1425] | 0;
  $i$06$i = 0;
  while (1) {
   if ((HEAP32[$2 + ($i$06$i << 5) >> 2] | 0) == ($gid | 0)) {
    $i$06$i$lcssa = $i$06$i;
    break;
   }
   $7 = $i$06$i + 1 | 0;
   if (($7 | 0) < ($0 | 0)) $i$06$i = $7; else {
    $10 = $2;
    label = 7;
    break L1;
   }
  }
  $$0$i = $2 + ($i$06$i$lcssa << 5) + 4 | 0;
 } else {
  $10 = HEAP32[1425] | 0;
  label = 7;
 } while (0);
 if ((label | 0) == 7) {
  HEAP32[1426] = $0 + 1;
  $11 = _xrealloc_vector_helper($10, 8194, $0) | 0;
  HEAP32[1425] = $11;
  HEAP32[$11 + ($0 << 5) >> 2] = $gid;
  _safe_strncpy($11 + ($0 << 5) + 4 | 0, _gid2group_utoa($gid) | 0, 28) | 0;
  $$0$i = (HEAP32[1425] | 0) + ($0 << 5) + 4 | 0;
 }
 return $$0$i | 0;
}

function _get_cached_username($uid) {
 $uid = $uid | 0;
 var $$0$i = 0, $0 = 0, $10 = 0, $11 = 0, $2 = 0, $7 = 0, $i$06$i = 0, $i$06$i$lcssa = 0, label = 0;
 $0 = HEAP32[1424] | 0;
 L1 : do if (($0 | 0) > 0) {
  $2 = HEAP32[1423] | 0;
  $i$06$i = 0;
  while (1) {
   if ((HEAP32[$2 + ($i$06$i << 5) >> 2] | 0) == ($uid | 0)) {
    $i$06$i$lcssa = $i$06$i;
    break;
   }
   $7 = $i$06$i + 1 | 0;
   if (($7 | 0) < ($0 | 0)) $i$06$i = $7; else {
    $10 = $2;
    label = 7;
    break L1;
   }
  }
  $$0$i = $2 + ($i$06$i$lcssa << 5) + 4 | 0;
 } else {
  $10 = HEAP32[1423] | 0;
  label = 7;
 } while (0);
 if ((label | 0) == 7) {
  HEAP32[1424] = $0 + 1;
  $11 = _xrealloc_vector_helper($10, 8194, $0) | 0;
  HEAP32[1423] = $11;
  HEAP32[$11 + ($0 << 5) >> 2] = $uid;
  _safe_strncpy($11 + ($0 << 5) + 4 | 0, _uid2uname_utoa($uid) | 0, 28) | 0;
  $$0$i = (HEAP32[1423] | 0) + ($0 << 5) + 4 | 0;
 }
 return $$0$i | 0;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_memchr(5634, HEAP8[$mode >> 0] | 0, 4) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $5 = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $7 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($7 | 0) < 0) $$0 = 0; else {
   $9 = ___fdopen($7, $mode) | 0;
   if (!$9) {
    HEAP32[$vararg_buffer3 >> 2] = $7;
    ___syscall6(6, $vararg_buffer3 | 0) | 0;
    $$0 = 0;
   } else $$0 = $9;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 $0 = $_c & 255;
 HEAP8[$c >> 0] = $0;
 $1 = $f + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$1 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $9 = $2;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < $9 >>> 0) {
   $10 = $_c & 255;
   if (($10 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$6 >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = $0;
    $$0 = $10;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $10 = 0, $5 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0;
 while (1) {
  if ((HEAPU8[3155 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = $i$03 + 1 | 0;
  if (($5 | 0) == 87) {
   $i$12 = 87;
   $s$01 = 3243;
   label = 5;
   break;
  } else $i$03 = $5;
 }
 if ((label | 0) == 2) if (!$i$03$lcssa) $s$0$lcssa = 3243; else {
  $i$12 = $i$03$lcssa;
  $s$01 = 3243;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$01;
  while (1) {
   $9 = $s$1 + 1 | 0;
   if (!(HEAP8[$s$1 >> 0] | 0)) {
    $$lcssa = $9;
    break;
   } else $s$1 = $9;
  }
  $10 = $i$12 + -1 | 0;
  if (!$10) {
   $s$0$lcssa = $$lcssa;
   break;
  } else {
   $i$12 = $10;
   $s$01 = $$lcssa;
   label = 5;
  }
 }
 return $s$0$lcssa | 0;
}

function ___procfdname($buf, $fd) {
 $buf = $buf | 0;
 $fd = $fd | 0;
 var $$01 = 0, $$lcssa = 0, $3 = 0, $9 = 0, $i$13 = 0, $i$22 = 0, $j$04 = 0, dest = 0, src = 0, stop = 0;
 dest = $buf;
 src = 2874;
 stop = dest + 15 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!$fd) {
  HEAP8[$buf + 14 >> 0] = 48;
  HEAP8[$buf + 15 >> 0] = 0;
 } else {
  $i$13 = 14;
  $j$04 = $fd;
  while (1) {
   $3 = $i$13 + 1 | 0;
   if ($j$04 >>> 0 < 10) {
    $$lcssa = $3;
    break;
   } else {
    $i$13 = $3;
    $j$04 = ($j$04 >>> 0) / 10 | 0;
   }
  }
  HEAP8[$buf + $$lcssa >> 0] = 0;
  $$01 = $fd;
  $i$22 = $$lcssa;
  while (1) {
   $9 = $i$22 + -1 | 0;
   HEAP8[$buf + $9 >> 0] = ($$01 >>> 0) % 10 | 0 | 48;
   if ($$01 >>> 0 < 10) break; else {
    $$01 = ($$01 >>> 0) / 10 | 0;
    $i$22 = $9;
   }
  }
 }
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 do if (!$s) $$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $$0 = 1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _crc32_filltable($crc_table, $endian) {
 $crc_table = $crc_table | 0;
 $endian = $endian | 0;
 var $$13 = 0, $$13$ph = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $c$01 = 0, $c$1 = 0, $c$1$lcssa = 0, $i$04 = 0, $j$02 = 0;
 $0 = ($endian | 0) != 0;
 $1 = $0 ? 79764919 : -306674912;
 if (!$crc_table) $$13$ph = _xmalloc(1024) | 0; else $$13$ph = $crc_table;
 $$13 = $$13$ph;
 $i$04 = 0;
 while (1) {
  $c$01 = $0 ? $i$04 << 24 : $i$04;
  $j$02 = 8;
  while (1) {
   if ($0) $c$1 = (($c$01 | 0) < 0 ? $1 : 0) ^ $c$01 << 1; else $c$1 = ($c$01 & 1 | 0 ? $1 : 0) ^ $c$01 >>> 1;
   $15 = $j$02 + -1 | 0;
   if (!$15) {
    $c$1$lcssa = $c$1;
    break;
   } else {
    $c$01 = $c$1;
    $j$02 = $15;
   }
  }
  HEAP32[$$13 >> 2] = $c$1$lcssa;
  $18 = $i$04 + 1 | 0;
  if (($18 | 0) == 256) break; else {
   $$13 = $$13 + 4 | 0;
   $i$04 = $18;
  }
 }
 return $$13$ph | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709551616.0, $e);
    $$01 = $7;
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _append_file_list_to_list($list) {
 $list = $list | 0;
 var $0 = 0, $13 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $newlist = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $newlist = sp + 4 | 0;
 HEAP32[$0 >> 2] = $list;
 HEAP32[$newlist >> 2] = 0;
 if (!$list) $13 = 0; else {
  do {
   $3 = _xfopen_stdin(_llist_pop($0) | 0) | 0;
   $4 = _xmalloc_fgetline($3) | 0;
   if ($4 | 0) {
    $6 = $4;
    while (1) {
     $7 = _last_char_is($6, 47) | 0;
     if ($7 >>> 0 > $6 >>> 0) HEAP8[$7 >> 0] = 0;
     _llist_add_to_end($newlist, $6);
     $9 = _xmalloc_fgetline($3) | 0;
     if (!$9) break; else $6 = $9;
    }
   }
   _fclose($3) | 0;
  } while ((HEAP32[$0 >> 2] | 0) != 0);
  $13 = HEAP32[$newlist >> 2] | 0;
 }
 STACKTOP = sp;
 return $13 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $9 = 0, $mem$1 = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9 | 0) {
  $mem$1 = $9 + 8 | 0;
  return $mem$1 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $12;
 return $mem$1 | 0;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do if (!$0) $$0 = -1; else {
  HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
  $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
  if ($2 >>> 0 < 240) {
   $5 = _realloc($0, $2 + 1 | 0) | 0;
   HEAP32[$s >> 2] = $5 | 0 ? $5 : $0;
   $$0 = $2;
   break;
  }
  _free($0);
  if (($2 | 0) < 0) $$0 = -1; else {
   $9 = $2 + 1 | 0;
   $10 = _malloc($9) | 0;
   HEAP32[$s >> 2] = $10;
   if (!$10) $$0 = -1; else $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _full_read($fd, $buf, $len) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$015 = 0, $$024 = 0, $$lcssa = 0, $1 = 0, $6 = 0, $total$06 = 0, $total$06$lcssa = 0;
 L1 : do if (!$len) $$0 = 0; else {
  $$015 = $len;
  $$024 = $buf;
  $total$06 = 0;
  while (1) {
   $1 = _safe_read($fd, $$024, $$015) | 0;
   if (($1 | 0) < 0) {
    $$lcssa = $1;
    $total$06$lcssa = $total$06;
    break;
   }
   if (!$1) {
    $$0 = $total$06;
    break L1;
   }
   $6 = $1 + $total$06 | 0;
   if (($$015 | 0) == ($1 | 0)) {
    $$0 = $6;
    break L1;
   } else {
    $$015 = $$015 - $1 | 0;
    $$024 = $$024 + $1 | 0;
    $total$06 = $6;
   }
  }
  $$0 = ($total$06$lcssa | 0) == 0 ? $$lcssa : $total$06$lcssa;
 } while (0);
 return $$0 | 0;
}

function _bb_strtoul($arg, $endp, $base) {
 $arg = $arg | 0;
 $endp = $endp | 0;
 $base = $base | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $endptr$endp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $endptr$endp = ($endp | 0) == 0 ? sp : $endp;
 HEAP32[$endptr$endp >> 2] = $arg;
 $2 = HEAPU8[$arg >> 0] | 0;
 if (($2 + 208 & 254) >>> 0 < 10) label = 4; else if ((($2 | 32) + 159 & 254) >>> 0 < 26) label = 4; else {
  HEAP32[(___errno_location() | 0) >> 2] = 34;
  $$0 = -1;
 }
 if ((label | 0) == 4) {
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $13 = _handle_errors(_strtoul($arg, $endptr$endp, $base) | 0, 0, $endptr$endp) | 0;
  $$0 = $13;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0;
 $2 = $f + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, 0, 0) | 0;
  if (!(HEAP32[$0 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 7]($f, $10 - $12 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _concat_path_file($path, $filename) {
 $path = $path | 0;
 $filename = $filename | 0;
 var $$01 = 0, $$01$lcssa = 0, $$path = 0, $1 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $$path = ($path | 0) == 0 ? 6289 : $path;
 $1 = _last_char_is($$path, 47) | 0;
 $$01 = $filename;
 while (1) if ((HEAP8[$$01 >> 0] | 0) == 47) $$01 = $$01 + 1 | 0; else {
  $$01$lcssa = $$01;
  break;
 }
 HEAP32[$vararg_buffer >> 2] = $$path;
 HEAP32[$vararg_buffer + 4 >> 2] = ($1 | 0) == 0 ? 2603 : 6289;
 HEAP32[$vararg_buffer + 8 >> 2] = $$01$lcssa;
 $7 = _xasprintf(2605, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _fork() {
 var $1 = 0, $10 = 0, $4 = 0, $5 = 0, $7 = 0, $set = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $set = sp + 16 | 0;
 _dummy(-1);
 ___block_all_sigs($set);
 $1 = ___syscall_ret(___syscall2(2, sp | 0) | 0) | 0;
 $4 = ($1 | 0) != 0;
 if (!($4 | (HEAP32[1428] | 0) == 0)) {
  $5 = _pthread_self() | 0;
  $7 = ___syscall_ret(___syscall20(20, sp + 8 | 0) | 0) | 0;
  HEAP32[$5 + 52 >> 2] = $7;
  HEAP32[$5 + 48 >> 2] = $7;
  $10 = $5 + 160 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  HEAP32[1432] = 0;
  HEAP32[1428] = $5;
 }
 ___restore_sigs($set);
 _dummy($4 & 1 ^ 1);
 STACKTOP = sp;
 return $1 | 0;
}

function _bb_mode_string($mode) {
 $mode = $mode | 0;
 var $14 = 0, $16 = 0, $i$0 = 0, $m$0 = 0, $p$0 = 0, $scevgep = 0;
 HEAP8[6290] = HEAP8[2704 + ($mode >>> 12 & 15) >> 0] | 0;
 $i$0 = 0;
 $m$0 = 256;
 $p$0 = 6290;
 while (1) {
  HEAP8[$p$0 + 1 >> 0] = ($m$0 & $mode | 0) == 0 ? 45 : 114;
  HEAP8[$p$0 + 2 >> 0] = ($m$0 >> 1 & $mode | 0) == 0 ? 45 : 119;
  $14 = ($m$0 >> 2 & $mode | 0) == 0;
  HEAP8[$p$0 + 3 >> 0] = $14 ? 45 : 120;
  $scevgep = $p$0 + 3 | 0;
  $16 = $i$0 + 1 | 0;
  if (4096 >>> $16 & $mode | 0) HEAP8[$scevgep >> 0] = HEAP8[2720 + ((($16 | 0) == 3 ? 4 : 3) + ($14 ? 0 : 2)) >> 0] | 0;
  if (($16 | 0) == 3) break; else {
   $i$0 = $16;
   $m$0 = $m$0 >> 3;
   $p$0 = $scevgep;
  }
 }
 return 6290;
}

function _full_write($fd, $buf, $len) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$015 = 0, $$024 = 0, $$lcssa = 0, $1 = 0, $4 = 0, $total$06 = 0, $total$06$lcssa = 0;
 L1 : do if (!$len) $$0 = 0; else {
  $$015 = $len;
  $$024 = $buf;
  $total$06 = 0;
  while (1) {
   $1 = _safe_write($fd, $$024, $$015) | 0;
   if (($1 | 0) < 0) {
    $$lcssa = $1;
    $total$06$lcssa = $total$06;
    break;
   }
   $4 = $1 + $total$06 | 0;
   if (($$015 | 0) == ($1 | 0)) {
    $$0 = $4;
    break L1;
   } else {
    $$015 = $$015 - $1 | 0;
    $$024 = $$024 + $1 | 0;
    $total$06 = $4;
   }
  }
  $$0 = ($total$06$lcssa | 0) == 0 ? $$lcssa : $total$06$lcssa;
 } while (0);
 return $$0 | 0;
}

function _bb_internal_getgrgid($id) {
 $id = $id | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $0 = _utoa($id) | 0;
 $1 = HEAP32[1427] | 0;
 if (!$1) {
  $3 = _xzalloc(64) | 0;
  HEAP32[1427] = $3;
  HEAP32[$3 >> 2] = HEAP32[12];
  HEAP32[$3 + 4 >> 2] = HEAP32[13];
  HEAP32[$3 + 8 >> 2] = HEAP32[14];
  HEAP32[$3 + 12 >> 2] = HEAP32[15];
  HEAP32[$3 + 16 >> 2] = HEAP32[16];
  $4 = $3 + 28 | 0;
  HEAP32[$4 >> 2] = HEAP32[17];
  HEAP32[$4 + 4 >> 2] = HEAP32[18];
  HEAP32[$4 + 8 >> 2] = HEAP32[19];
  HEAP32[$4 + 12 >> 2] = HEAP32[20];
  HEAP32[$4 + 16 >> 2] = HEAP32[21];
  $6 = $3;
 } else $6 = $1;
 $5 = $6 + 28 | 0;
 return _massage_data_for_non_r_func($5, _parse_file($5, $0, 2) | 0) | 0;
}

function _xmalloc_readlink($path) {
 $path = $path | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa16 = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $2 = 0, $buf$0 = 0, $bufsize$0 = 0, label = 0;
 $buf$0 = 0;
 $bufsize$0 = 0;
 while (1) {
  $0 = $bufsize$0 + 80 | 0;
  $1 = _xrealloc($buf$0, $0) | 0;
  $2 = _readlink($path, $1, $0) | 0;
  if (($2 | 0) == -1) {
   $$lcssa = $1;
   label = 3;
   break;
  }
  if (($0 | 0) > ($2 | 0)) {
   $$lcssa16 = $1;
   $$lcssa18 = $2;
   label = 5;
   break;
  } else {
   $buf$0 = $1;
   $bufsize$0 = $0;
  }
 }
 if ((label | 0) == 3) {
  _free($$lcssa);
  $$0 = 0;
 } else if ((label | 0) == 5) {
  HEAP8[$$lcssa16 + $$lcssa18 >> 0] = 0;
  $$0 = $$lcssa16;
 }
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _open($filename, $flags, $varargs) {
 $filename = $filename | 0;
 $flags = $flags | 0;
 $varargs = $varargs | 0;
 var $5 = 0, $6 = 0, $9 = 0, $ap = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16 | 0;
 HEAP32[$ap >> 2] = $varargs;
 $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$ap >> 2] = $5 + 4;
 HEAP32[$vararg_buffer >> 2] = $filename;
 HEAP32[$vararg_buffer + 4 >> 2] = $flags | 32768;
 HEAP32[$vararg_buffer + 8 >> 2] = $6;
 $9 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else $5 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _bb_internal_getgrnam($name) {
 $name = $name | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = HEAP32[1427] | 0;
 if (!$0) {
  $2 = _xzalloc(64) | 0;
  HEAP32[1427] = $2;
  HEAP32[$2 >> 2] = HEAP32[12];
  HEAP32[$2 + 4 >> 2] = HEAP32[13];
  HEAP32[$2 + 8 >> 2] = HEAP32[14];
  HEAP32[$2 + 12 >> 2] = HEAP32[15];
  HEAP32[$2 + 16 >> 2] = HEAP32[16];
  $3 = $2 + 28 | 0;
  HEAP32[$3 >> 2] = HEAP32[17];
  HEAP32[$3 + 4 >> 2] = HEAP32[18];
  HEAP32[$3 + 8 >> 2] = HEAP32[19];
  HEAP32[$3 + 12 >> 2] = HEAP32[20];
  HEAP32[$3 + 16 >> 2] = HEAP32[21];
  $5 = $2;
 } else $5 = $0;
 $4 = $5 + 28 | 0;
 return _massage_data_for_non_r_func($4, _parse_file($4, $name, 0) | 0) | 0;
}

function _bb_internal_getpwuid($id) {
 $id = $id | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = _utoa($id) | 0;
 $1 = HEAP32[1427] | 0;
 if (!$1) {
  $3 = _xzalloc(64) | 0;
  HEAP32[1427] = $3;
  HEAP32[$3 >> 2] = HEAP32[12];
  HEAP32[$3 + 4 >> 2] = HEAP32[13];
  HEAP32[$3 + 8 >> 2] = HEAP32[14];
  HEAP32[$3 + 12 >> 2] = HEAP32[15];
  HEAP32[$3 + 16 >> 2] = HEAP32[16];
  $4 = $3 + 28 | 0;
  HEAP32[$4 >> 2] = HEAP32[17];
  HEAP32[$4 + 4 >> 2] = HEAP32[18];
  HEAP32[$4 + 8 >> 2] = HEAP32[19];
  HEAP32[$4 + 12 >> 2] = HEAP32[20];
  HEAP32[$4 + 16 >> 2] = HEAP32[21];
  $5 = $3;
 } else $5 = $1;
 return _massage_data_for_non_r_func($5, _parse_file($5, $0, 2) | 0) | 0;
}

function _strtox_383($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $2 = $f + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $6 = $f + 8 | 0;
 HEAP32[$6 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $8 = ___intscan($f, $base, 1, $0, $1) | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$2 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) - (HEAP32[$6 >> 2] | 0));
 STACKTOP = sp;
 return $8 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  while (1) {
   $4 = $$014 + 1 | 0;
   $5 = $$05 + 1 | 0;
   $6 = HEAP8[$4 >> 0] | 0;
   $7 = HEAP8[$5 >> 0] | 0;
   if ($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24) {
    $$lcssa = $6;
    $$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;
    $$05 = $5;
   }
  }
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 7]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
 } else if (!($15 & 4)) $$0 = -1; else {
  HEAP32[$f >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $12 = 0, $18 = 0, $22 = 0, $24 = 0, $5 = 0, $7 = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {}
 $5 = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$5) {
  ___lock(5740);
  $7 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($7 | 0) HEAP32[$7 + 56 >> 2] = HEAP32[$$pre >> 2];
  $12 = HEAP32[$$pre >> 2] | 0;
  if ($12 | 0) HEAP32[$12 + 52 >> 2] = $7;
  if ((HEAP32[1434] | 0) == ($f | 0)) HEAP32[1434] = $12;
  ___unlock(5740);
 }
 $18 = _fflush($f) | 0;
 $22 = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 7]($f) | 0 | $18;
 $24 = HEAP32[$f + 92 >> 2] | 0;
 if ($24 | 0) _free($24);
 if (!$5) _free($f);
 return $22 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $1 = 0, $11 = 0, $2 = 0, $4 = 0, $l$04 = 0, $r$05 = 0;
 L1 : do if (!$n) $11 = 0; else {
  $$03 = $n;
  $l$04 = $vl;
  $r$05 = $vr;
  while (1) {
   $1 = HEAP8[$l$04 >> 0] | 0;
   $2 = HEAP8[$r$05 >> 0] | 0;
   if ($1 << 24 >> 24 != $2 << 24 >> 24) {
    $$lcssa = $1;
    $$lcssa19 = $2;
    break;
   }
   $4 = $$03 + -1 | 0;
   if (!$4) {
    $11 = 0;
    break L1;
   } else {
    $$03 = $4;
    $l$04 = $l$04 + 1 | 0;
    $r$05 = $r$05 + 1 | 0;
   }
  }
  $11 = ($$lcssa & 255) - ($$lcssa19 & 255) | 0;
 } while (0);
 return $11 | 0;
}

function _bb_internal_getpwnam($name) {
 $name = $name | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = HEAP32[1427] | 0;
 if (!$0) {
  $2 = _xzalloc(64) | 0;
  HEAP32[1427] = $2;
  HEAP32[$2 >> 2] = HEAP32[12];
  HEAP32[$2 + 4 >> 2] = HEAP32[13];
  HEAP32[$2 + 8 >> 2] = HEAP32[14];
  HEAP32[$2 + 12 >> 2] = HEAP32[15];
  HEAP32[$2 + 16 >> 2] = HEAP32[16];
  $3 = $2 + 28 | 0;
  HEAP32[$3 >> 2] = HEAP32[17];
  HEAP32[$3 + 4 >> 2] = HEAP32[18];
  HEAP32[$3 + 8 >> 2] = HEAP32[19];
  HEAP32[$3 + 12 >> 2] = HEAP32[20];
  HEAP32[$3 + 16 >> 2] = HEAP32[21];
  $4 = $2;
 } else $4 = $0;
 return _massage_data_for_non_r_func($4, _parse_file($4, $name, 0) | 0) | 0;
}

function _saveSetjmp(env, label, table, size) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 size = size | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < (size | 0)) {
  if (!(HEAP32[table + (i << 3) >> 2] | 0)) {
   HEAP32[table + (i << 3) >> 2] = setjmpId;
   HEAP32[table + ((i << 3) + 4) >> 2] = label;
   HEAP32[table + ((i << 3) + 8) >> 2] = 0;
   tempRet0 = size;
   return table | 0;
  }
  i = i + 1 | 0;
 }
 size = size * 2 | 0;
 table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0;
 table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0;
 tempRet0 = size;
 return table | 0;
}

function _lseek($fd, $offset, $whence) {
 $fd = $fd | 0;
 $offset = $offset | 0;
 $whence = $whence | 0;
 var $2 = 0, $result = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $result = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = $fd;
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $offset;
 HEAP32[$vararg_buffer + 12 >> 2] = $result;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 $2 = (___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) != 0;
 STACKTOP = sp;
 return ($2 ? -1 : HEAP32[$result >> 2] | 0) | 0;
}

function _bb_show_usage() {
 var $2 = 0, $bd$i = 0, $outbuf$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $bd$i = sp;
 if (!(_start_bunzip($bd$i, -1, 777, 298) | 0)) {
  $2 = _malloc_or_warn(385) | 0;
  if (!$2) $outbuf$0$i = 0; else {
   _read_bunzip(HEAP32[$bd$i >> 2] | 0, $2, 385) | 0;
   $outbuf$0$i = $2;
  }
 } else $outbuf$0$i = 0;
 _dealloc_bunzip(HEAP32[$bd$i >> 2] | 0);
 if ((HEAP8[$outbuf$0$i >> 0] | 0) == 8) _full_write2_str(1075) | 0; else {
  _full_write2_str(1096) | 0;
  _full_write2_str($outbuf$0$i) | 0;
  _full_write2_str(1108) | 0;
 }
 _xfunc_die();
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $1 = 0, $2 = 0, $4 = 0, $7 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0, $flags$2$ = 0, $flags$4 = 0;
 $1 = (_strchr($mode, 43) | 0) == 0;
 $2 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $1 ? $2 << 24 >> 24 != 114 & 1 : 2;
 $4 = (_strchr($mode, 120) | 0) == 0;
 $flags$0$ = $4 ? $flags$0 : $flags$0 | 128;
 $7 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $7 ? $flags$0$ : $flags$0$ | 524288;
 $flags$2$ = $2 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $2 << 24 >> 24 == 119 ? $flags$2$ | 512 : $flags$2$;
 return ($2 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function _is_prefixed_with($string, $key) {
 $string = $string | 0;
 $key = $key | 0;
 var $$013 = 0, $$02 = 0, $$04 = 0, $0 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$key >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) $$02 = $string; else {
  $$013 = $string;
  $$04 = $key;
  $3 = $0;
  while (1) {
   if ($3 << 24 >> 24 != (HEAP8[$$013 >> 0] | 0)) {
    $$02 = 0;
    break L1;
   }
   $5 = $$04 + 1 | 0;
   $6 = $$013 + 1 | 0;
   $7 = HEAP8[$5 >> 0] | 0;
   if (!($7 << 24 >> 24)) {
    $$02 = $6;
    break;
   } else {
    $$013 = $6;
    $$04 = $5;
    $3 = $7;
   }
  }
 } while (0);
 return $$02 | 0;
}

function _dec2env($env, $idx, $0, $1) {
 $env = $env | 0;
 $idx = $idx | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[16 + ($idx << 2) >> 2];
 $4 = $vararg_buffer + 8 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 $8 = _xasprintf(2208, $vararg_buffer) | 0;
 HEAP32[$env + ($idx << 2) >> 2] = $8;
 if (!(_putenv($8 | 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _bb_error_msg_and_die(1273, sp + 16 | 0);
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 1;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21505;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _handle_errors($0, $1, $endp) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $endp = $endp | 0;
 var $13 = 0, $17 = 0, $18 = 0, $3 = 0, $5 = 0;
 $3 = HEAP8[HEAP32[$endp >> 2] >> 0] | 0;
 do if (!($3 << 24 >> 24)) {
  $17 = $1;
  $18 = $0;
 } else {
  $5 = $3 & 255;
  if (($5 + 208 & 254) >>> 0 >= 10) if ((($5 | 32) + 159 & 254) >>> 0 >= 26) {
   $13 = ___errno_location() | 0;
   if (!(HEAP32[$13 >> 2] | 0)) {
    HEAP32[$13 >> 2] = 22;
    $17 = $1;
    $18 = $0;
    break;
   }
  }
  HEAP32[(___errno_location() | 0) >> 2] = 34;
  $17 = -1;
  $18 = -1;
 } while (0);
 tempRet0 = $17;
 return $18 | 0;
}

function _puts($s) {
 $s = $s | 0;
 var $0 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0;
 $0 = HEAP32[133] | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $19 = ___lockfile($0) | 0; else $19 = 0;
 do if ((_fputs($s, $0) | 0) < 0) $18 = 1; else {
  if ((HEAP8[$0 + 75 >> 0] | 0) != 10) {
   $10 = $0 + 20 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if ($11 >>> 0 < (HEAP32[$0 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = 10;
    $18 = 0;
    break;
   }
  }
  $18 = (___overflow($0, 10) | 0) < 0;
 } while (0);
 if ($19 | 0) ___unlockfile($0);
 return $18 << 31 >> 31 | 0;
}

function _xopen3($pathname, $flags, $mode) {
 $pathname = $pathname | 0;
 $flags = $flags | 0;
 $mode = $mode | 0;
 var $0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $mode;
 $0 = _open($pathname, $flags, $vararg_buffer) | 0;
 if (($0 | 0) < 0) {
  HEAP32[$vararg_buffer1 >> 2] = $pathname;
  _bb_perror_msg_and_die(1134, $vararg_buffer1);
 } else {
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _xmalloc_readlink_or_warn($path) {
 $path = $path | 0;
 var $0 = 0, $3 = 0, $errmsg$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _xmalloc_readlink($path) | 0;
 if (!$0) {
  $3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (($3 | 0) == 22) $errmsg$0 = 2795; else $errmsg$0 = _strerror($3) | 0;
  HEAP32[$vararg_buffer >> 2] = $path;
  HEAP32[$vararg_buffer + 4 >> 2] = $errmsg$0;
  _bb_error_msg(2809, $vararg_buffer);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _xstrndup($s, $n) {
 $s = $s | 0;
 $n = $n | 0;
 var $3 = 0, $6 = 0, $8 = 0, $m$0$lcssa = 0, $m$01 = 0, $t$02 = 0;
 L1 : do if (!$n) $m$0$lcssa = 0; else {
  $m$01 = $n;
  $t$02 = $s;
  while (1) {
   if (!(HEAP8[$t$02 >> 0] | 0)) {
    $m$0$lcssa = $m$01;
    break L1;
   }
   $3 = $m$01 + -1 | 0;
   if (!$3) {
    $m$0$lcssa = 0;
    break;
   } else {
    $m$01 = $3;
    $t$02 = $t$02 + 1 | 0;
   }
  }
 } while (0);
 $6 = $n - $m$0$lcssa | 0;
 $8 = _xmalloc($6 + 1 | 0) | 0;
 HEAP8[$8 + $6 >> 0] = 0;
 _memcpy($8 | 0, $s | 0, $6 | 0) | 0;
 return $8 | 0;
}

function _open3_or_warn($pathname, $flags, $mode) {
 $pathname = $pathname | 0;
 $flags = $flags | 0;
 $mode = $mode | 0;
 var $0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $mode;
 $0 = _open($pathname, $flags, $vararg_buffer) | 0;
 if (($0 | 0) < 0) {
  HEAP32[$vararg_buffer1 >> 2] = $pathname;
  _bb_perror_msg(1134, $vararg_buffer1);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _opendir($name) {
 $name = $name | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $0 = _open($name, 589824, sp) | 0;
 do if (($0 | 0) < 0) $$0 = 0; else {
  $2 = _calloc(1, 2072) | 0;
  if (!$2) {
   HEAP32[$vararg_buffer1 >> 2] = $0;
   ___syscall6(6, $vararg_buffer1 | 0) | 0;
   $$0 = 0;
   break;
  } else {
   HEAP32[$2 >> 2] = $0;
   $$0 = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _massage_data_for_non_r_func($db, $buf) {
 $db = $db | 0;
 $buf = $buf | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $3 = 0;
 if (!$buf) $$0 = 0; else {
  $1 = $db + 24 | 0;
  _free(HEAP32[$1 >> 2] | 0);
  $3 = $db + 19 | 0;
  $10 = _xrealloc($buf, (HEAP32[(HEAP32[1427] | 0) + 60 >> 2] | 0) + (HEAPU8[$3 >> 0] | 0) | 0) | 0;
  HEAP32[$1 >> 2] = $10;
  _memmove($10 + (HEAPU8[$3 >> 0] | 0) | 0, $10 | 0, HEAP32[(HEAP32[1427] | 0) + 60 >> 2] | 0) | 0;
  $$0 = _convert_to_struct($db, $10 + (HEAPU8[$3 >> 0] | 0) | 0, $10) | 0;
 }
 return $$0 | 0;
}

function _str2env($env, $idx, $str) {
 $env = $env | 0;
 $idx = $idx | 0;
 $str = $str | 0;
 var $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[16 + ($idx << 2) >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $str;
 $2 = _xasprintf(2198, $vararg_buffer) | 0;
 HEAP32[$env + ($idx << 2) >> 2] = $2;
 if (!(_putenv($2 | 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _bb_error_msg_and_die(1273, sp + 8 | 0);
}

function _waitpid($pid, $status, $options) {
 $pid = $pid | 0;
 $status = $status | 0;
 $options = $options | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $pid;
 HEAP32[$vararg_buffer + 4 >> 2] = $status;
 HEAP32[$vararg_buffer + 8 >> 2] = $options;
 HEAP32[$vararg_buffer + 12 >> 2] = 0;
 $1 = ___syscall_ret(___syscall114(114, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $7 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fwritex($src, $0, $f) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else $7 = ___fwritex($src, $0, $f) | 0;
 if (($7 | 0) == ($0 | 0)) $10 = $nmemb; else $10 = ($7 >>> 0) / ($size >>> 0) | 0;
 return $10 | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _concat_subpath_file($path, $f) {
 $path = $path | 0;
 $f = $f | 0;
 var $$0 = 0, label = 0;
 L1 : do if (!$f) label = 5; else if ((HEAP8[$f >> 0] | 0) == 46) {
  switch (HEAP8[$f + 1 >> 0] | 0) {
  case 0:
   {
    $$0 = 0;
    break L1;
    break;
   }
  case 46:
   break;
  default:
   {
    label = 5;
    break L1;
   }
  }
  if (!(HEAP8[$f + 2 >> 0] | 0)) $$0 = 0; else label = 5;
 } else label = 5; while (0);
 if ((label | 0) == 5) $$0 = _concat_path_file($path, $f) | 0;
 return $$0 | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _overlapping_strcpy($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var $$012 = 0, $$03 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (($dst | 0) != ($src | 0)) {
  $1 = HEAP8[$src >> 0] | 0;
  HEAP8[$dst >> 0] = $1;
  if ($1 << 24 >> 24) {
   $$012 = $dst;
   $$03 = $src;
   while (1) {
    $3 = $$012 + 1 | 0;
    $4 = $$03 + 1 | 0;
    $5 = HEAP8[$4 >> 0] | 0;
    HEAP8[$3 >> 0] = $5;
    if (!($5 << 24 >> 24)) break; else {
     $$012 = $3;
     $$03 = $4;
    }
   }
  }
 }
 return;
}

function _xrealloc_vector_helper($vector, $sizeof_and_shift, $idx) {
 $vector = $vector | 0;
 $sizeof_and_shift = $sizeof_and_shift | 0;
 $idx = $idx | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $9 = 0;
 $1 = 1 << ($sizeof_and_shift & 255);
 if (!($1 + -1 & $idx)) {
  $5 = $sizeof_and_shift >>> 8;
  $9 = _xrealloc($vector, Math_imul($idx + 1 + $1 | 0, $5) | 0) | 0;
  _memset($9 + (Math_imul($5, $idx) | 0) | 0, 0, Math_imul($1 + 1 | 0, $5) | 0) | 0;
  $$0 = $9;
 } else $$0 = $vector;
 return $$0 | 0;
}

function _readlink($path, $buf, $bufsize) {
 $path = $path | 0;
 $buf = $buf | 0;
 $bufsize = $bufsize | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 HEAP32[$vararg_buffer + 8 >> 2] = $bufsize;
 $1 = ___syscall_ret(___syscall85(85, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _dup2($old, $new) {
 $old = $old | 0;
 $new = $new | 0;
 var $$lcssa = 0, $0 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do {
  HEAP32[$vararg_buffer >> 2] = $old;
  HEAP32[$vararg_buffer + 4 >> 2] = $new;
  $0 = ___syscall63(63, $vararg_buffer | 0) | 0;
 } while (($0 | 0) == -16);
 $$lcssa = $0;
 $2 = ___syscall_ret($$lcssa) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _bb_copyfd_exact_size($fd1, $fd2, $size) {
 $fd1 = $fd1 | 0;
 $fd2 = $fd2 | 0;
 $size = $size | 0;
 var $$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$size) $$0$i = 0; else $$0$i = _bb_full_fd_action($fd1, $fd2, $size) | 0;
 if (($$0$i | 0) == ((($size | 0) > -1 ? $size : 0 - $size | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 if (($$0$i | 0) == -1) _xfunc_die(); else _bb_error_msg_and_die(2727, sp);
}

function _execve($path, $argv, $envp) {
 $path = $path | 0;
 $argv = $argv | 0;
 $envp = $envp | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $argv;
 HEAP32[$vararg_buffer + 8 >> 2] = $envp;
 $1 = ___syscall_ret(___syscall11(11, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _seek_by_jump($fd, $amount) {
 $fd = $fd | 0;
 $amount = $amount | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do if ($amount | 0) if ((_lseek($fd, $amount, 1) | 0) == -1) if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 29) {
  _seek_by_read($fd, $amount);
  break;
 } else _bb_perror_msg_and_die(2543, $vararg_buffer); while (0);
 STACKTOP = sp;
 return;
}

function _mknod($path, $mode, $dev) {
 $path = $path | 0;
 $mode = $mode | 0;
 $dev = $dev | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $mode;
 HEAP32[$vararg_buffer + 8 >> 2] = $dev;
 $1 = ___syscall_ret(___syscall14(14, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _chown($path, $uid, $gid) {
 $path = $path | 0;
 $uid = $uid | 0;
 $gid = $gid | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $uid;
 HEAP32[$vararg_buffer + 8 >> 2] = $gid;
 $1 = ___syscall_ret(___syscall212(212, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _write($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 HEAP32[$vararg_buffer + 8 >> 2] = $count;
 $1 = ___syscall_ret(___syscall4(4, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _read($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 HEAP32[$vararg_buffer + 8 >> 2] = $count;
 $1 = ___syscall_ret(___syscall3(3, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _xasprintf($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $p = 0, $string_ptr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp + 8 | 0;
 $string_ptr = sp + 4 | 0;
 HEAP32[$p >> 2] = $varargs;
 if ((_vasprintf($string_ptr, $format, $p) | 0) < 0) _bb_error_msg_and_die(1273, sp); else {
  STACKTOP = sp;
  return HEAP32[$string_ptr >> 2] | 0;
 }
 return 0;
}

function _signal($sig, $func) {
 $sig = $sig | 0;
 $func = $func | 0;
 var $2 = 0, $sa = 0, $sa_old = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $sa_old = sp + 140 | 0;
 $sa = sp;
 _memset($sa | 0, 0, 140) | 0;
 HEAP32[$sa >> 2] = $func;
 HEAP32[$sa + 132 >> 2] = 268435456;
 $2 = (___sigaction($sig, $sa, $sa_old) | 0) < 0;
 STACKTOP = sp;
 return ($2 ? -1 : HEAP32[$sa_old >> 2] | 0) | 0;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 7]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _xmalloc_fgetline($file) {
 $file = $file | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $i = sp;
 $0 = _bb_get_chunk_from_file($file, $i) | 0;
 $1 = HEAP32[$i >> 2] | 0;
 if ($1 | 0) {
  $3 = $1 + -1 | 0;
  HEAP32[$i >> 2] = $3;
  $4 = $0 + $3 | 0;
  if ((HEAP8[$4 >> 0] | 0) == 10) HEAP8[$4 >> 0] = 0;
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _putchar_unlocked($c) {
 $c = $c | 0;
 var $0 = 0, $14 = 0, $5 = 0, $6 = 0, label = 0;
 $0 = HEAP32[133] | 0;
 if ((HEAP8[$0 + 75 >> 0] | 0) == ($c | 0)) label = 4; else {
  $5 = $0 + 20 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$0 + 16 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $6 + 1;
   HEAP8[$6 >> 0] = $c;
   $14 = $c & 255;
  } else label = 4;
 }
 if ((label | 0) == 4) $14 = ___overflow($0, $c) | 0;
 return $14 | 0;
}

function _xwrite($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if ($count | 0) {
  $1 = _full_write($fd, $buf, $count) | 0;
  if (($1 | 0) != ($count | 0)) _bb_perror_msg_and_die(($1 | 0) > -1 ? 1200 : 1260, $vararg_buffer);
 }
 STACKTOP = sp;
 return;
}

function _filter_accept_reject_list($archive_handle) {
 $archive_handle = $archive_handle | 0;
 var $$0 = 0, $2 = 0, $8 = 0;
 $2 = HEAP32[HEAP32[$archive_handle + 24 >> 2] >> 2] | 0;
 do if (!(_find_list_entry2(HEAP32[$archive_handle + 16 >> 2] | 0, $2) | 0)) {
  $8 = HEAP32[$archive_handle + 12 >> 2] | 0;
  if ($8 | 0) if (!(_find_list_entry2($8, $2) | 0)) {
   $$0 = 1;
   break;
  }
  $$0 = 0;
 } else $$0 = 1; while (0);
 return $$0 | 0;
}

function _data_align($archive_handle, $boundary) {
 $archive_handle = $archive_handle | 0;
 $boundary = $boundary | 0;
 var $0 = 0, $4 = 0;
 $0 = $archive_handle + 40 | 0;
 $4 = (($boundary - (((HEAP32[$0 >> 2] | 0) >>> 0) % ($boundary >>> 0) | 0) | 0) >>> 0) % ($boundary >>> 0) | 0;
 FUNCTION_TABLE_vii[HEAP32[$archive_handle + 36 >> 2] & 3](HEAP32[$archive_handle + 4 >> 2] | 0, $4);
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $4;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _find_list_entry($list, $filename) {
 $list = $list | 0;
 $filename = $filename | 0;
 var $$0 = 0, $$012 = 0, $5 = 0;
 L1 : do if (!$list) $$0 = 0; else {
  $$012 = $list;
  while (1) {
   if (!(_fnmatch(HEAP32[$$012 + 4 >> 2] | 0, $filename | 0, 0) | 0)) {
    $$0 = $$012;
    break L1;
   }
   $5 = HEAP32[$$012 >> 2] | 0;
   if (!$5) {
    $$0 = 0;
    break;
   } else $$012 = $5;
  }
 } while (0);
 return $$0 | 0;
}

function _get_shell_name() {
 var $$0 = 0, $0 = 0, $5 = 0, $8 = 0, label = 0;
 $0 = _getenv(2612) | 0;
 if (!$0) label = 3; else if (!(HEAP8[$0 >> 0] | 0)) label = 3; else $$0 = $0;
 do if ((label | 0) == 3) {
  $5 = _bb_internal_getpwuid(_getuid() | 0) | 0;
  if ($5 | 0) {
   $8 = HEAP32[$5 + 24 >> 2] | 0;
   if ($8 | 0) if (HEAP8[$8 >> 0] | 0) {
    $$0 = $8;
    break;
   }
  }
  $$0 = 1303;
 } while (0);
 return $$0 | 0;
}

function ___block_all_sigs($set) {
 $set = $set | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = 0;
 HEAP32[$vararg_buffer + 4 >> 2] = 764;
 HEAP32[$vararg_buffer + 8 >> 2] = $set;
 HEAP32[$vararg_buffer + 12 >> 2] = 8;
 ___syscall175(175, $vararg_buffer | 0) | 0;
 STACKTOP = sp;
 return;
}

function _symlink($existing, $new) {
 $existing = $existing | 0;
 $new = $new | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $existing;
 HEAP32[$vararg_buffer + 4 >> 2] = $new;
 $1 = ___syscall_ret(___syscall83(83, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function ___restore_sigs($set) {
 $set = $set | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = 2;
 HEAP32[$vararg_buffer + 4 >> 2] = $set;
 HEAP32[$vararg_buffer + 8 >> 2] = 0;
 HEAP32[$vararg_buffer + 12 >> 2] = 8;
 ___syscall175(175, $vararg_buffer | 0) | 0;
 STACKTOP = sp;
 return;
}

function _link($existing, $new) {
 $existing = $existing | 0;
 $new = $new | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $existing;
 HEAP32[$vararg_buffer + 4 >> 2] = $new;
 $1 = ___syscall_ret(___syscall9(9, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _nth_string($strings, $n) {
 $strings = $strings | 0;
 $n = $n | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $1 = 0, $4 = 0;
 if (!$n) $$01$lcssa = $strings; else {
  $$012 = $strings;
  $$03 = $n;
  while (1) {
   $1 = $$03 + -1 | 0;
   $4 = $$012 + ((_strlen($$012) | 0) + 1) | 0;
   if (!$1) {
    $$01$lcssa = $4;
    break;
   } else {
    $$012 = $4;
    $$03 = $1;
   }
  }
 }
 return $$01$lcssa | 0;
}

function _mkdir($path, $mode) {
 $path = $path | 0;
 $mode = $mode | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $mode;
 $1 = ___syscall_ret(___syscall39(39, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _chmod($path, $mode) {
 $path = $path | 0;
 $mode = $mode | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $mode;
 $1 = ___syscall_ret(___syscall15(15, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _lstat($path, $buf) {
 $path = $path | 0;
 $buf = $buf | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 $1 = ___syscall_ret(___syscall196(196, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _stat($path, $buf) {
 $path = $path | 0;
 $buf = $buf | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 $1 = ___syscall_ret(___syscall195(195, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _bb_perror_msg($s, $varargs) {
 $s = $s | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $4 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 HEAP32[$p >> 2] = $varargs;
 $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 if (!$1) $4 = 0; else $4 = _strerror($1) | 0;
 _bb_verror_msg($s, $p, $4);
 STACKTOP = sp;
 return;
}

function _bb_perror_msg_and_die($s, $varargs) {
 $s = $s | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $4 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 HEAP32[$p >> 2] = $varargs;
 $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 if (!$1) $4 = 0; else $4 = _strerror($1) | 0;
 _bb_verror_msg($s, $p, $4);
 _xfunc_die();
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _xread($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if ($count | 0) if ((_full_read($fd, $buf, $count) | 0) != ($count | 0)) _bb_error_msg_and_die(2727, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $$0 = 0, $0 = 0, $5 = 0;
 _mallopt(-1, 8192) | 0;
 _mallopt(-3, 32512) | 0;
 $0 = $argv + 4 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) $$0 = $argv; else {
  $5 = (_is_prefixed_with(HEAP32[$argv >> 2] | 0, 1118) | 0) == 0;
  $$0 = $5 ? $argv : $0;
 }
 _lbb_prepare(772, $$0);
 return _tar_main($argc, $$0) | 0;
}

function _wait_for_exitstatus($pid) {
 $pid = $pid | 0;
 var $exit_status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $exit_status = sp + 4 | 0;
 if ((_safe_waitpid($pid, $exit_status, 0) | 0) < 0) _bb_perror_msg_and_die(1126, sp); else {
  STACKTOP = sp;
  return HEAP32[$exit_status >> 2] | 0;
 }
 return 0;
}

function _close($fd) {
 $fd = $fd | 0;
 var $0 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 $0 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $2 = ___syscall_ret(($0 | 0) == -4 ? -115 : $0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _safe_waitpid($pid, $wstat, $options) {
 $pid = $pid | 0;
 $wstat = $wstat | 0;
 $options = $options | 0;
 var $$lcssa = 0, $0 = 0;
 while (1) {
  $0 = _waitpid($pid, $wstat, $options) | 0;
  if (($0 | 0) != -1) {
   $$lcssa = $0;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   $$lcssa = -1;
   break;
  }
 }
 return $$lcssa | 0;
}

function _xstrdup($s) {
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (!$s) $$0 = 0; else {
  $1 = ___strdup($s) | 0;
  if (!$1) _bb_error_msg_and_die(1273, $vararg_buffer); else $$0 = $1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _llist_add_to_end($list_head, $data) {
 $list_head = $list_head | 0;
 $data = $data | 0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $2 = 0;
 $$0 = $list_head;
 while (1) {
  $0 = HEAP32[$$0 >> 2] | 0;
  if (!$0) {
   $$0$lcssa = $$0;
   break;
  } else $$0 = $0;
 }
 $2 = _xzalloc(8) | 0;
 HEAP32[$$0$lcssa >> 2] = $2;
 HEAP32[$2 + 4 >> 2] = $data;
 return;
}

function _fopen_or_warn_stdin($filename) {
 $filename = $filename | 0;
 var $0 = 0, $fp$0 = 0;
 $0 = HEAP32[104] | 0;
 do if (($filename | 0) == 1287) $fp$0 = $0; else {
  if ((HEAP8[$filename >> 0] | 0) == 45) if (!(HEAP8[$filename + 1 >> 0] | 0)) {
   $fp$0 = $0;
   break;
  }
  $fp$0 = _fopen_or_warn($filename, 2834) | 0;
 } while (0);
 return $fp$0 | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $3 = 0;
 $0 = $c & 255;
 $$01 = $n;
 while (1) {
  $1 = $$01 + -1 | 0;
  if (!$$01) {
   $$0 = 0;
   break;
  }
  $3 = $m + $1 | 0;
  if ((HEAP8[$3 >> 0] | 0) == $0 << 24 >> 24) {
   $$0 = $3;
   break;
  } else $$01 = $1;
 }
 return $$0 | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $5;
 if (($lim | 0) != 0 & ($5 | 0) > ($lim | 0)) HEAP32[$f + 100 >> 2] = $4 + $lim; else HEAP32[$f + 100 >> 2] = $2;
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _xchdir($path) {
 $path = $path | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (!(_chdir($path) | 0)) {
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer >> 2] = $path;
  _bb_perror_msg_and_die(1212, $vararg_buffer);
 }
}

function _xrealloc($ptr, $size) {
 $ptr = $ptr | 0;
 $size = $size | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _realloc($ptr, $size) | 0;
 if (($size | 0) != 0 & ($0 | 0) == 0) _bb_error_msg_and_die(1273, sp); else {
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _unlink($path) {
 $path = $path | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 $1 = ___syscall_ret(___syscall10(10, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $4 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $4 >>> 0 > $l >>> 0 ? $l : $4;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _safe_write($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $$lcssa = 0, $0 = 0;
 while (1) {
  $0 = _write($fd, $buf, $count) | 0;
  if (($0 | 0) >= 0) {
   $$lcssa = $0;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   $$lcssa = $0;
   break;
  }
 }
 return $$lcssa | 0;
}

function _umask($mode) {
 $mode = $mode | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $mode;
 $1 = ___syscall_ret(___syscall60(60, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _chdir($path) {
 $path = $path | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 $1 = ___syscall_ret(___syscall12(12, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _safe_read($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $$lcssa = 0, $0 = 0;
 while (1) {
  $0 = _read($fd, $buf, $count) | 0;
  if (($0 | 0) >= 0) {
   $$lcssa = $0;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   $$lcssa = $0;
   break;
  }
 }
 return $$lcssa | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _pipe($fd) {
 $fd = $fd | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 $1 = ___syscall_ret(___syscall42(42, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vfprintf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _parse_file($db, $key, $field_pos) {
 $db = $db | 0;
 $key = $key | 0;
 $field_pos = $field_pos | 0;
 var $1 = 0, $3 = 0, $buf$0 = 0;
 $1 = _fopen_for_read(HEAP32[$db >> 2] | 0) | 0;
 if (!$1) $buf$0 = 0; else {
  $3 = _parse_common($1, $db, $key, $field_pos) | 0;
  _fclose($1) | 0;
  $buf$0 = $3;
 }
 return $buf$0 | 0;
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $1 = _vfprintf(HEAP32[133] | 0, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _last_char_is($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$1 = 0, $5 = 0, label = 0;
 if (!$s) label = 4; else if (!(HEAP8[$s >> 0] | 0)) label = 4; else {
  $5 = $s + ((_strlen($s) | 0) + -1) | 0;
  if ((HEAPU8[$5 >> 0] | 0) == ($c | 0)) $$1 = $5; else label = 4;
 }
 if ((label | 0) == 4) $$1 = 0;
 return $$1 | 0;
}

function _testSetjmp(id, table, size) {
 id = id | 0;
 table = table | 0;
 size = size | 0;
 var i = 0, curr = 0;
 while ((i | 0) < (size | 0)) {
  curr = HEAP32[table + (i << 3) >> 2] | 0;
  if (!curr) break;
  if ((curr | 0) == (id | 0)) return HEAP32[table + ((i << 3) + 4) >> 2] | 0;
  i = i + 1 | 0;
 }
 return 0;
}

function _xmalloc($size) {
 $size = $size | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _malloc($size) | 0;
 if (($size | 0) != 0 & ($0 | 0) == 0) _bb_error_msg_and_die(1273, sp); else {
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _lbb_prepare($applet, $argv) {
 $applet = $applet | 0;
 $argv = $argv | 0;
 var $1 = 0;
 HEAP32[1412] = $applet;
 $1 = HEAP32[$argv + 4 >> 2] | 0;
 if ($1 | 0) if (!(HEAP32[$argv + 8 >> 2] | 0)) if (!(_strcmp($1, 1111) | 0)) if (!(_is_prefixed_with($applet, 1118) | 0)) _bb_show_usage();
 return;
}

function _bb_simple_perror_msg($s) {
 $s = $s | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $s;
 _bb_perror_msg(1311, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _malloc_or_warn($size) {
 $size = $size | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _malloc($size) | 0;
 if (($size | 0) != 0 & ($0 | 0) == 0) _bb_error_msg(1273, sp);
 STACKTOP = sp;
 return $0 | 0;
}

function _bb_simple_perror_msg_and_die($s) {
 $s = $s | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $s;
 _bb_perror_msg_and_die(1311, $vararg_buffer);
}

function _xdup2($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if ((_dup2($from, $to) | 0) == ($to | 0)) {
  STACKTOP = sp;
  return;
 } else _bb_perror_msg_and_die(1168, sp);
}

function _bb_error_msg($s, $varargs) {
 $s = $s | 0;
 $varargs = $varargs | 0;
 var $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 HEAP32[$p >> 2] = $varargs;
 _bb_verror_msg($s, $p, 0);
 STACKTOP = sp;
 return;
}

function _skip_whitespace($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0;
 $$0 = $s;
 while (1) {
  $0 = HEAP8[$$0 >> 0] | 0;
  if ($0 << 24 >> 24 != 32) if ((($0 & 255) + 247 & 255) >>> 0 >= 5) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 1 | 0;
 }
 return $$0$lcssa | 0;
}

function _uid2uname_utoa($uid) {
 $uid = $uid | 0;
 var $0 = 0, $2 = 0, $5 = 0, label = 0;
 $0 = _bb_internal_getpwuid($uid) | 0;
 if (!$0) label = 3; else {
  $2 = HEAP32[$0 >> 2] | 0;
  if (!$2) label = 3; else $5 = $2;
 }
 if ((label | 0) == 3) $5 = _utoa($uid) | 0;
 return $5 | 0;
}

function _gid2group_utoa($gid) {
 $gid = $gid | 0;
 var $0 = 0, $2 = 0, $5 = 0, label = 0;
 $0 = _bb_internal_getgrgid($gid) | 0;
 if (!$0) label = 3; else {
  $2 = HEAP32[$0 >> 2] | 0;
  if (!$2) label = 3; else $5 = $2;
 }
 if ((label | 0) == 3) $5 = _utoa($gid) | 0;
 return $5 | 0;
}

function _bb_error_msg_and_die($s, $varargs) {
 $s = $s | 0;
 $varargs = $varargs | 0;
 var $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 HEAP32[$p >> 2] = $varargs;
 _bb_verror_msg($s, $p, 0);
 _xfunc_die();
}

function _getc_unlocked($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $9 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___uflow($f) | 0;
 return $9 | 0;
}

function ___sigaction($sig, $sa, $old) {
 $sig = $sig | 0;
 $sa = $sa | 0;
 $old = $old | 0;
 var $$0 = 0;
 if (($sig + -32 | 0) >>> 0 < 3) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = -1;
 } else $$0 = ___libc_sigaction($sig, $sa, $old) | 0;
 return $$0 | 0;
}

function _llist_pop($head) {
 $head = $head | 0;
 var $0 = 0, $3 = 0, $data$0 = 0;
 $0 = HEAP32[$head >> 2] | 0;
 if (!$0) $data$0 = 0; else {
  $3 = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$head >> 2] = HEAP32[$0 >> 2];
  _free($0);
  $data$0 = $3;
 }
 return $data$0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _xfork() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _fork() | 0;
 if (($0 | 0) < 0) _bb_perror_msg_and_die(1244, sp); else {
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _safe_strncpy($dst, $src, $size) {
 $dst = $dst | 0;
 $src = $src | 0;
 $size = $size | 0;
 var $$0 = 0, $1 = 0;
 if (!$size) $$0 = $dst; else {
  $1 = $size + -1 | 0;
  HEAP8[$dst + $1 >> 0] = 0;
  $$0 = _strncpy($dst, $src, $1) | 0;
 }
 return $$0 | 0;
}

function _xpipe($filedes) {
 $filedes = $filedes | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!(_pipe($filedes) | 0)) {
  STACKTOP = sp;
  return;
 } else _bb_perror_msg_and_die(1150, sp);
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _getopt_long($argc, $argv, $optstring, $longopts, $idx) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 $optstring = $optstring | 0;
 $longopts = $longopts | 0;
 $idx = $idx | 0;
 return ___getopt_long($argc, $argv, $optstring, $longopts, $idx, 0) | 0;
}

function _data_skip($archive_handle) {
 $archive_handle = $archive_handle | 0;
 FUNCTION_TABLE_vii[HEAP32[$archive_handle + 36 >> 2] & 3](HEAP32[$archive_handle + 4 >> 2] | 0, HEAP32[(HEAP32[$archive_handle + 24 >> 2] | 0) + 16 >> 2] | 0);
 return;
}

function _llist_add_to($old_head, $data) {
 $old_head = $old_head | 0;
 $data = $data | 0;
 var $0 = 0;
 $0 = _xmalloc(8) | 0;
 HEAP32[$0 + 4 >> 2] = $data;
 HEAP32[$0 >> 2] = HEAP32[$old_head >> 2];
 HEAP32[$old_head >> 2] = $0;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function _data_extract_to_stdout($archive_handle) {
 $archive_handle = $archive_handle | 0;
 _bb_copyfd_exact_size(HEAP32[$archive_handle + 4 >> 2] | 0, 1, HEAP32[(HEAP32[$archive_handle + 24 >> 2] | 0) + 16 >> 2] | 0);
 return;
}

function _init_handle() {
 var $0 = 0;
 $0 = _xzalloc(68) | 0;
 HEAP32[$0 + 24 >> 2] = _xzalloc(40) | 0;
 HEAP32[$0 + 28 >> 2] = 7;
 HEAP32[$0 + 32 >> 2] = 8;
 HEAP32[$0 + 8 >> 2] = 5;
 HEAP32[$0 + 36 >> 2] = 2;
 return $0 | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 $1 = (_strlen($s) | 0) + 1 | 0;
 $2 = _malloc($1) | 0;
 if (!$2) $$0 = 0; else {
  _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
  $$0 = $2;
 }
 return $$0 | 0;
}

function _getuid() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = ___syscall199(199, sp | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function runPostSets() {}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _xfstat($fd, $stat_buf, $errmsg) {
 $fd = $fd | 0;
 $stat_buf = $stat_buf | 0;
 $errmsg = $errmsg | 0;
 if (!(_fstat($fd, $stat_buf) | 0)) return; else _bb_simple_perror_msg_and_die($errmsg);
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $$0 = -1;
 } else $$0 = $r;
 return $$0 | 0;
}

function _fopen_or_warn($path, $mode) {
 $path = $path | 0;
 $mode = $mode | 0;
 var $0 = 0;
 $0 = _fopen($path, $mode) | 0;
 if (!$0) _bb_simple_perror_msg($path);
 return $0 | 0;
}

function _true_action($fileName, $statbuf, $userData, $depth) {
 $fileName = $fileName | 0;
 $statbuf = $statbuf | 0;
 $userData = $userData | 0;
 $depth = $depth | 0;
 return 1;
}

function _xfopen_stdin($filename) {
 $filename = $filename | 0;
 var $0 = 0;
 $0 = _fopen_or_warn_stdin($filename) | 0;
 if (!$0) _xfunc_die(); else return $0 | 0;
 return 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 7](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_383($s, $p, $base, -1, -1) | 0;
 return $0 | 0;
}

function _filter_accept_all($archive_handle) {
 $archive_handle = $archive_handle | 0;
 return (HEAP32[HEAP32[$archive_handle + 24 >> 2] >> 2] | 0) == 0 | 0;
}

function _strtoul($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_383($s, $p, $base, -1, 0) | 0;
 return $0 | 0;
}

function ___errno_location() {
 var $$0 = 0;
 if (!(HEAP32[1428] | 0)) $$0 = 5772; else $$0 = HEAP32[(_pthread_self() | 0) + 64 >> 2] | 0;
 return $$0 | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _seek_by_read($fd, $amount) {
 $fd = $fd | 0;
 $amount = $amount | 0;
 if ($amount | 0) _bb_copyfd_exact_size($fd, -1, $amount);
 return;
}

function _open_or_warn($pathname, $flags) {
 $pathname = $pathname | 0;
 $flags = $flags | 0;
 return _open3_or_warn($pathname, $flags, 438) | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 7](a1 | 0, a2 | 0) | 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _xzalloc($size) {
 $size = $size | 0;
 var $0 = 0;
 $0 = _xmalloc($size) | 0;
 _memset($0 | 0, 0, $size | 0) | 0;
 return $0 | 0;
}

function _execv($path, $argv) {
 $path = $path | 0;
 $argv = $argv | 0;
 return _execve($path, $argv, HEAP32[___environ >> 2] | 0) | 0;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 3](a1 | 0, a2 | 0);
}

function _xopen($pathname, $flags) {
 $pathname = $pathname | 0;
 $flags = $flags | 0;
 return _xopen3($pathname, $flags, 438) | 0;
}

function _xfunc_die() {
 var $0 = 0;
 $0 = HEAP32[1413] | 0;
 if ($0 | 0) FUNCTION_TABLE_v[$0 & 3]();
 _exit(HEAPU8[1272] | 0 | 0);
}

function _closedir($dir) {
 $dir = $dir | 0;
 var $1 = 0;
 $1 = _close(HEAP32[$dir >> 2] | 0) | 0;
 _free($dir);
 return $1 | 0;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _xatoi_positive($numstr) {
 $numstr = $numstr | 0;
 return _xstrtoul_range_sfx($numstr, 10, 0, 2147483647, 0) | 0;
}

function _header_list($file_header) {
 $file_header = $file_header | 0;
 _puts(HEAP32[$file_header >> 2] | 0) | 0;
 return;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 7](a1 | 0) | 0;
}

function b5(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(5);
 return 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 return (_fwrite($s, _strlen($s) | 0, 1, $f) | 0) + -1 | 0;
}

function _ntohs($n) {
 $n = $n | 0;
 var $0 = 0;
 $0 = $n & 65535;
 return ($0 << 8 | $0 >>> 8) & 65535 | 0;
}

function _htons($n) {
 $n = $n | 0;
 var $0 = 0;
 $0 = $n & 65535;
 return ($0 << 8 | $0 >>> 8) & 65535 | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}

function _full_write2_str($str) {
 $str = $str | 0;
 return _full_write(2, $str, _strlen($str) | 0) | 0;
}

function _dealloc_bunzip($bd) {
 $bd = $bd | 0;
 _free(HEAP32[$bd + 60 >> 2] | 0);
 _free($bd);
 return;
}

function _cleanup_255($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function _cleanup($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _fopen_for_read($path) {
 $path = $path | 0;
 return _fopen($path, 2834) | 0;
}

function _header_skip($file_header) {
 $file_header = $file_header | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function _bb_putchar($ch) {
 $ch = $ch | 0;
 return _putchar_unlocked($ch) | 0;
}

function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(6);
 return 0;
}

function _htonl($n) {
 $n = $n | 0;
 return _llvm_bswap_i32($n | 0) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(2);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function b1(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1);
}

function _fflush_all() {
 return _fflush(0) | 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function _dummy($x) {
 $x = $x | 0;
 return;
}

function _pthread_self() {
 return 0;
}

function ___restore_rt() {
 return;
}

function _dummy_588() {
 return 0;
}

function ___restore() {
 return;
}

function b4() {
 nullFunc_v(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,b0,b0];
var FUNCTION_TABLE_vi = [b1,_header_verbose_list,_header_list,_data_extract_all,_data_extract_to_stdout,_data_extract_to_command,_free,_header_skip,_data_skip,_cleanup_255,_cleanup,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_seek_by_read,_seek_by_jump,b2];
var FUNCTION_TABLE_ii = [b3,___stdio_close,_filter_accept_reject_list,_xzalloc,_malloc_or_warn,_filter_accept_all,b3,b3];
var FUNCTION_TABLE_v = [b4,_xfunc_die,___restore,___restore_rt];
var FUNCTION_TABLE_iiiii = [b5,_writeFileToTarball,_true_action,b5];
var FUNCTION_TABLE_iii = [b6,_crc32_filltable,_get_bits,_lstat,_stat,b6,b6,b6];

  return { _main: _main, _memset: _memset, _bitshift64Lshr: _bitshift64Lshr, _ntohs: _ntohs, _fflush: _fflush, _llvm_cttz_i32: _llvm_cttz_i32, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _htonl: _htonl, _realloc: _realloc, _i64Add: _i64Add, _pthread_self: _pthread_self, _htons: _htons, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _memmove: _memmove, _malloc: _malloc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
});
// EMSCRIPTEN_END_ASM
if (!ENVIRONMENT_IS_BROWSIX)
    asm = asmModule(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _main;
var _memset;
var _bitshift64Lshr;
var ___udivmoddi4;
var _fflush;
var _llvm_cttz_i32;
var _memcpy;
var _llvm_bswap_i32;
var ___muldi3;
var _bitshift64Shl;
var ___uremdi3;
var _i64Subtract;
var _ntohs;
var _htonl;
var _realloc;
var _i64Add;
var _pthread_self;
var _htons;
var ___udivdi3;
var ___errno_location;
var ___muldsi3;
var _testSetjmp;
var _saveSetjmp;
var _free;
var runPostSets;
var _memmove;
var _malloc;
var dynCall_iiii;
var dynCall_vi;
var dynCall_vii;
var dynCall_ii;
var dynCall_v;
var dynCall_iiiii;
var dynCall_iii;


function initReceiving() {
var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
  _main = Module["_main"] = asm["_main"];
  _memset = Module["_memset"] = asm["_memset"];
  _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
  ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
  _fflush = Module["_fflush"] = asm["_fflush"];
  _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
  _memcpy = Module["_memcpy"] = asm["_memcpy"];
  _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
  ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
  _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
  ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
  _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
  _ntohs = Module["_ntohs"] = asm["_ntohs"];
  _htonl = Module["_htonl"] = asm["_htonl"];
  _realloc = Module["_realloc"] = asm["_realloc"];
  _i64Add = Module["_i64Add"] = asm["_i64Add"];
  _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
  _htons = Module["_htons"] = asm["_htons"];
  ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
  ___errno_location = Module["___errno_location"] = asm["___errno_location"];
  ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
  _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
  _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
  _free = Module["_free"] = asm["_free"];
  runPostSets = Module["runPostSets"] = asm["runPostSets"];
  _memmove = Module["_memmove"] = asm["_memmove"];
  _malloc = Module["_malloc"] = asm["_malloc"];
  dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
  dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
  dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
  dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
  dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
  dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
  dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;
}
if (!ENVIRONMENT_IS_BROWSIX)
  initReceiving();

function initRuntimeFuncs() {

  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.establishStackSpace = asm['establishStackSpace'];

  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];

}
if (!ENVIRONMENT_IS_BROWSIX)
  initRuntimeFuncs();



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  // build the environment here, because we're just going to malloc
  // what we need to back our environment.
  ___buildEnvironment(ENV);

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, HEAP32[_environ>>2]);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  // we don't care about noExitRuntime for explicit exit calls in Browsix()
  if (ENVIRONMENT_IS_BROWSIX) {
    EXITSTATUS = status;
    Runtime.process.exit(status);
    // this will terminate the worker's execution as an uncaught
    // Exception, which is what we want.
    throw new ExitStatus(status);
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


if (ENVIRONMENT_IS_BROWSIX) {
  self.onmessage = SYSCALLS.browsix.syscall.resultHandler.bind(SYSCALLS.browsix.syscall);
  Runtime.process.once('ready', function() {
    Module['thisProgram'] = Runtime.process.argv[0];
    for (var k in Runtime.process.env) {
      if (!Runtime.process.env.hasOwnProperty(k))
        continue;
      ENV[k] = Runtime.process.env[k];
    }
    ENV = Runtime.process.env;
    ENV['_'] = Runtime.process.argv[0];

    if (Runtime.process.pid) {
      abort('TODO: sync post-fork?');
    } else {
      run(Runtime.process.argv.slice(2));
    }
  });
}

if (!ENVIRONMENT_IS_BROWSIX) {
  var oldHEAP8 = HEAP8;
  ret = new ArrayBuffer(TOTAL_MEMORY);
  var temp = new Int8Array(ret);
  temp.set(oldHEAP8);
  _emscripten_replace_memory(ret);
  updateGlobalBuffer(ret);
  updateGlobalBufferViews();
  run();
}

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






